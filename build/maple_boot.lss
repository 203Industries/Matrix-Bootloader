
build/maple_boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000f0  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001720  080000f0  080000f0  000080f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .matrix_info  00000010  08001e00  08001e00  00011e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data         000001c4  20000000  08001810  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000044  200001c4  080019d4  000101c4  2**2
                  ALLOC
  5 .bss.bIntPackSOF 00000001  20000208  08001a18  000101c4  2**0
                  ALLOC
  6 .bss.bDeviceState 00000004  2000020c  08001a1c  000101c4  2**2
                  ALLOC
  7 .bss.recvBuffer 00000800  20000210  08001a20  000101c4  2**2
                  ALLOC
  8 .bss.uploadBlockLen 00000002  20000a10  08002220  00018a10  2**1
                  ALLOC
  9 .bss.thisBlockLen 00000002  20000a12  08002222  00018a10  2**1
                  ALLOC
 10 .bss.userFirmwareLen 00000004  20000a14  08002224  00018a10  2**2
                  ALLOC
 11 .bss.userUploadType 00000001  20000a18  08002228  00018a10  2**0
                  ALLOC
 12 .bss.dfuAppStatus 00000006  20000a19  08002229  00018a10  2**0
                  ALLOC
 13 .bss.dfuBusy  00000001  20000a1f  0800222f  00018a10  2**0
                  ALLOC
 14 .bss.Data_Mul_MaxPacketSize 00000001  20000a20  08002230  00018a10  2**0
                  ALLOC
 15 ._usrstack    00000103  20000a21  08002231  00018a10  2**0
                  ALLOC
 16 .comment      00000080  00000000  00000000  00011e10  2**0
                  CONTENTS, READONLY
 17 .ARM.attributes 0000002f  00000000  00000000  00011e90  2**0
                  CONTENTS, READONLY
 18 .debug_aranges 000005e8  00000000  00000000  00011ec0  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_info   000045bc  00000000  00000000  000124a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00001486  00000000  00000000  00016a64  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_line   0000148a  00000000  00000000  00017eea  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_frame  00000c70  00000000  00000000  00019374  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    00001810  00000000  00000000  00019fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_loc    00002021  00000000  00000000  0001b7f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_ranges 00000618  00000000  00000000  0001d818  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .isr_vector:

08000000 <g_pfnVectors>:
 8000000:	20005000 	andcs	r5, r0, r0
 8000004:	080000f1 	stmdaeq	r0, {r0, r4, r5, r6, r7}
 8000008:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 800000c:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000010:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000014:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000018:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
	...
 800002c:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000030:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000034:	00000000 	andeq	r0, r0, r0
 8000038:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 800003c:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000040:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000044:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000048:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 800004c:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000050:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000054:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000058:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 800005c:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000060:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000064:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000068:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 800006c:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000070:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000074:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000078:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 800007c:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000080:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000084:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000088:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 800008c:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000090:	080004f9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, sl}
 8000094:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000098:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 800009c:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000a0:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000a4:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000a8:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000ac:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000b0:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000b4:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000b8:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000bc:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000c0:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000c4:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000c8:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000cc:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000d0:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000d4:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000d8:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000dc:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000e0:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000e4:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000e8:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000ec:	f108f85f 			; <UNDEFINED> instruction: 0xf108f85f

Disassembly of section .text:

080000f0 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80000f0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80000f2:	f000 b804 	b.w	80000fe <LoopCopyDataInit>

080000f6 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80000f6:	4b0b      	ldr	r3, [pc, #44]	; (8000124 <LoopFillZerobss+0xe>)
	ldr	r3, [r3, r1]
 80000f8:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80000fa:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80000fc:	3104      	adds	r1, #4

080000fe <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80000fe:	480a      	ldr	r0, [pc, #40]	; (8000128 <LoopFillZerobss+0x12>)
	ldr	r3, =_edata
 8000100:	4b0a      	ldr	r3, [pc, #40]	; (800012c <LoopFillZerobss+0x16>)
	adds	r2, r0, r1
 8000102:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000104:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000106:	f4ff aff6 	bcc.w	80000f6 <CopyDataInit>
	ldr	r2, =_sbss
 800010a:	4a09      	ldr	r2, [pc, #36]	; (8000130 <LoopFillZerobss+0x1a>)
	b	LoopFillZerobss
 800010c:	f000 b803 	b.w	8000116 <LoopFillZerobss>

08000110 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000110:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000112:	f842 3b04 	str.w	r3, [r2], #4

08000116 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000116:	4b07      	ldr	r3, [pc, #28]	; (8000134 <LoopFillZerobss+0x1e>)
	cmp	r2, r3
 8000118:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800011a:	f4ff aff9 	bcc.w	8000110 <FillZerobss>
/* Call the application's entry point.*/
	bl	main
 800011e:	f000 fa45 	bl	80005ac <main>
	bx	lr
 8000122:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8000124:	08001810 	stmdaeq	r0, {r4, fp, ip}
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000128:	20000000 	andcs	r0, r0, r0
	ldr	r3, =_edata
 800012c:	200001c4 	andcs	r0, r0, r4, asr #3
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8000130:	200001c4 	andcs	r0, r0, r4, asr #3
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8000134:	20000208 	andcs	r0, r0, r8, lsl #4

08000138 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000138:	f7ff bffe 	b.w	8000138 <ADC1_2_IRQHandler>

0800013c <nothingProc>:
    volatile RESUME_STATE eState;
    volatile u8 bESOFcnt;
} ResumeS;

/* dummy proc */
void nothingProc(void) {
 800013c:	4770      	bx	lr

0800013e <usbStatusIn>:

    bDeviceState = ATTACHED;
    SetDeviceAddress(0); /* different than usbSetDeviceAddr! comes from usb_core */
}

void usbStatusIn(void) {
 800013e:	4770      	bx	lr

08000140 <usbStatusOut>:
}

void usbStatusOut(void) {
 8000140:	4770      	bx	lr

08000142 <usbGetInterfaceSetting>:
}

RESULT usbGetInterfaceSetting(u8 interface, u8 altSetting) {
    /* alt setting 0 -> program RAM, alt setting 1 -> FLASH */
    if (interface > NUM_ALT_SETTINGS) {
        return USB_UNSUPPORT;
 8000142:	2803      	cmp	r0, #3
    } else {
        return USB_SUCCESS;
    }
}
 8000144:	bf8c      	ite	hi
 8000146:	2002      	movhi	r0, #2
 8000148:	2000      	movls	r0, #0
 800014a:	4770      	bx	lr

0800014c <usbGetConfiguration>:
 * These are the USER STANDARD REQUESTS, they are handled
 * in the core but we are given these callbacks at the
 * application level
 *******************************************/

void usbGetConfiguration(void) {
 800014c:	4770      	bx	lr
	...

08000150 <usbSetConfiguration>:
    /* nothing process */
}

void usbSetConfiguration(void) {
    if (pInformation->Current_Configuration != 0) {
 8000150:	4b03      	ldr	r3, [pc, #12]	; (8000160 <usbSetConfiguration+0x10>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	7a9b      	ldrb	r3, [r3, #10]
 8000156:	b113      	cbz	r3, 800015e <usbSetConfiguration+0xe>
        bDeviceState = CONFIGURED;
 8000158:	4b02      	ldr	r3, [pc, #8]	; (8000164 <usbSetConfiguration+0x14>)
 800015a:	2205      	movs	r2, #5
 800015c:	601a      	str	r2, [r3, #0]
 800015e:	4770      	bx	lr
 8000160:	20000200 	andcs	r0, r0, r0, lsl #4
 8000164:	2000020c 	andcs	r0, r0, ip, lsl #4

08000168 <usbGetInterface>:
    }
}

void usbGetInterface(void) {
 8000168:	4770      	bx	lr

0800016a <usbSetInterface>:
    /* nothing process */
}

void usbSetInterface(void) {
 800016a:	4770      	bx	lr

0800016c <usbGetStatus>:
    /* nothing process */
}

void usbGetStatus(void) {
 800016c:	4770      	bx	lr

0800016e <usbClearFeature>:
    /* nothing process */
}

void usbClearFeature(void) {
 800016e:	4770      	bx	lr

08000170 <usbSetEndpointFeature>:
    /* nothing process */
}

void usbSetEndpointFeature(void) {
 8000170:	4770      	bx	lr

08000172 <usbSetDeviceFeature>:
    /* nothing process */
}

void usbSetDeviceFeature(void) {
 8000172:	4770      	bx	lr

08000174 <usbSetDeviceAddress>:
    /* nothing process */
}

void usbSetDeviceAddress(void) {
    bDeviceState = ADDRESSED;
 8000174:	4b01      	ldr	r3, [pc, #4]	; (800017c <usbSetDeviceAddress+0x8>)
 8000176:	2204      	movs	r2, #4
 8000178:	601a      	str	r2, [r3, #0]
 800017a:	4770      	bx	lr
 800017c:	2000020c 	andcs	r0, r0, ip, lsl #4

08000180 <usbReset>:

    usbEnbISR(); /* configure the cortex M3 private peripheral NVIC */
    bDeviceState = UNCONNECTED;
}

void usbReset(void) {
 8000180:	b510      	push	{r4, lr}
    dfuUpdateByReset();
 8000182:	f000 fc17 	bl	80009b4 <dfuUpdateByReset>

    pInformation->Current_Configuration = 0;
 8000186:	4b21      	ldr	r3, [pc, #132]	; (800020c <usbReset+0x8c>)
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];
 8000188:	4a21      	ldr	r2, [pc, #132]	; (8000210 <usbReset+0x90>)
}

void usbReset(void) {
    dfuUpdateByReset();

    pInformation->Current_Configuration = 0;
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	2400      	movs	r4, #0
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];
 800018e:	6812      	ldr	r2, [r2, #0]
}

void usbReset(void) {
    dfuUpdateByReset();

    pInformation->Current_Configuration = 0;
 8000190:	729c      	strb	r4, [r3, #10]
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];
 8000192:	79d2      	ldrb	r2, [r2, #7]
    _SetEPTxStatus(ENDP0, EP_TX_STALL);

    _SetEPRxAddr(ENDP0, ENDP0_RXADDR);
    _SetEPTxAddr(ENDP0, ENDP0_TXADDR);

    Clear_Status_Out(ENDP0);
 8000194:	4620      	mov	r0, r4

void usbReset(void) {
    dfuUpdateByReset();

    pInformation->Current_Configuration = 0;
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];
 8000196:	725a      	strb	r2, [r3, #9]

    _SetBTABLE(BTABLE_ADDRESS);
 8000198:	4a1e      	ldr	r2, [pc, #120]	; (8000214 <usbReset+0x94>)

    /* setup the ctrl endpoint */
    _SetEPType(ENDP0, EP_CONTROL);
 800019a:	4b1f      	ldr	r3, [pc, #124]	; (8000218 <usbReset+0x98>)
    dfuUpdateByReset();

    pInformation->Current_Configuration = 0;
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];

    _SetBTABLE(BTABLE_ADDRESS);
 800019c:	6014      	str	r4, [r2, #0]

    /* setup the ctrl endpoint */
    _SetEPType(ENDP0, EP_CONTROL);
 800019e:	6819      	ldr	r1, [r3, #0]
 80001a0:	f421 41ec 	bic.w	r1, r1, #30208	; 0x7600
 80001a4:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80001a8:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80001ac:	b289      	uxth	r1, r1
 80001ae:	6019      	str	r1, [r3, #0]
    _SetEPTxStatus(ENDP0, EP_TX_STALL);
 80001b0:	6819      	ldr	r1, [r3, #0]
 80001b2:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80001b6:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80001ba:	b289      	uxth	r1, r1
 80001bc:	f081 0110 	eor.w	r1, r1, #16
 80001c0:	6019      	str	r1, [r3, #0]

    _SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 80001c2:	6811      	ldr	r1, [r2, #0]
 80001c4:	4b15      	ldr	r3, [pc, #84]	; (800021c <usbReset+0x9c>)
 80001c6:	b289      	uxth	r1, r1
 80001c8:	440b      	add	r3, r1
 80001ca:	005b      	lsls	r3, r3, #1
 80001cc:	2140      	movs	r1, #64	; 0x40
 80001ce:	6019      	str	r1, [r3, #0]
    _SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 80001d0:	6813      	ldr	r3, [r2, #0]
 80001d2:	2280      	movs	r2, #128	; 0x80
 80001d4:	b29b      	uxth	r3, r3
 80001d6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80001da:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80001de:	005b      	lsls	r3, r3, #1
 80001e0:	601a      	str	r2, [r3, #0]

    Clear_Status_Out(ENDP0);
 80001e2:	f000 fda7 	bl	8000d34 <Clear_Status_Out>

    SetEPRxCount(ENDP0, pProperty->MaxPacketSize);
 80001e6:	4b0e      	ldr	r3, [pc, #56]	; (8000220 <usbReset+0xa0>)
 80001e8:	4620      	mov	r0, r4
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 80001f0:	f000 fdf8 	bl	8000de4 <SetEPRxCount>
    //  SetEPTxCount(ENDP0, pProperty->MaxPacketSize);
    SetEPRxValid(ENDP0);
 80001f4:	4620      	mov	r0, r4
 80001f6:	f000 fd8e 	bl	8000d16 <SetEPRxValid>

    bDeviceState = ATTACHED;
 80001fa:	4b0a      	ldr	r3, [pc, #40]	; (8000224 <usbReset+0xa4>)
 80001fc:	2201      	movs	r2, #1
    SetDeviceAddress(0); /* different than usbSetDeviceAddr! comes from usb_core */
 80001fe:	4620      	mov	r0, r4
}
 8000200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

    SetEPRxCount(ENDP0, pProperty->MaxPacketSize);
    //  SetEPTxCount(ENDP0, pProperty->MaxPacketSize);
    SetEPRxValid(ENDP0);

    bDeviceState = ATTACHED;
 8000204:	601a      	str	r2, [r3, #0]
    SetDeviceAddress(0); /* different than usbSetDeviceAddr! comes from usb_core */
 8000206:	f001 ba8f 	b.w	8001728 <SetDeviceAddress>
 800020a:	bf00      	nop
 800020c:	20000200 	andcs	r0, r0, r0, lsl #4
 8000210:	200001b4 			; <UNDEFINED> instruction: 0x200001b4
 8000214:	40005c50 	andmi	r5, r0, r0, asr ip
 8000218:	40005c00 	andmi	r5, r0, r0, lsl #24
 800021c:	20003004 	andcs	r3, r0, r4
 8000220:	200001d8 	ldrdcs	r0, [r0], -r8
 8000224:	2000020c 	andcs	r0, r0, ip, lsl #4

08000228 <usbDataSetup>:
}

void usbStatusOut(void) {
}

RESULT usbDataSetup(u8 request) {
 8000228:	b538      	push	{r3, r4, r5, lr}
    u8 *(*CopyRoutine)(u16);
    CopyRoutine = NULL;

    /* handle dfu class requests */
    if ((pInformation->USBbmRequestType & (REQUEST_TYPE | RECIPIENT)) == (CLASS_REQUEST | INTERFACE_RECIPIENT)) {
 800022a:	4b12      	ldr	r3, [pc, #72]	; (8000274 <usbDataSetup+0x4c>)
}

void usbStatusOut(void) {
}

RESULT usbDataSetup(u8 request) {
 800022c:	4605      	mov	r5, r0
    u8 *(*CopyRoutine)(u16);
    CopyRoutine = NULL;

    /* handle dfu class requests */
    if ((pInformation->USBbmRequestType & (REQUEST_TYPE | RECIPIENT)) == (CLASS_REQUEST | INTERFACE_RECIPIENT)) {
 800022e:	681a      	ldr	r2, [r3, #0]
 8000230:	461c      	mov	r4, r3
 8000232:	7812      	ldrb	r2, [r2, #0]
 8000234:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000238:	2a21      	cmp	r2, #33	; 0x21
 800023a:	d119      	bne.n	8000270 <usbDataSetup+0x48>
        if (dfuUpdateByRequest()) {
 800023c:	f000 fc48 	bl	8000ad0 <dfuUpdateByRequest>
 8000240:	b1b0      	cbz	r0, 8000270 <usbDataSetup+0x48>
            /* successfull state transition, handle the request */
            switch (request) {
 8000242:	1e68      	subs	r0, r5, #1
 8000244:	2804      	cmp	r0, #4
 8000246:	d813      	bhi.n	8000270 <usbDataSetup+0x48>
 8000248:	e8df f000 	tbb	[pc, r0]
 800024c:	12070503 	andne	r0, r7, #12582912	; 0xc00000
 8000250:	4b090009 	blmi	824027c <matrix_info+0x23e47c>
            case(DFU_GETSTATE):
                CopyRoutine = dfuCopyState;
                break;
            case(DFU_DNLOAD):
                CopyRoutine = dfuCopyDNLOAD;
                break;
 8000254:	e004      	b.n	8000260 <usbDataSetup+0x38>
            case(DFU_UPLOAD):
                CopyRoutine = dfuCopyUPLOAD;
 8000256:	4b09      	ldr	r3, [pc, #36]	; (800027c <usbDataSetup+0x54>)
                break;
 8000258:	e002      	b.n	8000260 <usbDataSetup+0x38>
    if ((pInformation->USBbmRequestType & (REQUEST_TYPE | RECIPIENT)) == (CLASS_REQUEST | INTERFACE_RECIPIENT)) {
        if (dfuUpdateByRequest()) {
            /* successfull state transition, handle the request */
            switch (request) {
            case(DFU_GETSTATUS):
                CopyRoutine = dfuCopyStatus;
 800025a:	4b09      	ldr	r3, [pc, #36]	; (8000280 <usbDataSetup+0x58>)
 800025c:	e000      	b.n	8000260 <usbDataSetup+0x38>
                break;
            case(DFU_GETSTATE):
                CopyRoutine = dfuCopyState;
 800025e:	4b09      	ldr	r3, [pc, #36]	; (8000284 <usbDataSetup+0x5c>)
            }
        }
    }

    if (CopyRoutine != NULL) {
        pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8000260:	6822      	ldr	r2, [r4, #0]
        pInformation->Ctrl_Info.Usb_wOffset = 0;
 8000262:	2400      	movs	r4, #0
        (*CopyRoutine)(0);
 8000264:	4620      	mov	r0, r4
            }
        }
    }

    if (CopyRoutine != NULL) {
        pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8000266:	6193      	str	r3, [r2, #24]
        pInformation->Ctrl_Info.Usb_wOffset = 0;
 8000268:	8254      	strh	r4, [r2, #18]
        (*CopyRoutine)(0);
 800026a:	4798      	blx	r3

        return USB_SUCCESS;
 800026c:	4620      	mov	r0, r4
 800026e:	bd38      	pop	{r3, r4, r5, pc}
    }

    return USB_UNSUPPORT;
 8000270:	2002      	movs	r0, #2
}
 8000272:	bd38      	pop	{r3, r4, r5, pc}
 8000274:	20000200 	andcs	r0, r0, r0, lsl #4
 8000278:	08000a29 	stmdaeq	r0, {r0, r3, r5, r9, fp}
 800027c:	08000a51 	stmdaeq	r0, {r0, r4, r6, r9, fp}
 8000280:	08000a11 	stmdaeq	r0, {r0, r4, r9, fp}
 8000284:	080009f9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r8, fp}

08000288 <usbGetDeviceDescriptor>:
        return USB_SUCCESS;
    }
}

u8 *usbGetDeviceDescriptor(u16 len) {
    return Standard_GetDescriptorData(len, &usbDeviceDescriptorDFU);
 8000288:	4901      	ldr	r1, [pc, #4]	; (8000290 <usbGetDeviceDescriptor+0x8>)
 800028a:	f001 b84d 	b.w	8001328 <Standard_GetDescriptorData>
 800028e:	bf00      	nop
 8000290:	20000144 	andcs	r0, r0, r4, asr #2

08000294 <usbGetConfigDescriptor>:
}

u8 *usbGetConfigDescriptor(u16 len) {
    return Standard_GetDescriptorData(len, &usbConfigDescriptorDFU);
 8000294:	4901      	ldr	r1, [pc, #4]	; (800029c <usbGetConfigDescriptor+0x8>)
 8000296:	f001 b847 	b.w	8001328 <Standard_GetDescriptorData>
 800029a:	bf00      	nop
 800029c:	200001b4 			; <UNDEFINED> instruction: 0x200001b4

080002a0 <usbGetStringDescriptor>:
}

u8 *usbGetStringDescriptor(u16 len) {
    u8 strIndex = pInformation->USBwValue0;
 80002a0:	4b05      	ldr	r3, [pc, #20]	; (80002b8 <usbGetStringDescriptor+0x18>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	789b      	ldrb	r3, [r3, #2]
    if (strIndex > STR_DESC_LEN) {
 80002a6:	2b07      	cmp	r3, #7
 80002a8:	d804      	bhi.n	80002b4 <usbGetStringDescriptor+0x14>
        return NULL;
    } else {
        return Standard_GetDescriptorData(len, &usbStringDescriptor[strIndex]);
 80002aa:	4904      	ldr	r1, [pc, #16]	; (80002bc <usbGetStringDescriptor+0x1c>)
 80002ac:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80002b0:	f001 b83a 	b.w	8001328 <Standard_GetDescriptorData>
    }
}
 80002b4:	2000      	movs	r0, #0
 80002b6:	4770      	bx	lr
 80002b8:	20000200 	andcs	r0, r0, r0, lsl #4
 80002bc:	20000094 	mulcs	r0, r4, r0

080002c0 <usbGetFunctionalDescriptor>:

u8 *usbGetFunctionalDescriptor(u16 len) {
    return Standard_GetDescriptorData(len, &usbFunctionalDescriptor);
 80002c0:	4901      	ldr	r1, [pc, #4]	; (80002c8 <usbGetFunctionalDescriptor+0x8>)
 80002c2:	f001 b831 	b.w	8001328 <Standard_GetDescriptorData>
 80002c6:	bf00      	nop
 80002c8:	200000e0 	andcs	r0, r0, r0, ror #1

080002cc <usbNoDataSetup>:
    }

    return USB_UNSUPPORT;
}

RESULT usbNoDataSetup(u8 request) {
 80002cc:	b508      	push	{r3, lr}
    if ((pInformation->USBbmRequestType & (REQUEST_TYPE | RECIPIENT)) == (CLASS_REQUEST | INTERFACE_RECIPIENT)) {
 80002ce:	4b08      	ldr	r3, [pc, #32]	; (80002f0 <usbNoDataSetup+0x24>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80002d8:	2b21      	cmp	r3, #33	; 0x21
 80002da:	d106      	bne.n	80002ea <usbNoDataSetup+0x1e>
        /* todo, keep track of the destination interface, often stored in wIndex */
        if (dfuUpdateByRequest()) {
 80002dc:	f000 fbf8 	bl	8000ad0 <dfuUpdateByRequest>
 80002e0:	2800      	cmp	r0, #0
            return USB_SUCCESS;
 80002e2:	bf0c      	ite	eq
 80002e4:	2002      	moveq	r0, #2
 80002e6:	2000      	movne	r0, #0
 80002e8:	bd08      	pop	{r3, pc}
        }
    }
    return USB_UNSUPPORT;
 80002ea:	2002      	movs	r0, #2
}
 80002ec:	bd08      	pop	{r3, pc}
 80002ee:	bf00      	nop
 80002f0:	20000200 	andcs	r0, r0, r0, lsl #4

080002f4 <setupUSB>:


extern u8 u8_usbConfigDescriptorDFU[];
extern u8 u8_usbFunctionalDescriptor[];

void setupUSB (void) {
 80002f4:	b537      	push	{r0, r1, r2, r4, r5, lr}

/* Generic boards don't have disconnect hardware, so we drive PA12 which is connected to the usb D+ line*/
#define USB_DISC_BANK         GPIOA
#define USB_DISC_PIN              12

    SET_REG(GPIO_CR(USB_DISC_BANK,USB_DISC_PIN),(GET_REG(GPIO_CR(USB_DISC_BANK,USB_DISC_PIN)) & crMask(USB_DISC_PIN)) | CR_OUTPUT_PP << CR_SHITF(USB_DISC_PIN));
 80002f6:	4c19      	ldr	r4, [pc, #100]	; (800035c <setupUSB+0x68>)
 80002f8:	200c      	movs	r0, #12
 80002fa:	6825      	ldr	r5, [r4, #0]
 80002fc:	f000 fb0e 	bl	800091c <crMask>
 8000300:	4028      	ands	r0, r5
 8000302:	f440 3580 	orr.w	r5, r0, #65536	; 0x10000
 8000306:	6025      	str	r5, [r4, #0]

    gpio_write_bit(USB_DISC_BANK,USB_DISC_PIN,0);  /* present ourselves to the host */
 8000308:	4815      	ldr	r0, [pc, #84]	; (8000360 <setupUSB+0x6c>)
 800030a:	210c      	movs	r1, #12
 800030c:	2200      	movs	r2, #0
 800030e:	f000 f97b 	bl	8000608 <gpio_write_bit>

    volatile unsigned int delay;
    for(delay = 0;delay<512;delay++);
 8000312:	2300      	movs	r3, #0
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	9b01      	ldr	r3, [sp, #4]
 8000318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800031c:	d202      	bcs.n	8000324 <setupUSB+0x30>
 800031e:	9b01      	ldr	r3, [sp, #4]
 8000320:	3301      	adds	r3, #1
 8000322:	e7f7      	b.n	8000314 <setupUSB+0x20>

    //  volatile unsigned x = 1024; do { ; }while(--x);// wait a moment
    /* turn on the USB clock */
    SET_REG(GPIO_CR(USB_DISC_BANK,USB_DISC_PIN),
 8000324:	200c      	movs	r0, #12
 8000326:	6825      	ldr	r5, [r4, #0]
 8000328:	f000 faf8 	bl	800091c <crMask>
 800032c:	4028      	ands	r0, r5
 800032e:	f440 2580 	orr.w	r5, r0, #262144	; 0x40000
 8000332:	6025      	str	r5, [r4, #0]
        (GET_REG(GPIO_CR(USB_DISC_BANK,USB_DISC_PIN)) & crMask(USB_DISC_PIN)) | CR_INPUT << CR_SHITF(USB_DISC_PIN)); //Sets the PA12 as floating input
    //  pRCC->APB1ENR |= RCC_APB1ENR_USB_CLK;
#endif
    /* initialize the usb application */

    wTransferSize=getFlashPageSize();
 8000334:	f000 fb04 	bl	8000940 <getFlashPageSize>
 8000338:	4b0a      	ldr	r3, [pc, #40]	; (8000364 <setupUSB+0x70>)
    u8_usbConfigDescriptorDFU[41]=(wTransferSize & 0x00FF);
 800033a:	b2c2      	uxtb	r2, r0
        (GET_REG(GPIO_CR(USB_DISC_BANK,USB_DISC_PIN)) & crMask(USB_DISC_PIN)) | CR_INPUT << CR_SHITF(USB_DISC_PIN)); //Sets the PA12 as floating input
    //  pRCC->APB1ENR |= RCC_APB1ENR_USB_CLK;
#endif
    /* initialize the usb application */

    wTransferSize=getFlashPageSize();
 800033c:	6018      	str	r0, [r3, #0]
    u8_usbConfigDescriptorDFU[41]=(wTransferSize & 0x00FF);
 800033e:	4b0a      	ldr	r3, [pc, #40]	; (8000368 <setupUSB+0x74>)
    u8_usbConfigDescriptorDFU[42]=(wTransferSize & 0xFF00)>>8;
 8000340:	f3c0 2007 	ubfx	r0, r0, #8, #8
    //  pRCC->APB1ENR |= RCC_APB1ENR_USB_CLK;
#endif
    /* initialize the usb application */

    wTransferSize=getFlashPageSize();
    u8_usbConfigDescriptorDFU[41]=(wTransferSize & 0x00FF);
 8000344:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    u8_usbConfigDescriptorDFU[42]=(wTransferSize & 0xFF00)>>8;
 8000348:	f883 002a 	strb.w	r0, [r3, #42]	; 0x2a

    u8_usbFunctionalDescriptor[5]=(wTransferSize & 0x00FF);
 800034c:	4b07      	ldr	r3, [pc, #28]	; (800036c <setupUSB+0x78>)
 800034e:	715a      	strb	r2, [r3, #5]
    u8_usbFunctionalDescriptor[6]=(wTransferSize & 0xFF00)>>8;
 8000350:	7198      	strb	r0, [r3, #6]

/* Function Definitions */
void usbAppInit(void) {
    /* hook in to usb_core, depends on all those damn
       non encapsulated externs! */
    USB_Init();
 8000352:	f000 fe11 	bl	8000f78 <USB_Init>
    u8_usbFunctionalDescriptor[5]=(wTransferSize & 0x00FF);
    u8_usbFunctionalDescriptor[6]=(wTransferSize & 0xFF00)>>8;

    usbAppInit();

}
 8000356:	b003      	add	sp, #12
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	bf00      	nop
 800035c:	40010804 	andmi	r0, r1, r4, lsl #16
 8000360:	40010800 	andmi	r0, r1, r0, lsl #16
 8000364:	200001c4 	andcs	r0, r0, r4, asr #3
 8000368:	200000ec 	andcs	r0, r0, ip, ror #1
 800036c:	2000011b 	andcs	r0, r0, fp, lsl r1

08000370 <usbSuspend>:
    USB_Init();
}

void usbSuspend(void) {
    u16 wCNTR;
    wCNTR = _GetCNTR();
 8000370:	4b04      	ldr	r3, [pc, #16]	; (8000384 <usbSuspend+0x14>)
 8000372:	681a      	ldr	r2, [r3, #0]
 8000374:	b292      	uxth	r2, r2
    wCNTR |= CNTR_FSUSP | CNTR_LPMODE;
    _SetCNTR(wCNTR);
 8000376:	f042 020c 	orr.w	r2, r2, #12
 800037a:	601a      	str	r2, [r3, #0]

    /* run any power reduction handlers */
    bDeviceState = SUSPENDED;
 800037c:	4b02      	ldr	r3, [pc, #8]	; (8000388 <usbSuspend+0x18>)
 800037e:	2203      	movs	r2, #3
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	4770      	bx	lr
 8000384:	40005c40 	andmi	r5, r0, r0, asr #24
 8000388:	2000020c 	andcs	r0, r0, ip, lsl #4

0800038c <usbResumeInit>:
void usbResumeInit(void) {
    u16 wCNTR;

    /* restart any clocks that had been stopped */

    wCNTR = _GetCNTR();
 800038c:	4b04      	ldr	r3, [pc, #16]	; (80003a0 <usbResumeInit+0x14>)
    wCNTR &= (~CNTR_LPMODE);
    _SetCNTR(wCNTR);
 800038e:	f64f 72fb 	movw	r2, #65531	; 0xfffb
void usbResumeInit(void) {
    u16 wCNTR;

    /* restart any clocks that had been stopped */

    wCNTR = _GetCNTR();
 8000392:	6819      	ldr	r1, [r3, #0]
    wCNTR &= (~CNTR_LPMODE);
    _SetCNTR(wCNTR);
 8000394:	400a      	ands	r2, r1
 8000396:	601a      	str	r2, [r3, #0]

    /* undo power reduction handlers here */

    _SetCNTR(ISR_MSK);
 8000398:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	4770      	bx	lr
 80003a0:	40005c40 	andmi	r5, r0, r0, asr #24

080003a4 <usbResume>:
}

void usbResume(RESUME_STATE eResumeSetVal) {
 80003a4:	b510      	push	{r4, lr}
 80003a6:	4c1e      	ldr	r4, [pc, #120]	; (8000420 <usbResume+0x7c>)
    u16 wCNTR;

    if (eResumeSetVal != RESUME_ESOF)
 80003a8:	2807      	cmp	r0, #7
        ResumeS.eState = eResumeSetVal;
 80003aa:	bf18      	it	ne
 80003ac:	7020      	strbne	r0, [r4, #0]

    switch (ResumeS.eState) {
 80003ae:	7823      	ldrb	r3, [r4, #0]
 80003b0:	2b05      	cmp	r3, #5
 80003b2:	d832      	bhi.n	800041a <usbResume+0x76>
 80003b4:	e8df f003 	tbb	[pc, r3]
 80003b8:	0e0a0603 	cfmadd32eq	mvax0, mvfx0, mvfx10, mvfx3
 80003bc:	f7ff2116 			; <UNDEFINED> instruction: 0xf7ff2116
    case RESUME_EXTERNAL:
        usbResumeInit();
 80003c0:	ffe5 e02a 	vaddl.u32	q15, d5, d26
        ResumeS.eState = RESUME_OFF;
        break;
    case RESUME_INTERNAL:
        usbResumeInit();
 80003c4:	f7ff ffe2 	bl	800038c <usbResumeInit>
        ResumeS.eState = RESUME_START;
 80003c8:	2304      	movs	r3, #4
 80003ca:	e027      	b.n	800041c <usbResume+0x78>
        break;
    case RESUME_LATER:
        ResumeS.bESOFcnt = 2;
 80003cc:	2302      	movs	r3, #2
 80003ce:	7063      	strb	r3, [r4, #1]
        ResumeS.eState = RESUME_WAIT;
 80003d0:	2303      	movs	r3, #3
 80003d2:	e023      	b.n	800041c <usbResume+0x78>
        break;
    case RESUME_WAIT:
        ResumeS.bESOFcnt--;
 80003d4:	7863      	ldrb	r3, [r4, #1]
 80003d6:	3b01      	subs	r3, #1
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	7063      	strb	r3, [r4, #1]
        if (ResumeS.bESOFcnt == 0)
 80003dc:	7863      	ldrb	r3, [r4, #1]
 80003de:	b9f3      	cbnz	r3, 800041e <usbResume+0x7a>
            ResumeS.eState = RESUME_START;
 80003e0:	2204      	movs	r2, #4
 80003e2:	e017      	b.n	8000414 <usbResume+0x70>
        break;
    case RESUME_START:
        wCNTR = _GetCNTR();
 80003e4:	4b0f      	ldr	r3, [pc, #60]	; (8000424 <usbResume+0x80>)
 80003e6:	681a      	ldr	r2, [r3, #0]
 80003e8:	b292      	uxth	r2, r2
        wCNTR |= CNTR_RESUME;
        _SetCNTR(wCNTR);
 80003ea:	f042 0210 	orr.w	r2, r2, #16
 80003ee:	601a      	str	r2, [r3, #0]
        ResumeS.eState = RESUME_ON;
 80003f0:	2305      	movs	r3, #5
 80003f2:	7023      	strb	r3, [r4, #0]
        ResumeS.bESOFcnt = 10;
 80003f4:	230a      	movs	r3, #10
 80003f6:	7063      	strb	r3, [r4, #1]
        break;
 80003f8:	bd10      	pop	{r4, pc}
    case RESUME_ON:
        ResumeS.bESOFcnt--;
 80003fa:	7863      	ldrb	r3, [r4, #1]
 80003fc:	3b01      	subs	r3, #1
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	7063      	strb	r3, [r4, #1]
        if (ResumeS.bESOFcnt == 0) {
 8000402:	7863      	ldrb	r3, [r4, #1]
 8000404:	b95b      	cbnz	r3, 800041e <usbResume+0x7a>
            wCNTR = _GetCNTR();
 8000406:	4a07      	ldr	r2, [pc, #28]	; (8000424 <usbResume+0x80>)
            wCNTR &= (~CNTR_RESUME);
            _SetCNTR(wCNTR);
 8000408:	f64f 73ef 	movw	r3, #65519	; 0xffef
        ResumeS.bESOFcnt = 10;
        break;
    case RESUME_ON:
        ResumeS.bESOFcnt--;
        if (ResumeS.bESOFcnt == 0) {
            wCNTR = _GetCNTR();
 800040c:	6811      	ldr	r1, [r2, #0]
            wCNTR &= (~CNTR_RESUME);
            _SetCNTR(wCNTR);
 800040e:	400b      	ands	r3, r1
 8000410:	6013      	str	r3, [r2, #0]
            ResumeS.eState = RESUME_OFF;
 8000412:	2206      	movs	r2, #6
 8000414:	4b02      	ldr	r3, [pc, #8]	; (8000420 <usbResume+0x7c>)
 8000416:	701a      	strb	r2, [r3, #0]
 8000418:	bd10      	pop	{r4, pc}
        }
        break;
    case RESUME_OFF:
    case RESUME_ESOF:
    default:
        ResumeS.eState = RESUME_OFF;
 800041a:	2306      	movs	r3, #6
 800041c:	7023      	strb	r3, [r4, #0]
 800041e:	bd10      	pop	{r4, pc}
 8000420:	200001ca 	andcs	r0, r0, sl, asr #3
 8000424:	40005c40 	andmi	r5, r0, r0, asr #24

08000428 <usbPowerOn>:

RESULT usbPowerOn(void) {
    u16 wRegVal;

    wRegVal = CNTR_FRES;
    _SetCNTR(wRegVal);
 8000428:	4b06      	ldr	r3, [pc, #24]	; (8000444 <usbPowerOn+0x1c>)
 800042a:	2201      	movs	r2, #1
 800042c:	601a      	str	r2, [r3, #0]

    wInterrupt_Mask = 0;
    _SetCNTR(wInterrupt_Mask);
    _SetISTR(0);
 800042e:	4a06      	ldr	r2, [pc, #24]	; (8000448 <usbPowerOn+0x20>)

    wRegVal = CNTR_FRES;
    _SetCNTR(wRegVal);

    wInterrupt_Mask = 0;
    _SetCNTR(wInterrupt_Mask);
 8000430:	2000      	movs	r0, #0
    _SetISTR(0);
    wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM; /* the bare minimum */
 8000432:	4906      	ldr	r1, [pc, #24]	; (800044c <usbPowerOn+0x24>)

    wRegVal = CNTR_FRES;
    _SetCNTR(wRegVal);

    wInterrupt_Mask = 0;
    _SetCNTR(wInterrupt_Mask);
 8000434:	6018      	str	r0, [r3, #0]
    _SetISTR(0);
 8000436:	6010      	str	r0, [r2, #0]
    wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM; /* the bare minimum */
 8000438:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800043c:	800a      	strh	r2, [r1, #0]
    _SetCNTR(wInterrupt_Mask);
 800043e:	601a      	str	r2, [r3, #0]

    return USB_SUCCESS;
}
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
 8000444:	40005c40 	andmi	r5, r0, r0, asr #24
 8000448:	40005c44 	andmi	r5, r0, r4, asr #24
 800044c:	20000204 	andcs	r0, r0, r4, lsl #4

08000450 <usbPowerOff>:

RESULT usbPowerOff(void) {
    _SetCNTR(CNTR_FRES);
 8000450:	4b04      	ldr	r3, [pc, #16]	; (8000464 <usbPowerOff+0x14>)
 8000452:	2201      	movs	r2, #1
 8000454:	601a      	str	r2, [r3, #0]
    _SetISTR(0);
 8000456:	4a04      	ldr	r2, [pc, #16]	; (8000468 <usbPowerOff+0x18>)
 8000458:	2000      	movs	r0, #0
 800045a:	6010      	str	r0, [r2, #0]
    _SetCNTR(CNTR_FRES + CNTR_PDWN);
 800045c:	2203      	movs	r2, #3
 800045e:	601a      	str	r2, [r3, #0]
       usb peripheral. we have no disabled the clocks,
       pulled the USB_DISC_PIN pin back up, or reset the
       application state machines */

    return USB_SUCCESS;
}
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	40005c40 	andmi	r5, r0, r0, asr #24
 8000468:	40005c44 	andmi	r5, r0, r4, asr #24

0800046c <usbDsbBus>:



void usbDsbBus(void) {
// setPin(USB_DISC_BANK,USB_DISC_PIN);
usbPowerOff();
 800046c:	f7ff bff0 	b.w	8000450 <usbPowerOff>

08000470 <usbEnbISR>:
    bDeviceState = ADDRESSED;
}
/***** end of USER STANDARD REQUESTS *****/


void usbEnbISR(void) {
 8000470:	b507      	push	{r0, r1, r2, lr}
    NVIC_InitTypeDef NVIC_InitStructure;


    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQ;
 8000472:	2314      	movs	r3, #20
 8000474:	f88d 3004 	strb.w	r3, [sp, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000478:	2300      	movs	r3, #0
 800047a:	f88d 3005 	strb.w	r3, [sp, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 800047e:	f88d 3006 	strb.w	r3, [sp, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = TRUE;
    nvicInit(&NVIC_InitStructure);
 8000482:	a801      	add	r0, sp, #4


    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQ;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelCmd = TRUE;
 8000484:	2301      	movs	r3, #1
 8000486:	f88d 3007 	strb.w	r3, [sp, #7]
    nvicInit(&NVIC_InitStructure);
 800048a:	f000 f98f 	bl	80007ac <nvicInit>
}
 800048e:	b003      	add	sp, #12
 8000490:	f85d fb04 	ldr.w	pc, [sp], #4

08000494 <usbInit>:
       application state machines */

    return USB_SUCCESS;
}

void usbInit(void) {
 8000494:	b510      	push	{r4, lr}
    dfuInit();
 8000496:	f000 fa5f 	bl	8000958 <dfuInit>

    pInformation->Current_Configuration = 0;
 800049a:	4b09      	ldr	r3, [pc, #36]	; (80004c0 <usbInit+0x2c>)
 800049c:	2400      	movs	r4, #0
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	729c      	strb	r4, [r3, #10]
    usbPowerOn();
 80004a2:	f7ff ffc1 	bl	8000428 <usbPowerOn>

    _SetISTR(0);
 80004a6:	4b07      	ldr	r3, [pc, #28]	; (80004c4 <usbInit+0x30>)
    wInterrupt_Mask = ISR_MSK;
 80004a8:	4a07      	ldr	r2, [pc, #28]	; (80004c8 <usbInit+0x34>)
    dfuInit();

    pInformation->Current_Configuration = 0;
    usbPowerOn();

    _SetISTR(0);
 80004aa:	601c      	str	r4, [r3, #0]
    wInterrupt_Mask = ISR_MSK;
 80004ac:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80004b0:	8013      	strh	r3, [r2, #0]
    _SetCNTR(wInterrupt_Mask);
 80004b2:	4a06      	ldr	r2, [pc, #24]	; (80004cc <usbInit+0x38>)
 80004b4:	6013      	str	r3, [r2, #0]

    usbEnbISR(); /* configure the cortex M3 private peripheral NVIC */
 80004b6:	f7ff ffdb 	bl	8000470 <usbEnbISR>
    bDeviceState = UNCONNECTED;
 80004ba:	4b05      	ldr	r3, [pc, #20]	; (80004d0 <usbInit+0x3c>)
 80004bc:	601c      	str	r4, [r3, #0]
 80004be:	bd10      	pop	{r4, pc}
 80004c0:	20000200 	andcs	r0, r0, r0, lsl #4
 80004c4:	40005c44 	andmi	r5, r0, r4, asr #24
 80004c8:	20000204 	andcs	r0, r0, r4, lsl #4
 80004cc:	40005c40 	andmi	r5, r0, r0, asr #24
 80004d0:	2000020c 	andcs	r0, r0, ip, lsl #4

080004d4 <usbDsbISR>:
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelCmd = TRUE;
    nvicInit(&NVIC_InitStructure);
}

void usbDsbISR(void) {
 80004d4:	b507      	push	{r0, r1, r2, lr}
    NVIC_InitTypeDef NVIC_InitStructure;
    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQ;
 80004d6:	2314      	movs	r3, #20
 80004d8:	f88d 3004 	strb.w	r3, [sp, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelCmd = FALSE;
    nvicInit(&NVIC_InitStructure);
 80004dc:	a801      	add	r0, sp, #4
}

void usbDsbISR(void) {
    NVIC_InitTypeDef NVIC_InitStructure;
    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQ;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80004de:	2300      	movs	r3, #0
 80004e0:	f88d 3005 	strb.w	r3, [sp, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80004e4:	f88d 3006 	strb.w	r3, [sp, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = FALSE;
 80004e8:	f88d 3007 	strb.w	r3, [sp, #7]
    nvicInit(&NVIC_InitStructure);
 80004ec:	f000 f95e 	bl	80007ac <nvicInit>
}
 80004f0:	b003      	add	sp, #12
 80004f2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080004f8 <USB_LP_CAN1_RX0_IRQHandler>:

void USB_LP_CAN1_RX0_IRQHandler(void) {
 80004f8:	b570      	push	{r4, r5, r6, lr}
    wIstr = _GetISTR();
 80004fa:	4d27      	ldr	r5, [pc, #156]	; (8000598 <USB_LP_CAN1_RX0_IRQHandler+0xa0>)
 80004fc:	4c27      	ldr	r4, [pc, #156]	; (800059c <USB_LP_CAN1_RX0_IRQHandler+0xa4>)
 80004fe:	682b      	ldr	r3, [r5, #0]

    /* go nuts with the preproc switches since this is an ISTR and must be FAST */
#if (ISR_MSK & ISTR_RESET)
    if (wIstr & ISTR_RESET & wInterrupt_Mask) {
 8000500:	4e27      	ldr	r6, [pc, #156]	; (80005a0 <USB_LP_CAN1_RX0_IRQHandler+0xa8>)
    NVIC_InitStructure.NVIC_IRQChannelCmd = FALSE;
    nvicInit(&NVIC_InitStructure);
}

void USB_LP_CAN1_RX0_IRQHandler(void) {
    wIstr = _GetISTR();
 8000502:	b29b      	uxth	r3, r3
 8000504:	8023      	strh	r3, [r4, #0]

    /* go nuts with the preproc switches since this is an ISTR and must be FAST */
#if (ISR_MSK & ISTR_RESET)
    if (wIstr & ISTR_RESET & wInterrupt_Mask) {
 8000506:	8822      	ldrh	r2, [r4, #0]
 8000508:	8833      	ldrh	r3, [r6, #0]
 800050a:	4013      	ands	r3, r2
 800050c:	0559      	lsls	r1, r3, #21
 800050e:	d505      	bpl.n	800051c <USB_LP_CAN1_RX0_IRQHandler+0x24>
        _SetISTR((u16)CLR_RESET);
 8000510:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 8000514:	602b      	str	r3, [r5, #0]
        Device_Property.Reset();
 8000516:	4b23      	ldr	r3, [pc, #140]	; (80005a4 <USB_LP_CAN1_RX0_IRQHandler+0xac>)
 8000518:	685b      	ldr	r3, [r3, #4]
 800051a:	4798      	blx	r3
    }
#endif


#if (ISR_MSK & ISTR_ERR)
    if (wIstr & ISTR_ERR & wInterrupt_Mask) {
 800051c:	8822      	ldrh	r2, [r4, #0]
 800051e:	8833      	ldrh	r3, [r6, #0]
 8000520:	401a      	ands	r2, r3
 8000522:	0492      	lsls	r2, r2, #18
        _SetISTR((u16)CLR_ERR);
 8000524:	bf44      	itt	mi
 8000526:	f64d 72ff 	movwmi	r2, #57343	; 0xdfff
 800052a:	602a      	strmi	r2, [r5, #0]
    }
#endif


#if (ISR_MSK & ISTR_WKUP)
    if (wIstr & ISTR_WKUP & wInterrupt_Mask) {
 800052c:	8822      	ldrh	r2, [r4, #0]
 800052e:	4013      	ands	r3, r2
 8000530:	04db      	lsls	r3, r3, #19
 8000532:	d505      	bpl.n	8000540 <USB_LP_CAN1_RX0_IRQHandler+0x48>
        _SetISTR((u16)CLR_WKUP);
 8000534:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000538:	602b      	str	r3, [r5, #0]
        usbResume(RESUME_EXTERNAL);
 800053a:	2000      	movs	r0, #0
 800053c:	f7ff ff32 	bl	80003a4 <usbResume>
    }
#endif

    /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (ISR_MSK & ISTR_SUSP)
    if (wIstr & ISTR_SUSP & wInterrupt_Mask) {
 8000540:	8822      	ldrh	r2, [r4, #0]
 8000542:	8833      	ldrh	r3, [r6, #0]
 8000544:	4013      	ands	r3, r2
 8000546:	0518      	lsls	r0, r3, #20
 8000548:	d504      	bpl.n	8000554 <USB_LP_CAN1_RX0_IRQHandler+0x5c>

        /* check if SUSPEND is possible */
        if (F_SUSPEND_ENABLED) {
            usbSuspend();
 800054a:	f7ff ff11 	bl	8000370 <usbSuspend>
        } else {
            /* if not possible then resume after xx ms */
            usbResume(RESUME_LATER);
        }
        /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
        _SetISTR((u16)CLR_SUSP);
 800054e:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8000552:	602b      	str	r3, [r5, #0]
    }
#endif


#if (ISR_MSK & ISTR_SOF)
    if (wIstr & ISTR_SOF & wInterrupt_Mask) {
 8000554:	8822      	ldrh	r2, [r4, #0]
 8000556:	8833      	ldrh	r3, [r6, #0]
 8000558:	401a      	ands	r2, r3
 800055a:	0591      	lsls	r1, r2, #22
 800055c:	d507      	bpl.n	800056e <USB_LP_CAN1_RX0_IRQHandler+0x76>
        _SetISTR((u16)CLR_SOF);
 800055e:	f64f 52ff 	movw	r2, #65023	; 0xfdff
 8000562:	602a      	str	r2, [r5, #0]
        bIntPackSOF++;
 8000564:	4a10      	ldr	r2, [pc, #64]	; (80005a8 <USB_LP_CAN1_RX0_IRQHandler+0xb0>)
 8000566:	7811      	ldrb	r1, [r2, #0]
 8000568:	3101      	adds	r1, #1
 800056a:	b2c9      	uxtb	r1, r1
 800056c:	7011      	strb	r1, [r2, #0]
    }
#endif


#if (ISR_MSK & ISTR_ESOF)
    if (wIstr & ISTR_ESOF & wInterrupt_Mask) {
 800056e:	8822      	ldrh	r2, [r4, #0]
 8000570:	4013      	ands	r3, r2
 8000572:	05da      	lsls	r2, r3, #23
 8000574:	d505      	bpl.n	8000582 <USB_LP_CAN1_RX0_IRQHandler+0x8a>
        _SetISTR((u16)CLR_ESOF);
 8000576:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800057a:	602b      	str	r3, [r5, #0]
        /* resume handling timing is made with ESOFs */
        usbResume(RESUME_ESOF); /* request without change of the machine state */
 800057c:	2007      	movs	r0, #7
 800057e:	f7ff ff11 	bl	80003a4 <usbResume>
    }
#endif

    /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (ISR_MSK & ISTR_CTR)
    if (wIstr & ISTR_CTR & wInterrupt_Mask) {
 8000582:	8822      	ldrh	r2, [r4, #0]
 8000584:	8833      	ldrh	r3, [r6, #0]
 8000586:	4013      	ands	r3, r2
 8000588:	041b      	lsls	r3, r3, #16
 800058a:	d503      	bpl.n	8000594 <USB_LP_CAN1_RX0_IRQHandler+0x9c>
        /* clear of the CTR flag into the sub */
        CTR_LP(); /* low priority ISR defined in the usb core lib */
    }
#endif

}
 800058c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (ISR_MSK & ISTR_CTR)
    if (wIstr & ISTR_CTR & wInterrupt_Mask) {
        /* servicing of the endpoint correct transfer interrupt */
        /* clear of the CTR flag into the sub */
        CTR_LP(); /* low priority ISR defined in the usb core lib */
 8000590:	f000 bc48 	b.w	8000e24 <CTR_LP>
 8000594:	bd70      	pop	{r4, r5, r6, pc}
 8000596:	bf00      	nop
 8000598:	40005c44 	andmi	r5, r0, r4, asr #24
 800059c:	200001c8 	andcs	r0, r0, r8, asr #3
 80005a0:	20000204 	andcs	r0, r0, r4, lsl #4
 80005a4:	20000000 	andcs	r0, r0, r0
 80005a8:	20000208 	andcs	r0, r0, r8, lsl #4

080005ac <main>:
#include "matrix.h"

extern volatile dfuUploadTypes_t userUploadType;

int main()
{
 80005ac:	b508      	push	{r3, lr}
  bool no_user_jump = FALSE;
  bool dont_wait = FALSE;

  systemReset(); // peripherals but not PC
 80005ae:	f000 f83f 	bl	8000630 <systemReset>
  setupCLK();
 80005b2:	f000 f861 	bl	8000678 <setupCLK>
  setupLEDAndButton();
 80005b6:	f000 f88f 	bl	80006d8 <setupLEDAndButton>
  setupUSB();
 80005ba:	f7ff fe9b 	bl	80002f4 <setupUSB>
  setupFLASH();
 80005be:	f000 f897 	bl	80006f0 <setupFLASH>

  switch(checkAndClearBootloaderFlag())
 80005c2:	f000 f8cf 	bl	8000764 <checkAndClearBootloaderFlag>
 80005c6:	2801      	cmp	r0, #1
 80005c8:	d008      	beq.n	80005dc <main+0x30>
 80005ca:	2802      	cmp	r0, #2
 80005cc:	d00d      	beq.n	80005ea <main+0x3e>

    #ifdef FASTBOOT
    dont_wait = TRUE;
    #endif

    if (!checkUserCode(USER_CODE_FLASH) || readButtonState())
 80005ce:	480d      	ldr	r0, [pc, #52]	; (8000604 <main+0x58>)
 80005d0:	f000 f89c 	bl	800070c <checkUserCode>
 80005d4:	b110      	cbz	r0, 80005dc <main+0x30>
 80005d6:	f000 f823 	bl	8000620 <readButtonState>
 80005da:	b130      	cbz	r0, 80005ea <main+0x3e>
  {
    int delay_count = 0;

    while ((delay_count++ < BOOTLOADER_WAIT) || no_user_jump)
    {
      if (dfuUploadStarted())
 80005dc:	f000 fb7e 	bl	8000cdc <dfuUploadStarted>
 80005e0:	2800      	cmp	r0, #0
 80005e2:	d0fb      	beq.n	80005dc <main+0x30>
      {
        dfuFinishUpload(); // systemHardReset from DFU once done
 80005e4:	f000 fb80 	bl	8000ce8 <dfuFinishUpload>
 80005e8:	e7f8      	b.n	80005dc <main+0x30>
      //   break;
      // }
    }
  }

  if (checkUserCode(USER_CODE_FLASH))
 80005ea:	4806      	ldr	r0, [pc, #24]	; (8000604 <main+0x58>)
 80005ec:	f000 f88e 	bl	800070c <checkUserCode>
 80005f0:	b118      	cbz	r0, 80005fa <main+0x4e>
  {
    jumpToUser(USER_CODE_FLASH);
 80005f2:	4804      	ldr	r0, [pc, #16]	; (8000604 <main+0x58>)
 80005f4:	f000 f922 	bl	800083c <jumpToUser>
 80005f8:	e001      	b.n	80005fe <main+0x52>
  }
  else
  {
    // Nothing to execute in either Flash or RAM

    systemHardReset();
 80005fa:	f000 f933 	bl	8000864 <systemHardReset>
  }
  
  return 0;// Added to please the compiler
}
 80005fe:	2000      	movs	r0, #0
 8000600:	bd08      	pop	{r3, pc}
 8000602:	bf00      	nop
 8000604:	08002000 	stmdaeq	r0, {sp}

08000608 <gpio_write_bit>:
    SET_REG(GPIO_BSRR(bank), pinMask);
}
*/
void gpio_write_bit(u32 bank, u8 pin, u8 val) {
    val = !val;          // "set" bits are lower than "reset" bits
    SET_REG(GPIO_BSRR(bank), (1U << pin) << (16 * val));
 8000608:	2301      	movs	r3, #1
 800060a:	fa03 f101 	lsl.w	r1, r3, r1
    u32 pinMask = 0x1 << (16 + pin);
    SET_REG(GPIO_BSRR(bank), pinMask);
}
*/
void gpio_write_bit(u32 bank, u8 pin, u8 val) {
    val = !val;          // "set" bits are lower than "reset" bits
 800060e:	f1d2 0201 	rsbs	r2, r2, #1
 8000612:	bf38      	it	cc
 8000614:	2200      	movcc	r2, #0
    SET_REG(GPIO_BSRR(bank), (1U << pin) << (16 * val));
 8000616:	0113      	lsls	r3, r2, #4
 8000618:	4099      	lsls	r1, r3
 800061a:	6101      	str	r1, [r0, #16]
 800061c:	4770      	bx	lr
	...

08000620 <readButtonState>:

bool readButtonState() {
    // todo, implement read
    bool state=FALSE;
#if defined(BUTTON_BANK) && defined (BUTTON_PIN) && defined (BUTTON_PRESSED_STATE)
    if (GET_REG(GPIO_IDR(BUTTON_BANK)) & (0x01 << BUTTON_PIN))
 8000620:	4b02      	ldr	r3, [pc, #8]	; (800062c <readButtonState+0xc>)
 8000622:	6818      	ldr	r0, [r3, #0]
    {
        state=!state;
    }
#endif
    return state;
}
 8000624:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	40010c08 	andmi	r0, r1, r8, lsl #24

08000630 <systemReset>:
        gpio_write_bit( bank,pin,1-onState);
    }
}

void systemReset(void) {
    SET_REG(RCC_CR, GET_REG(RCC_CR)     | 0x00000001);
 8000630:	4b0d      	ldr	r3, [pc, #52]	; (8000668 <systemReset+0x38>)
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xF8FF0000);
 8000632:	490e      	ldr	r1, [pc, #56]	; (800066c <systemReset+0x3c>)
        gpio_write_bit( bank,pin,1-onState);
    }
}

void systemReset(void) {
    SET_REG(RCC_CR, GET_REG(RCC_CR)     | 0x00000001);
 8000634:	681a      	ldr	r2, [r3, #0]
 8000636:	f042 0201 	orr.w	r2, r2, #1
 800063a:	601a      	str	r2, [r3, #0]
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xF8FF0000);
 800063c:	4a0c      	ldr	r2, [pc, #48]	; (8000670 <systemReset+0x40>)
 800063e:	6810      	ldr	r0, [r2, #0]
 8000640:	4001      	ands	r1, r0
 8000642:	6011      	str	r1, [r2, #0]
    SET_REG(RCC_CR, GET_REG(RCC_CR)     & 0xFEF6FFFF);
 8000644:	6819      	ldr	r1, [r3, #0]
 8000646:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 800064a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800064e:	6019      	str	r1, [r3, #0]
    SET_REG(RCC_CR, GET_REG(RCC_CR)     & 0xFFFBFFFF);
 8000650:	6819      	ldr	r1, [r3, #0]
 8000652:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8000656:	6019      	str	r1, [r3, #0]
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xFF80FFFF);
 8000658:	6813      	ldr	r3, [r2, #0]
 800065a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800065e:	6013      	str	r3, [r2, #0]

    SET_REG(RCC_CIR, 0x00000000);  /* disable all RCC interrupts */
 8000660:	4b04      	ldr	r3, [pc, #16]	; (8000674 <systemReset+0x44>)
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	4770      	bx	lr
 8000668:	40021000 	andmi	r1, r2, r0
 800066c:	f8ff0000 			; <UNDEFINED> instruction: 0xf8ff0000
 8000670:	40021004 	andmi	r1, r2, r4
 8000674:	40021008 	andmi	r1, r2, r8

08000678 <setupCLK>:
}

void setupCLK(void) {
    unsigned int StartUpCounter=0;
    /* enable HSE */
    SET_REG(RCC_CR, GET_REG(RCC_CR) | 0x00010001);
 8000678:	4b15      	ldr	r3, [pc, #84]	; (80006d0 <setupCLK+0x58>)
 800067a:	681a      	ldr	r2, [r3, #0]
 800067c:	f042 1201 	orr.w	r2, r2, #65537	; 0x10001
 8000680:	601a      	str	r2, [r3, #0]
    while ((GET_REG(RCC_CR) & 0x00020000) == 0); /* for it to come on */
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	4812      	ldr	r0, [pc, #72]	; (80006d0 <setupCLK+0x58>)
 8000686:	0392      	lsls	r2, r2, #14
 8000688:	d5fb      	bpl.n	8000682 <setupCLK+0xa>

    /* enable flash prefetch buffer */
    SET_REG(FLASH_ACR, 0x00000012);
 800068a:	4a12      	ldr	r2, [pc, #72]	; (80006d4 <setupCLK+0x5c>)
 800068c:	2112      	movs	r1, #18
 800068e:	6011      	str	r1, [r2, #0]

    /* Configure PLL */
#ifdef XTAL12M
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) | 0x00110400); /* pll=72Mhz(x6),APB1=36Mhz,AHB=72Mhz */
#else
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) | 0x001D0400); /* pll=72Mhz(x9),APB1=36Mhz,AHB=72Mhz */
 8000690:	f6a2 72fc 	subw	r2, r2, #4092	; 0xffc
 8000694:	6811      	ldr	r1, [r2, #0]
 8000696:	f441 11e8 	orr.w	r1, r1, #1900544	; 0x1d0000
 800069a:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800069e:	6011      	str	r1, [r2, #0]
#endif

    SET_REG(RCC_CR, GET_REG(RCC_CR)     | 0x01000000); /* enable the pll */
 80006a0:	6801      	ldr	r1, [r0, #0]
 80006a2:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 80006a6:	6001      	str	r1, [r0, #0]

#if !defined  (HSE_STARTUP_TIMEOUT)
#define HSE_STARTUP_TIMEOUT    ((unsigned int)0x0500)   /*!< Time out for HSE start up */
#endif /* HSE_STARTUP_TIMEOUT */

    while ((GET_REG(RCC_CR) & 0x03000000) == 0 && StartUpCounter < HSE_STARTUP_TIMEOUT)
 80006a8:	6819      	ldr	r1, [r3, #0]
 80006aa:	f011 7f40 	tst.w	r1, #50331648	; 0x3000000
 80006ae:	d0fb      	beq.n	80006a8 <setupCLK+0x30>
        // HSE has not started. Try restarting the processor
        systemHardReset();
    }

    /* Set SYSCLK as PLL */
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) | 0x00000002);
 80006b0:	6811      	ldr	r1, [r2, #0]
 80006b2:	f041 0102 	orr.w	r1, r1, #2
 80006b6:	6011      	str	r1, [r2, #0]
    while ((GET_REG(RCC_CFGR) & 0x00000008) == 0); /* wait for it to come on */
 80006b8:	6811      	ldr	r1, [r2, #0]
 80006ba:	0709      	lsls	r1, r1, #28
 80006bc:	d5fc      	bpl.n	80006b8 <setupCLK+0x40>

    pRCC->APB2ENR |= 0B111111100;// Enable All GPIO channels (A to G)
 80006be:	699a      	ldr	r2, [r3, #24]
 80006c0:	f442 72fe 	orr.w	r2, r2, #508	; 0x1fc
 80006c4:	619a      	str	r2, [r3, #24]
    pRCC->APB1ENR |= RCC_APB1ENR_USB_CLK;
 80006c6:	69da      	ldr	r2, [r3, #28]
 80006c8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80006cc:	61da      	str	r2, [r3, #28]
 80006ce:	4770      	bx	lr
 80006d0:	40021000 	andmi	r1, r2, r0
 80006d4:	40022000 	andmi	r2, r2, r0

080006d8 <setupLEDAndButton>:

void setupLEDAndButton (void) {
    // SET_REG(AFIO_MAPR,(GET_REG(AFIO_MAPR) & ~AFIO_MAPR_SWJ_CFG) | AFIO_MAPR_SWJ_CFG_NO_JTAG_NO_SW);// Try to disable SWD AND JTAG so we can use those pins (not sure if this works).

#if defined(BUTTON_BANK) && defined (BUTTON_PIN) && defined (BUTTON_PRESSED_STATE)
    SET_REG(GPIO_CR(BUTTON_BANK,BUTTON_PIN),(GPIO_CR(BUTTON_BANK,BUTTON_PIN) & crMask(BUTTON_PIN)) | BUTTON_INPUT_MODE << CR_SHITF(BUTTON_PIN));
 80006d8:	4a03      	ldr	r2, [pc, #12]	; (80006e8 <setupLEDAndButton+0x10>)
 80006da:	4b04      	ldr	r3, [pc, #16]	; (80006ec <setupLEDAndButton+0x14>)
 80006dc:	601a      	str	r2, [r3, #0]
    SET_REG(GPIO_BSRR(bank), pinMask);
}
*/
void gpio_write_bit(u32 bank, u8 pin, u8 val) {
    val = !val;          // "set" bits are lower than "reset" bits
    SET_REG(GPIO_BSRR(bank), (1U << pin) << (16 * val));
 80006de:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80006e2:	611a      	str	r2, [r3, #16]
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	80010c00 	andhi	r0, r1, r0, lsl #24
 80006ec:	40010c00 	andmi	r0, r1, r0, lsl #24

080006f0 <setupFLASH>:
  #endif
}

void setupFLASH() {
    /* configure the HSI oscillator */
    if ((pRCC->CR & 0x01) == 0x00) {
 80006f0:	4b05      	ldr	r3, [pc, #20]	; (8000708 <setupFLASH+0x18>)
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	07d1      	lsls	r1, r2, #31
 80006f6:	d403      	bmi.n	8000700 <setupFLASH+0x10>
        u32 rwmVal = pRCC->CR;
 80006f8:	681a      	ldr	r2, [r3, #0]
        rwmVal |= 0x01;
 80006fa:	f042 0201 	orr.w	r2, r2, #1
        pRCC->CR = rwmVal;
 80006fe:	601a      	str	r2, [r3, #0]
    }

    /* wait for it to come on */
    while ((pRCC->CR & 0x02) == 0x00) {}
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	0792      	lsls	r2, r2, #30
 8000704:	d5fc      	bpl.n	8000700 <setupFLASH+0x10>
}
 8000706:	4770      	bx	lr
 8000708:	40021000 	andmi	r1, r2, r0

0800070c <checkUserCode>:


bool checkUserCode(u32 usrAddr) {
    u32 sp = *(vu32 *) usrAddr;
 800070c:	6803      	ldr	r3, [r0, #0]

    if ((sp & 0x2FFE0000) == 0x20000000) {
 800070e:	4803      	ldr	r0, [pc, #12]	; (800071c <checkUserCode+0x10>)
 8000710:	4018      	ands	r0, r3
        return (TRUE);
    } else {
        return (FALSE);
    }
}
 8000712:	f1b0 5300 	subs.w	r3, r0, #536870912	; 0x20000000
 8000716:	4258      	negs	r0, r3
 8000718:	4158      	adcs	r0, r3
 800071a:	4770      	bx	lr
 800071c:	2ffe0000 	svccs	0x00fe0000

08000720 <setMspAndJump>:
    typedef void (*funcPtr)(void);
    u32 jumpAddr = *(vu32 *)(usrAddr + 0x04); /* reset ptr in vector table */

    funcPtr usrMain = (funcPtr) jumpAddr;

    SET_REG(SCB_VTOR, (vu32) (usrAddr));
 8000720:	4a04      	ldr	r2, [pc, #16]	; (8000734 <setMspAndJump+0x14>)
    } else {
        return (FALSE);
    }
}

void setMspAndJump(u32 usrAddr) {
 8000722:	b508      	push	{r3, lr}
    // Dedicated function with no call to any function (appart the last call)
    // This way, there is no manipulation of the stack here, ensuring that GGC
    // didn't insert any pop from the SP after having set the MSP.
    typedef void (*funcPtr)(void);
    u32 jumpAddr = *(vu32 *)(usrAddr + 0x04); /* reset ptr in vector table */
 8000724:	6843      	ldr	r3, [r0, #4]

    funcPtr usrMain = (funcPtr) jumpAddr;

    SET_REG(SCB_VTOR, (vu32) (usrAddr));
 8000726:	6010      	str	r0, [r2, #0]

    asm volatile("msr msp, %0"::"g"(*(volatile u32 *)usrAddr));
 8000728:	6802      	ldr	r2, [r0, #0]
 800072a:	f382 8808 	msr	MSP, r2

    usrMain();                                /* go! */
 800072e:	4798      	blx	r3
 8000730:	bd08      	pop	{r3, pc}
 8000732:	bf00      	nop
 8000734:	e000ed08 	and	lr, r0, r8, lsl #26

08000738 <bkp10Write>:
}

void bkp10Write(u16 value)
{
        // Enable clocks for the backup domain registers
        pRCC->APB1ENR |= (RCC_APB1ENR_PWR_CLK | RCC_APB1ENR_BKP_CLK);
 8000738:	4b08      	ldr	r3, [pc, #32]	; (800075c <bkp10Write+0x24>)
 800073a:	69da      	ldr	r2, [r3, #28]
 800073c:	f042 52c0 	orr.w	r2, r2, #402653184	; 0x18000000
 8000740:	61da      	str	r2, [r3, #28]
        //pRCC->APB1ENR = 0;

        // Disable backup register write protection
        pPWR->CR |= PWR_CR_DBP;
 8000742:	f5a3 33d0 	sub.w	r3, r3, #106496	; 0x1a000
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800074c:	601a      	str	r2, [r3, #0]
        //pPWR->CR |= (1 << 8)

        // store value in pBK DR10
        pBKP->DR10 = value;
 800074e:	4a04      	ldr	r2, [pc, #16]	; (8000760 <bkp10Write+0x28>)
 8000750:	8510      	strh	r0, [r2, #40]	; 0x28

        // Re-enable backup register write protection
        pPWR->CR &=~ PWR_CR_DBP;
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	4770      	bx	lr
 800075c:	40021000 	andmi	r1, r2, r0
 8000760:	40006c00 	andmi	r6, r0, r0, lsl #24

08000764 <checkAndClearBootloaderFlag>:
        //pPWR->CR &=~ (1 << 8)
}

int checkAndClearBootloaderFlag()
{
 8000764:	b538      	push	{r3, r4, r5, lr}
    bool flagSet = 0x00;// Flag not used

    // Enable clocks for the backup domain registers
    pRCC->APB1ENR |= (RCC_APB1ENR_PWR_CLK | RCC_APB1ENR_BKP_CLK);
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <checkAndClearBootloaderFlag+0x40>)

    switch (pBKP->DR10)
 8000768:	f244 214c 	movw	r1, #16972	; 0x424c
int checkAndClearBootloaderFlag()
{
    bool flagSet = 0x00;// Flag not used

    // Enable clocks for the backup domain registers
    pRCC->APB1ENR |= (RCC_APB1ENR_PWR_CLK | RCC_APB1ENR_BKP_CLK);
 800076c:	69da      	ldr	r2, [r3, #28]
 800076e:	461d      	mov	r5, r3
 8000770:	f042 52c0 	orr.w	r2, r2, #402653184	; 0x18000000
 8000774:	61da      	str	r2, [r3, #28]

    switch (pBKP->DR10)
 8000776:	4a0c      	ldr	r2, [pc, #48]	; (80007a8 <checkAndClearBootloaderFlag+0x44>)
 8000778:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800077a:	b292      	uxth	r2, r2
 800077c:	428a      	cmp	r2, r1
 800077e:	d005      	beq.n	800078c <checkAndClearBootloaderFlag+0x28>
 8000780:	f244 234d 	movw	r3, #16973	; 0x424d
 8000784:	429a      	cmp	r2, r3
 8000786:	d003      	beq.n	8000790 <checkAndClearBootloaderFlag+0x2c>
        //pPWR->CR &=~ (1 << 8)
}

int checkAndClearBootloaderFlag()
{
    bool flagSet = 0x00;// Flag not used
 8000788:	2400      	movs	r4, #0
 800078a:	e009      	b.n	80007a0 <checkAndClearBootloaderFlag+0x3c>
    pRCC->APB1ENR |= (RCC_APB1ENR_PWR_CLK | RCC_APB1ENR_BKP_CLK);

    switch (pBKP->DR10)
    {
        case RTC_BOOTLOADER_FLAG:
            flagSet = 0x01;
 800078c:	2401      	movs	r4, #1
 800078e:	e000      	b.n	8000792 <checkAndClearBootloaderFlag+0x2e>
            break;
        case RTC_BOOTLOADER_JUST_UPLOADED:
            flagSet = 0x02;
 8000790:	2402      	movs	r4, #2
            break;
    }

    if (flagSet!=0x00)
    {
        bkp10Write(0x0000);// Clear the flag
 8000792:	2000      	movs	r0, #0
 8000794:	f7ff ffd0 	bl	8000738 <bkp10Write>
        // Disable clocks
        pRCC->APB1ENR &= ~(RCC_APB1ENR_PWR_CLK | RCC_APB1ENR_BKP_CLK);
 8000798:	69eb      	ldr	r3, [r5, #28]
 800079a:	f023 53c0 	bic.w	r3, r3, #402653184	; 0x18000000
 800079e:	61eb      	str	r3, [r5, #28]
    }



    return flagSet;
}
 80007a0:	4620      	mov	r0, r4
 80007a2:	bd38      	pop	{r3, r4, r5, pc}
 80007a4:	40021000 	andmi	r1, r2, r0
 80007a8:	40006c00 	andmi	r6, r0, r0, lsl #24

080007ac <nvicInit>:
    SCB_TypeDef *rSCB = (SCB_TypeDef *) SCB_BASE;
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;


    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
 80007ac:	4b18      	ldr	r3, [pc, #96]	; (8000810 <nvicInit+0x64>)
    return flagSet;
}



void nvicInit(NVIC_InitTypeDef *NVIC_InitStruct) {
 80007ae:	b530      	push	{r4, r5, lr}
    SCB_TypeDef *rSCB = (SCB_TypeDef *) SCB_BASE;
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;


    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
 80007b0:	68db      	ldr	r3, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80007b2:	7844      	ldrb	r4, [r0, #1]
    SCB_TypeDef *rSCB = (SCB_TypeDef *) SCB_BASE;
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;


    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
 80007b4:	43db      	mvns	r3, r3
 80007b6:	f3c3 2302 	ubfx	r3, r3, #8, #3
    tmppre = (0x4 - tmppriority);
 80007ba:	f1c3 0204 	rsb	r2, r3, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80007be:	fa04 f202 	lsl.w	r2, r4, r2


    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 80007c2:	240f      	movs	r4, #15
 80007c4:	40dc      	lsrs	r4, r3

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80007c6:	7881      	ldrb	r1, [r0, #2]

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 80007c8:	7803      	ldrb	r3, [r0, #0]
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80007ca:	400c      	ands	r4, r1
 80007cc:	4314      	orrs	r4, r2

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 80007ce:	f003 0103 	and.w	r1, r3, #3
 80007d2:	00c9      	lsls	r1, r1, #3
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
 80007d4:	0124      	lsls	r4, r4, #4
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);

    tmpreg = rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 80007d6:	22ff      	movs	r2, #255	; 0xff

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 80007d8:	408c      	lsls	r4, r1

    tmpreg = rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 80007da:	408a      	lsls	r2, r1
 80007dc:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80007e0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80007e4:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);

    tmpreg = rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
 80007e8:	f8d3 5300 	ldr.w	r5, [r3, #768]	; 0x300
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    tmpreg &= ~tmpmask;
 80007ec:	ea25 0102 	bic.w	r1, r5, r2
    tmppriority &= tmpmask;
 80007f0:	4022      	ands	r2, r4
    tmpreg |= tmppriority;
 80007f2:	430a      	orrs	r2, r1

    rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;
 80007f4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    rNVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 80007f8:	7803      	ldrb	r3, [r0, #0]
        (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
 80007fa:	2201      	movs	r2, #1
    tmpreg |= tmppriority;

    rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    rNVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 80007fc:	0959      	lsrs	r1, r3, #5
        (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
 80007fe:	f003 031f 	and.w	r3, r3, #31
 8000802:	fa02 f303 	lsl.w	r3, r2, r3
    tmpreg |= tmppriority;

    rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    rNVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8000806:	4a03      	ldr	r2, [pc, #12]	; (8000814 <nvicInit+0x68>)
 8000808:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800080c:	bd30      	pop	{r4, r5, pc}
 800080e:	bf00      	nop
 8000810:	e000ed00 	and	lr, r0, r0, lsl #26
 8000814:	e000e100 	and	lr, r0, r0, lsl #2

08000818 <nvicDisableInterrupts>:
        (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
}

void nvicDisableInterrupts() {
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;
    rNVIC->ICER[0] = 0xFFFFFFFF;
 8000818:	4b07      	ldr	r3, [pc, #28]	; (8000838 <nvicDisableInterrupts+0x20>)
 800081a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800081e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    rNVIC->ICER[1] = 0xFFFFFFFF;
 8000822:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    rNVIC->ICPR[0] = 0xFFFFFFFF;
 8000826:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    rNVIC->ICPR[1] = 0xFFFFFFFF;
 800082a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

    SET_REG(STK_CTRL, 0x04); /* disable the systick, which operates separately from nvic */
 800082e:	2204      	movs	r2, #4
 8000830:	f843 2cf0 	str.w	r2, [r3, #-240]
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	e000e100 	and	lr, r0, r0, lsl #2

0800083c <jumpToUser>:

    usrMain();                                /* go! */
}


void jumpToUser(u32 usrAddr) {
 800083c:	b510      	push	{r4, lr}

void flashLock() {
    /* take down the HSI oscillator? it may be in use elsewhere */

    /* ensure all FPEC functions disabled and lock the FPEC */
    SET_REG(FLASH_CR, 0x00000080);
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <jumpToUser+0x24>)
 8000840:	2280      	movs	r2, #128	; 0x80

    usrMain();                                /* go! */
}


void jumpToUser(u32 usrAddr) {
 8000842:	4604      	mov	r4, r0

void flashLock() {
    /* take down the HSI oscillator? it may be in use elsewhere */

    /* ensure all FPEC functions disabled and lock the FPEC */
    SET_REG(FLASH_CR, 0x00000080);
 8000844:	601a      	str	r2, [r3, #0]

    /* tear down all the dfu related setup */
    // disable usb interrupts, clear them, turn off usb, set the disc pin
    // todo pick exactly what we want to do here, now its just a conservative
    flashLock();
    usbDsbISR();
 8000846:	f7ff fe45 	bl	80004d4 <usbDsbISR>
    nvicDisableInterrupts();
 800084a:	f7ff ffe5 	bl	8000818 <nvicDisableInterrupts>

#ifndef HAS_MAPLE_HARDWARE
    usbDsbBus();
 800084e:	f7ff fe0d 	bl	800046c <usbDsbBus>
#endif

// Does nothing, as PC12 is not connected on teh Maple mini according to the schemmatic     setPin(GPIOC, 12); // disconnect usb from host. todo, macroize pin
    systemReset(); // resets clocks and periphs, not core regs
 8000852:	f7ff feed 	bl	8000630 <systemReset>

    setMspAndJump(usrAddr);
 8000856:	4620      	mov	r0, r4
}
 8000858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif

// Does nothing, as PC12 is not connected on teh Maple mini according to the schemmatic     setPin(GPIOC, 12); // disconnect usb from host. todo, macroize pin
    systemReset(); // resets clocks and periphs, not core regs

    setMspAndJump(usrAddr);
 800085c:	f7ff bf60 	b.w	8000720 <setMspAndJump>
 8000860:	40022010 	andmi	r2, r2, r0, lsl r0

08000864 <systemHardReset>:

void systemHardReset(void) {
    SCB_TypeDef *rSCB = (SCB_TypeDef *) SCB_BASE;

    /* Reset  */
    rSCB->AIRCR = (u32)AIRCR_RESET_REQ;
 8000864:	4a02      	ldr	r2, [pc, #8]	; (8000870 <systemHardReset+0xc>)
 8000866:	4b03      	ldr	r3, [pc, #12]	; (8000874 <systemHardReset+0x10>)
 8000868:	60da      	str	r2, [r3, #12]

    /*  should never get here */
    while (1) {
        asm volatile("nop");
 800086a:	bf00      	nop
 800086c:	e7fd      	b.n	800086a <systemHardReset+0x6>
 800086e:	bf00      	nop
 8000870:	05fa0004 	ldrbeq	r0, [sl, #4]!
 8000874:	e000ed00 	and	lr, r0, r0, lsl #26

08000878 <flashErasePage>:
    }
}

bool flashErasePage(u32 pageAddr) {
    u32 rwmVal = GET_REG(FLASH_CR);
 8000878:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <flashErasePage+0x2c>)
    while (1) {
        asm volatile("nop");
    }
}

bool flashErasePage(u32 pageAddr) {
 800087a:	b510      	push	{r4, lr}
    u32 rwmVal = GET_REG(FLASH_CR);
 800087c:	681a      	ldr	r2, [r3, #0]
    rwmVal = FLASH_CR_PER;
    SET_REG(FLASH_CR, rwmVal);
 800087e:	2202      	movs	r2, #2
 8000880:	601a      	str	r2, [r3, #0]

    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 8000882:	4a09      	ldr	r2, [pc, #36]	; (80008a8 <flashErasePage+0x30>)
 8000884:	6811      	ldr	r1, [r2, #0]
 8000886:	4614      	mov	r4, r2
 8000888:	f011 0f01 	tst.w	r1, #1
 800088c:	d1f9      	bne.n	8000882 <flashErasePage+0xa>
    SET_REG(FLASH_AR, pageAddr);
 800088e:	6090      	str	r0, [r2, #8]
    SET_REG(FLASH_CR, FLASH_CR_START | FLASH_CR_PER);
 8000890:	2242      	movs	r2, #66	; 0x42
 8000892:	601a      	str	r2, [r3, #0]
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 8000894:	6822      	ldr	r2, [r4, #0]
 8000896:	f012 0101 	ands.w	r1, r2, #1
 800089a:	d1fb      	bne.n	8000894 <flashErasePage+0x1c>

    /* todo: verify the page was erased */

    rwmVal = 0x00;
    SET_REG(FLASH_CR, rwmVal);
 800089c:	6019      	str	r1, [r3, #0]

    return TRUE;
}
 800089e:	2001      	movs	r0, #1
 80008a0:	bd10      	pop	{r4, pc}
 80008a2:	bf00      	nop
 80008a4:	40022010 	andmi	r2, r2, r0, lsl r0
 80008a8:	4002200c 	andmi	r2, r2, ip

080008ac <flashWriteWord>:
    }

    return TRUE;
}

bool flashWriteWord(u32 addr, u32 word) {
 80008ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
    vu16 *flashAddr = (vu16 *)addr;
    vu32 lhWord = (vu32)word & 0x0000FFFF;
 80008ae:	b28b      	uxth	r3, r1
 80008b0:	9300      	str	r3, [sp, #0]
    vu32 hhWord = ((vu32)word & 0xFFFF0000) >> 16;
 80008b2:	0c0b      	lsrs	r3, r1, #16
 80008b4:	9301      	str	r3, [sp, #4]

    u32 rwmVal = GET_REG(FLASH_CR);
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <flashWriteWord+0x44>)
    SET_REG(FLASH_CR, FLASH_CR_PG);
 80008b8:	2201      	movs	r2, #1
bool flashWriteWord(u32 addr, u32 word) {
    vu16 *flashAddr = (vu16 *)addr;
    vu32 lhWord = (vu32)word & 0x0000FFFF;
    vu32 hhWord = ((vu32)word & 0xFFFF0000) >> 16;

    u32 rwmVal = GET_REG(FLASH_CR);
 80008ba:	681c      	ldr	r4, [r3, #0]
    SET_REG(FLASH_CR, FLASH_CR_PG);
 80008bc:	601a      	str	r2, [r3, #0]

    /* apparently we need not write to FLASH_AR and can
       simply do a native write of a half word */
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 80008be:	4a0d      	ldr	r2, [pc, #52]	; (80008f4 <flashWriteWord+0x48>)
 80008c0:	6815      	ldr	r5, [r2, #0]
 80008c2:	07ed      	lsls	r5, r5, #31
 80008c4:	d4fb      	bmi.n	80008be <flashWriteWord+0x12>
    *(flashAddr + 0x01) = (vu16)hhWord;
 80008c6:	9d01      	ldr	r5, [sp, #4]
 80008c8:	b2ad      	uxth	r5, r5
 80008ca:	8045      	strh	r5, [r0, #2]
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 80008cc:	6815      	ldr	r5, [r2, #0]
 80008ce:	07ed      	lsls	r5, r5, #31
 80008d0:	d4fc      	bmi.n	80008cc <flashWriteWord+0x20>
    *(flashAddr) = (vu16)lhWord;
 80008d2:	9d00      	ldr	r5, [sp, #0]
 80008d4:	b2ad      	uxth	r5, r5
 80008d6:	8005      	strh	r5, [r0, #0]
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 80008d8:	6815      	ldr	r5, [r2, #0]
 80008da:	07ed      	lsls	r5, r5, #31
 80008dc:	d4fc      	bmi.n	80008d8 <flashWriteWord+0x2c>

    rwmVal &= 0xFFFFFFFE;
 80008de:	f024 0201 	bic.w	r2, r4, #1
    SET_REG(FLASH_CR, rwmVal);
 80008e2:	601a      	str	r2, [r3, #0]

    /* verify the write */
    if (*(vu32 *)addr != word) {
 80008e4:	6800      	ldr	r0, [r0, #0]
        return FALSE;
    }

    return TRUE;
}
 80008e6:	1a43      	subs	r3, r0, r1
 80008e8:	4258      	negs	r0, r3
 80008ea:	4158      	adcs	r0, r3
 80008ec:	b003      	add	sp, #12
 80008ee:	bd30      	pop	{r4, r5, pc}
 80008f0:	40022010 	andmi	r2, r2, r0, lsl r0
 80008f4:	4002200c 	andmi	r2, r2, ip

080008f8 <flashLock>:

void flashLock() {
    /* take down the HSI oscillator? it may be in use elsewhere */

    /* ensure all FPEC functions disabled and lock the FPEC */
    SET_REG(FLASH_CR, 0x00000080);
 80008f8:	4b01      	ldr	r3, [pc, #4]	; (8000900 <flashLock+0x8>)
 80008fa:	2280      	movs	r2, #128	; 0x80
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	4770      	bx	lr
 8000900:	40022010 	andmi	r2, r2, r0, lsl r0

08000904 <flashUnlock>:
}

void flashUnlock() {
    /* unlock the flash */
    SET_REG(FLASH_KEYR, FLASH_KEY1);
 8000904:	4b03      	ldr	r3, [pc, #12]	; (8000914 <flashUnlock+0x10>)
 8000906:	4a04      	ldr	r2, [pc, #16]	; (8000918 <flashUnlock+0x14>)
 8000908:	601a      	str	r2, [r3, #0]
    SET_REG(FLASH_KEYR, FLASH_KEY2);
 800090a:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	40022004 	andmi	r2, r2, r4
 8000918:	45670123 	strbmi	r0, [r7, #-291]!	; 0x123

0800091c <crMask>:

// Used to create the control register masking pattern, when setting control register mode.
unsigned int crMask(int pin)
{
    unsigned int mask;
    if (pin>=8)
 800091c:	2807      	cmp	r0, #7
    {
        pin-=8;
 800091e:	bfc8      	it	gt
 8000920:	3808      	subgt	r0, #8
    }
    mask = 0x0F << (pin<<2);
 8000922:	230f      	movs	r3, #15
 8000924:	0080      	lsls	r0, r0, #2
 8000926:	fa03 f000 	lsl.w	r0, r3, r0
    return ~mask;
}
 800092a:	43c0      	mvns	r0, r0
 800092c:	4770      	bx	lr
	...

08000930 <getFlashEnd>:

#define FLASH_SIZE_REG 0x1FFFF7E0
int getFlashEnd(void)
{
    unsigned short *flashSize = (unsigned short *) (FLASH_SIZE_REG);// Address register
    return ((int)(*flashSize & 0xffff) * 1024) + 0x08000000;
 8000930:	4b02      	ldr	r3, [pc, #8]	; (800093c <getFlashEnd+0xc>)
 8000932:	8818      	ldrh	r0, [r3, #0]
 8000934:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
}
 8000938:	0280      	lsls	r0, r0, #10
 800093a:	4770      	bx	lr
 800093c:	1ffff7e0 	svcne	0x00fff7e0

08000940 <getFlashPageSize>:

int getFlashPageSize(void)
{

    unsigned short *flashSize = (unsigned short *) (FLASH_SIZE_REG);// Address register
    if ((*flashSize & 0xffff) > 128)
 8000940:	4b04      	ldr	r3, [pc, #16]	; (8000954 <getFlashPageSize+0x14>)
 8000942:	881b      	ldrh	r3, [r3, #0]
    {
        return 0x800;
 8000944:	2b81      	cmp	r3, #129	; 0x81
    }
    else
    {
        return 0x400;
    }
}
 8000946:	bf34      	ite	cc
 8000948:	f44f 6080 	movcc.w	r0, #1024	; 0x400
 800094c:	f44f 6000 	movcs.w	r0, #2048	; 0x800
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	1ffff7e0 	svcne	0x00fff7e0

08000958 <dfuInit>:

volatile PLOT code_copy_lock;

/* todo: force dfu globals to be singleton to avoid re-inits? */
void dfuInit(void) {
    dfuAppStatus.bStatus = OK;
 8000958:	4a0d      	ldr	r2, [pc, #52]	; (8000990 <dfuInit+0x38>)
 800095a:	2300      	movs	r3, #0
    dfuAppStatus.bwPollTimeout0 = 0x00;
    dfuAppStatus.bwPollTimeout1 = 0x00;
    dfuAppStatus.bwPollTimeout2 = 0x00;
    dfuAppStatus.bState = dfuIDLE;
 800095c:	2102      	movs	r1, #2

volatile PLOT code_copy_lock;

/* todo: force dfu globals to be singleton to avoid re-inits? */
void dfuInit(void) {
    dfuAppStatus.bStatus = OK;
 800095e:	7013      	strb	r3, [r2, #0]
    dfuAppStatus.bwPollTimeout0 = 0x00;
 8000960:	7053      	strb	r3, [r2, #1]
    dfuAppStatus.bwPollTimeout1 = 0x00;
 8000962:	7093      	strb	r3, [r2, #2]
    dfuAppStatus.bwPollTimeout2 = 0x00;
 8000964:	70d3      	strb	r3, [r2, #3]
    dfuAppStatus.bState = dfuIDLE;
 8000966:	7111      	strb	r1, [r2, #4]
    dfuAppStatus.iString = 0x00;          /* all strings must be 0x00 until we make them! */
 8000968:	7153      	strb	r3, [r2, #5]
    userFirmwareLen = 0;
 800096a:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <dfuInit+0x3c>)
    thisBlockLen = 0;;
    userAppAddr = USER_CODE_RAM; /* default RAM user code location */
 800096c:	490a      	ldr	r1, [pc, #40]	; (8000998 <dfuInit+0x40>)
    dfuAppStatus.bwPollTimeout0 = 0x00;
    dfuAppStatus.bwPollTimeout1 = 0x00;
    dfuAppStatus.bwPollTimeout2 = 0x00;
    dfuAppStatus.bState = dfuIDLE;
    dfuAppStatus.iString = 0x00;          /* all strings must be 0x00 until we make them! */
    userFirmwareLen = 0;
 800096e:	6013      	str	r3, [r2, #0]
    thisBlockLen = 0;;
 8000970:	4a0a      	ldr	r2, [pc, #40]	; (800099c <dfuInit+0x44>)
 8000972:	8013      	strh	r3, [r2, #0]
    userAppAddr = USER_CODE_RAM; /* default RAM user code location */
 8000974:	4a0a      	ldr	r2, [pc, #40]	; (80009a0 <dfuInit+0x48>)
 8000976:	6011      	str	r1, [r2, #0]
    userAppEnd = RAM_END;
 8000978:	4a0a      	ldr	r2, [pc, #40]	; (80009a4 <dfuInit+0x4c>)
 800097a:	f501 4188 	add.w	r1, r1, #17408	; 0x4400
 800097e:	6011      	str	r1, [r2, #0]
    userUploadType=DFU_UPLOAD_NONE;
 8000980:	4a09      	ldr	r2, [pc, #36]	; (80009a8 <dfuInit+0x50>)
    code_copy_lock = WAIT;
 8000982:	2103      	movs	r1, #3
    dfuAppStatus.iString = 0x00;          /* all strings must be 0x00 until we make them! */
    userFirmwareLen = 0;
    thisBlockLen = 0;;
    userAppAddr = USER_CODE_RAM; /* default RAM user code location */
    userAppEnd = RAM_END;
    userUploadType=DFU_UPLOAD_NONE;
 8000984:	7013      	strb	r3, [r2, #0]
    code_copy_lock = WAIT;
 8000986:	4a09      	ldr	r2, [pc, #36]	; (80009ac <dfuInit+0x54>)
 8000988:	7011      	strb	r1, [r2, #0]
    dfuBusy = FALSE;
 800098a:	4a09      	ldr	r2, [pc, #36]	; (80009b0 <dfuInit+0x58>)
 800098c:	7013      	strb	r3, [r2, #0]
 800098e:	4770      	bx	lr
 8000990:	20000a19 	andcs	r0, r0, r9, lsl sl
 8000994:	20000a14 	andcs	r0, r0, r4, lsl sl
 8000998:	20000c00 	andcs	r0, r0, r0, lsl #24
 800099c:	20000a12 	andcs	r0, r0, r2, lsl sl
 80009a0:	200001c0 	andcs	r0, r0, r0, asr #3
 80009a4:	200001bc 			; <UNDEFINED> instruction: 0x200001bc
 80009a8:	20000a18 	andcs	r0, r0, r8, lsl sl
 80009ac:	200001cc 	andcs	r0, r0, ip, asr #3
 80009b0:	20000a1f 	andcs	r0, r0, pc, lsl sl

080009b4 <dfuUpdateByReset>:
    } else {
        return FALSE;
    }
}

void dfuUpdateByReset(void) {
 80009b4:	b508      	push	{r3, lr}
    u8 startState = dfuAppStatus.bState;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <dfuUpdateByReset+0x3c>)
    userFirmwareLen = 0;
 80009b8:	480e      	ldr	r0, [pc, #56]	; (80009f4 <dfuUpdateByReset+0x40>)
        return FALSE;
    }
}

void dfuUpdateByReset(void) {
    u8 startState = dfuAppStatus.bState;
 80009ba:	7919      	ldrb	r1, [r3, #4]
    userFirmwareLen = 0;
 80009bc:	2200      	movs	r2, #0
        return FALSE;
    }
}

void dfuUpdateByReset(void) {
    u8 startState = dfuAppStatus.bState;
 80009be:	b2c9      	uxtb	r1, r1
    userFirmwareLen = 0;

    if (startState == appDETACH) {
 80009c0:	2901      	cmp	r1, #1
    }
}

void dfuUpdateByReset(void) {
    u8 startState = dfuAppStatus.bState;
    userFirmwareLen = 0;
 80009c2:	6002      	str	r2, [r0, #0]

    if (startState == appDETACH) {
 80009c4:	d108      	bne.n	80009d8 <dfuUpdateByReset+0x24>
        dfuAppStatus.bState = dfuIDLE;
 80009c6:	2102      	movs	r1, #2
 80009c8:	7119      	strb	r1, [r3, #4]
        dfuAppStatus.bStatus = OK;
 80009ca:	701a      	strb	r2, [r3, #0]

        nvicDisableInterrupts();
 80009cc:	f7ff ff24 	bl	8000818 <nvicDisableInterrupts>
        dfuAppStatus.bState = dfuIDLE;
        dfuAppStatus.bStatus = OK;

        systemHardReset();
    }
}
 80009d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (startState == appDETACH) {
        dfuAppStatus.bState = dfuIDLE;
        dfuAppStatus.bStatus = OK;

        nvicDisableInterrupts();
        usbEnbISR();
 80009d4:	f7ff bd4c 	b.w	8000470 <usbEnbISR>

    } else if (startState == appIDLE || startState == dfuIDLE) {
 80009d8:	f011 0ffd 	tst.w	r1, #253	; 0xfd
 80009dc:	d006      	beq.n	80009ec <dfuUpdateByReset+0x38>
        /* do nothing...might be normal usb bus activity */
    } else {
        /* we reset from the dfu, reset everything and startover,
           which is the correct operation if this is an erroneous
           event or properly following a MANIFEST */
        dfuAppStatus.bState = dfuIDLE;
 80009de:	2102      	movs	r1, #2
 80009e0:	7119      	strb	r1, [r3, #4]
        dfuAppStatus.bStatus = OK;
 80009e2:	701a      	strb	r2, [r3, #0]

        systemHardReset();
    }
}
 80009e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
           which is the correct operation if this is an erroneous
           event or properly following a MANIFEST */
        dfuAppStatus.bState = dfuIDLE;
        dfuAppStatus.bStatus = OK;

        systemHardReset();
 80009e8:	f7ff bf3c 	b.w	8000864 <systemHardReset>
 80009ec:	bd08      	pop	{r3, pc}
 80009ee:	bf00      	nop
 80009f0:	20000a19 	andcs	r0, r0, r9, lsl sl
 80009f4:	20000a14 	andcs	r0, r0, r4, lsl sl

080009f8 <dfuCopyState>:

void dfuUpdateByTimeout(void) {
}

u8 *dfuCopyState(u16 length) {
    if (length == 0) {
 80009f8:	b920      	cbnz	r0, 8000a04 <dfuCopyState+0xc>
        pInformation->Ctrl_Info.Usb_wLength = 1;
 80009fa:	4b03      	ldr	r3, [pc, #12]	; (8000a08 <dfuCopyState+0x10>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	821a      	strh	r2, [r3, #16]
        return NULL;
 8000a02:	4770      	bx	lr
    } else {
        return (&(dfuAppStatus.bState));
 8000a04:	4801      	ldr	r0, [pc, #4]	; (8000a0c <dfuCopyState+0x14>)
    }
}
 8000a06:	4770      	bx	lr
 8000a08:	20000200 	andcs	r0, r0, r0, lsl #4
 8000a0c:	20000a1d 	andcs	r0, r0, sp, lsl sl

08000a10 <dfuCopyStatus>:

u8 *dfuCopyStatus(u16 length) {
    if (length == 0) {
 8000a10:	b920      	cbnz	r0, 8000a1c <dfuCopyStatus+0xc>
        pInformation->Ctrl_Info.Usb_wLength = 6;
 8000a12:	4b03      	ldr	r3, [pc, #12]	; (8000a20 <dfuCopyStatus+0x10>)
 8000a14:	2206      	movs	r2, #6
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	821a      	strh	r2, [r3, #16]
        return NULL;
 8000a1a:	4770      	bx	lr
    } else {
        return (u8*)(&dfuAppStatus);
 8000a1c:	4801      	ldr	r0, [pc, #4]	; (8000a24 <dfuCopyStatus+0x14>)
    }
}
 8000a1e:	4770      	bx	lr
 8000a20:	20000200 	andcs	r0, r0, r0, lsl #4
 8000a24:	20000a19 	andcs	r0, r0, r9, lsl sl

08000a28 <dfuCopyDNLOAD>:


u8 *dfuCopyDNLOAD(u16 length) {
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <dfuCopyDNLOAD+0x1c>)
    if (length == 0) {
        pInformation->Ctrl_Info.Usb_wLength = pInformation->USBwLengths.w - pInformation->Ctrl_Info.Usb_wOffset;
 8000a2a:	681b      	ldr	r3, [r3, #0]
    }
}


u8 *dfuCopyDNLOAD(u16 length) {
    if (length == 0) {
 8000a2c:	b930      	cbnz	r0, 8000a3c <dfuCopyDNLOAD+0x14>
        pInformation->Ctrl_Info.Usb_wLength = pInformation->USBwLengths.w - pInformation->Ctrl_Info.Usb_wOffset;
 8000a2e:	88da      	ldrh	r2, [r3, #6]
 8000a30:	8a59      	ldrh	r1, [r3, #18]
 8000a32:	1a51      	subs	r1, r2, r1
 8000a34:	8219      	strh	r1, [r3, #16]
        thisBlockLen = pInformation->USBwLengths.w;
 8000a36:	4b04      	ldr	r3, [pc, #16]	; (8000a48 <dfuCopyDNLOAD+0x20>)
 8000a38:	801a      	strh	r2, [r3, #0]
        return NULL;
 8000a3a:	4770      	bx	lr
    } else {
        return ((u8 *)recvBuffer + pInformation->Ctrl_Info.Usb_wOffset);
 8000a3c:	8a5b      	ldrh	r3, [r3, #18]
 8000a3e:	4803      	ldr	r0, [pc, #12]	; (8000a4c <dfuCopyDNLOAD+0x24>)
 8000a40:	4418      	add	r0, r3
    }
}
 8000a42:	4770      	bx	lr
 8000a44:	20000200 	andcs	r0, r0, r0, lsl #4
 8000a48:	20000a12 	andcs	r0, r0, r2, lsl sl
 8000a4c:	20000210 	andcs	r0, r0, r0, lsl r2

08000a50 <dfuCopyUPLOAD>:

u8 *dfuCopyUPLOAD(u16 length) {
 8000a50:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <dfuCopyUPLOAD+0x24>)
    if (length == 0) {
 8000a52:	b930      	cbnz	r0, 8000a62 <dfuCopyUPLOAD+0x12>
        pInformation->Ctrl_Info.Usb_wLength = thisBlockLen - pInformation->Ctrl_Info.Usb_wOffset;
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a08      	ldr	r2, [pc, #32]	; (8000a78 <dfuCopyUPLOAD+0x28>)
 8000a58:	8811      	ldrh	r1, [r2, #0]
 8000a5a:	8a5a      	ldrh	r2, [r3, #18]
 8000a5c:	1a8a      	subs	r2, r1, r2
 8000a5e:	821a      	strh	r2, [r3, #16]
        return NULL;
 8000a60:	4770      	bx	lr
    } else {
        return((u8*) userAppAddr + userFirmwareLen + pInformation->Ctrl_Info.Usb_wOffset);
 8000a62:	4906      	ldr	r1, [pc, #24]	; (8000a7c <dfuCopyUPLOAD+0x2c>)
 8000a64:	4a06      	ldr	r2, [pc, #24]	; (8000a80 <dfuCopyUPLOAD+0x30>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	6812      	ldr	r2, [r2, #0]
 8000a6a:	6808      	ldr	r0, [r1, #0]
 8000a6c:	8a5b      	ldrh	r3, [r3, #18]
 8000a6e:	4410      	add	r0, r2
 8000a70:	4418      	add	r0, r3
    }
}
 8000a72:	4770      	bx	lr
 8000a74:	20000200 	andcs	r0, r0, r0, lsl #4
 8000a78:	20000a12 	andcs	r0, r0, r2, lsl sl
 8000a7c:	200001c0 	andcs	r0, r0, r0, asr #3
 8000a80:	20000a14 	andcs	r0, r0, r4, lsl sl

08000a84 <dfuCopyBufferToExec>:

void dfuCopyBufferToExec() {
 8000a84:	b570      	push	{r4, r5, r6, lr}
        }
    }
    else
*/
    {
        userSpace = (u32 *)(USER_CODE_FLASH + userFirmwareLen);
 8000a86:	4e0f      	ldr	r6, [pc, #60]	; (8000ac4 <dfuCopyBufferToExec+0x40>)

        flashErasePage((u32)(userSpace));

        for (i = 0; i < thisBlockLen; i = i + 4) {
 8000a88:	2400      	movs	r4, #0
        }
    }
    else
*/
    {
        userSpace = (u32 *)(USER_CODE_FLASH + userFirmwareLen);
 8000a8a:	6835      	ldr	r5, [r6, #0]
 8000a8c:	f105 6500 	add.w	r5, r5, #134217728	; 0x8000000
 8000a90:	f505 5500 	add.w	r5, r5, #8192	; 0x2000

        flashErasePage((u32)(userSpace));
 8000a94:	4628      	mov	r0, r5
 8000a96:	f7ff feef 	bl	8000878 <flashErasePage>

        for (i = 0; i < thisBlockLen; i = i + 4) {
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <dfuCopyBufferToExec+0x44>)
 8000a9c:	881a      	ldrh	r2, [r3, #0]
 8000a9e:	b292      	uxth	r2, r2
 8000aa0:	4294      	cmp	r4, r2
 8000aa2:	da06      	bge.n	8000ab2 <dfuCopyBufferToExec+0x2e>
            flashWriteWord((u32)(userSpace++), *(u32 *)(recvBuffer +i));
 8000aa4:	4b09      	ldr	r3, [pc, #36]	; (8000acc <dfuCopyBufferToExec+0x48>)
 8000aa6:	1928      	adds	r0, r5, r4
 8000aa8:	58e1      	ldr	r1, [r4, r3]
 8000aaa:	f7ff feff 	bl	80008ac <flashWriteWord>
    {
        userSpace = (u32 *)(USER_CODE_FLASH + userFirmwareLen);

        flashErasePage((u32)(userSpace));

        for (i = 0; i < thisBlockLen; i = i + 4) {
 8000aae:	3404      	adds	r4, #4
 8000ab0:	e7f3      	b.n	8000a9a <dfuCopyBufferToExec+0x16>
            flashWriteWord((u32)(userSpace++), *(u32 *)(recvBuffer +i));
        }

    }
    userFirmwareLen += thisBlockLen;
 8000ab2:	6831      	ldr	r1, [r6, #0]
 8000ab4:	881a      	ldrh	r2, [r3, #0]
 8000ab6:	b292      	uxth	r2, r2
 8000ab8:	440a      	add	r2, r1
 8000aba:	6032      	str	r2, [r6, #0]

    thisBlockLen = 0;
 8000abc:	2200      	movs	r2, #0
 8000abe:	801a      	strh	r2, [r3, #0]
 8000ac0:	bd70      	pop	{r4, r5, r6, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000a14 	andcs	r0, r0, r4, lsl sl
 8000ac8:	20000a12 	andcs	r0, r0, r2, lsl sl
 8000acc:	20000210 	andcs	r0, r0, r0, lsl r2

08000ad0 <dfuUpdateByRequest>:
}




bool dfuUpdateByRequest(void) {
 8000ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /* were using the global pInformation struct from usb_lib here,
       see comment in maple_dfu.h around DFUEvent struct */
    dfuBusy = TRUE;
 8000ad4:	4976      	ldr	r1, [pc, #472]	; (8000cb0 <dfuUpdateByRequest+0x1e0>)



    u8 startState = dfuAppStatus.bState;
 8000ad6:	4c77      	ldr	r4, [pc, #476]	; (8000cb4 <dfuUpdateByRequest+0x1e4>)


bool dfuUpdateByRequest(void) {
    /* were using the global pInformation struct from usb_lib here,
       see comment in maple_dfu.h around DFUEvent struct */
    dfuBusy = TRUE;
 8000ad8:	2001      	movs	r0, #1
 8000ada:	7008      	strb	r0, [r1, #0]



    u8 startState = dfuAppStatus.bState;
 8000adc:	7923      	ldrb	r3, [r4, #4]
    dfuAppStatus.bStatus = OK;
 8000ade:	2200      	movs	r2, #0
       see comment in maple_dfu.h around DFUEvent struct */
    dfuBusy = TRUE;



    u8 startState = dfuAppStatus.bState;
 8000ae0:	b2db      	uxtb	r3, r3
    dfuAppStatus.bStatus = OK;
    /* often leaner to nest if's then embed a switch/case */
    if (startState == dfuIDLE)  {
 8000ae2:	2b02      	cmp	r3, #2
    dfuBusy = TRUE;



    u8 startState = dfuAppStatus.bState;
    dfuAppStatus.bStatus = OK;
 8000ae4:	7022      	strb	r2, [r4, #0]
    /* often leaner to nest if's then embed a switch/case */
    if (startState == dfuIDLE)  {
 8000ae6:	d144      	bne.n	8000b72 <dfuUpdateByRequest+0xa2>
        /*  device running inside DFU mode */
        dfuBusy = TRUE; // signals the main loop to defer to the dfu write-loop
 8000ae8:	7008      	strb	r0, [r1, #0]

        if (pInformation->USBbRequest == DFU_DNLOAD) {
 8000aea:	4973      	ldr	r1, [pc, #460]	; (8000cb8 <dfuUpdateByRequest+0x1e8>)
 8000aec:	6808      	ldr	r0, [r1, #0]
 8000aee:	7841      	ldrb	r1, [r0, #1]
 8000af0:	2901      	cmp	r1, #1
 8000af2:	d11a      	bne.n	8000b2a <dfuUpdateByRequest+0x5a>

            if (pInformation->USBwLengths.w > 0) {
 8000af4:	88c3      	ldrh	r3, [r0, #6]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f000 80ae 	beq.w	8000c58 <dfuUpdateByRequest+0x188>
                userFirmwareLen = 0;
 8000afc:	4b6f      	ldr	r3, [pc, #444]	; (8000cbc <dfuUpdateByRequest+0x1ec>)
 8000afe:	601a      	str	r2, [r3, #0]
                dfuAppStatus.bState  = dfuDNLOAD_SYNC;
                switch(pInformation->Current_AlternateSetting)
 8000b00:	7b02      	ldrb	r2, [r0, #12]

        if (pInformation->USBbRequest == DFU_DNLOAD) {

            if (pInformation->USBwLengths.w > 0) {
                userFirmwareLen = 0;
                dfuAppStatus.bState  = dfuDNLOAD_SYNC;
 8000b02:	2303      	movs	r3, #3
 8000b04:	7123      	strb	r3, [r4, #4]
                switch(pInformation->Current_AlternateSetting)
 8000b06:	b96a      	cbnz	r2, 8000b24 <dfuUpdateByRequest+0x54>
                {
                    case 0:
                        userUploadType = DFU_UPLOAD_FLASH;
 8000b08:	4b6d      	ldr	r3, [pc, #436]	; (8000cc0 <dfuUpdateByRequest+0x1f0>)
                        userAppAddr = USER_CODE_FLASH;
 8000b0a:	4a6e      	ldr	r2, [pc, #440]	; (8000cc4 <dfuUpdateByRequest+0x1f4>)
                userFirmwareLen = 0;
                dfuAppStatus.bState  = dfuDNLOAD_SYNC;
                switch(pInformation->Current_AlternateSetting)
                {
                    case 0:
                        userUploadType = DFU_UPLOAD_FLASH;
 8000b0c:	7019      	strb	r1, [r3, #0]
                        userAppAddr = USER_CODE_FLASH;
 8000b0e:	4b6e      	ldr	r3, [pc, #440]	; (8000cc8 <dfuUpdateByRequest+0x1f8>)
 8000b10:	601a      	str	r2, [r3, #0]
                        /* make sure the flash is setup properly, unlock it */
                        setupFLASH();
 8000b12:	f7ff fded 	bl	80006f0 <setupFLASH>
                        flashUnlock();
 8000b16:	f7ff fef5 	bl	8000904 <flashUnlock>
                        bkp10Write(RTC_BOOTLOADER_JUST_UPLOADED);
 8000b1a:	f244 204d 	movw	r0, #16973	; 0x424d
 8000b1e:	f7ff fe0b 	bl	8000738 <bkp10Write>

                        break;
 8000b22:	e0bd      	b.n	8000ca0 <dfuUpdateByRequest+0x1d0>

                    default:
                    // Roger Clark. Report error
                        dfuAppStatus.bState  = dfuERROR;
 8000b24:	220a      	movs	r2, #10
 8000b26:	7122      	strb	r2, [r4, #4]
 8000b28:	e0b9      	b.n	8000c9e <dfuUpdateByRequest+0x1ce>
                }
            } else {
                dfuAppStatus.bState  = dfuERROR;
                dfuAppStatus.bStatus = errNOTDONE;
            }
        } else if (pInformation->USBbRequest == DFU_UPLOAD) {
 8000b2a:	2902      	cmp	r1, #2
 8000b2c:	d11c      	bne.n	8000b68 <dfuUpdateByRequest+0x98>
            dfuAppStatus.bState  = dfuUPLOAD_IDLE;
 8000b2e:	2309      	movs	r3, #9
 8000b30:	7123      	strb	r3, [r4, #4]
            /* record length of first block for calculating target
               address from wValue in consecutive blocks */
            uploadBlockLen = pInformation->USBwLengths.w;
 8000b32:	88c2      	ldrh	r2, [r0, #6]
 8000b34:	4b65      	ldr	r3, [pc, #404]	; (8000ccc <dfuUpdateByRequest+0x1fc>)
 8000b36:	801a      	strh	r2, [r3, #0]
            thisBlockLen = uploadBlockLen; /* for this first block as well */
 8000b38:	8819      	ldrh	r1, [r3, #0]
 8000b3a:	4a65      	ldr	r2, [pc, #404]	; (8000cd0 <dfuUpdateByRequest+0x200>)
 8000b3c:	b289      	uxth	r1, r1
 8000b3e:	8011      	strh	r1, [r2, #0]
            /* calculate where the data should be copied from */
            userFirmwareLen = uploadBlockLen * pInformation->USBwValue;
 8000b40:	881a      	ldrh	r2, [r3, #0]
 8000b42:	8843      	ldrh	r3, [r0, #2]
 8000b44:	b292      	uxth	r2, r2
 8000b46:	435a      	muls	r2, r3
 8000b48:	4b5c      	ldr	r3, [pc, #368]	; (8000cbc <dfuUpdateByRequest+0x1ec>)
 8000b4a:	601a      	str	r2, [r3, #0]
            switch(pInformation->Current_AlternateSetting)
 8000b4c:	7b03      	ldrb	r3, [r0, #12]
 8000b4e:	b93b      	cbnz	r3, 8000b60 <dfuUpdateByRequest+0x90>
            {
                case 0:
                    userAppAddr = USER_CODE_FLASH;
 8000b50:	4b5d      	ldr	r3, [pc, #372]	; (8000cc8 <dfuUpdateByRequest+0x1f8>)
 8000b52:	4a5c      	ldr	r2, [pc, #368]	; (8000cc4 <dfuUpdateByRequest+0x1f4>)
 8000b54:	601a      	str	r2, [r3, #0]
                    userAppEnd = getFlashEnd();
 8000b56:	f7ff feeb 	bl	8000930 <getFlashEnd>
 8000b5a:	4b5e      	ldr	r3, [pc, #376]	; (8000cd4 <dfuUpdateByRequest+0x204>)
 8000b5c:	6018      	str	r0, [r3, #0]
                    break;
 8000b5e:	e09f      	b.n	8000ca0 <dfuUpdateByRequest+0x1d0>
                default:
                // Roger Clark.
                // Changed this to report error that its unable to write to this memory
                // However the code should never get here as only AlternateSetting 1 and 2 are allowed (see above)
                    dfuAppStatus.bState  = dfuERROR;
 8000b60:	230a      	movs	r3, #10
 8000b62:	7123      	strb	r3, [r4, #4]
                    dfuAppStatus.bStatus = errWRITE;
 8000b64:	2303      	movs	r3, #3
 8000b66:	e09a      	b.n	8000c9e <dfuUpdateByRequest+0x1ce>
                    break;
            }
        } else if (pInformation->USBbRequest == DFU_ABORT) {
 8000b68:	2906      	cmp	r1, #6
 8000b6a:	d03a      	beq.n	8000be2 <dfuUpdateByRequest+0x112>
            dfuAppStatus.bState  = dfuIDLE;
            dfuAppStatus.bStatus = OK;  /* are we really ok? we were just aborted */
        } else if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8000b6c:	2903      	cmp	r1, #3
 8000b6e:	d13b      	bne.n	8000be8 <dfuUpdateByRequest+0x118>
 8000b70:	e088      	b.n	8000c84 <dfuUpdateByRequest+0x1b4>
        } else {
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }

    } else if (startState == dfuDNLOAD_SYNC)         {
 8000b72:	2b03      	cmp	r3, #3
 8000b74:	d10b      	bne.n	8000b8e <dfuUpdateByRequest+0xbe>
        /* device received block, waiting for DFU_GETSTATUS request */

        if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8000b76:	4a50      	ldr	r2, [pc, #320]	; (8000cb8 <dfuUpdateByRequest+0x1e8>)
 8000b78:	6812      	ldr	r2, [r2, #0]
 8000b7a:	7852      	ldrb	r2, [r2, #1]
 8000b7c:	2a03      	cmp	r2, #3
 8000b7e:	d104      	bne.n	8000b8a <dfuUpdateByRequest+0xba>

            }
            else
            */
            {
                dfuAppStatus.bState = dfuDNLOAD_IDLE;
 8000b80:	2305      	movs	r3, #5
 8000b82:	7123      	strb	r3, [r4, #4]
                dfuCopyBufferToExec();
 8000b84:	f7ff ff7e 	bl	8000a84 <dfuCopyBufferToExec>
 8000b88:	e08a      	b.n	8000ca0 <dfuUpdateByRequest+0x1d0>
            }

        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 8000b8a:	2a05      	cmp	r2, #5
 8000b8c:	e02d      	b.n	8000bea <dfuUpdateByRequest+0x11a>
        } else {
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }

    } else if (startState == dfuDNBUSY)              {
 8000b8e:	2b04      	cmp	r3, #4
 8000b90:	d108      	bne.n	8000ba4 <dfuUpdateByRequest+0xd4>
        /* if were actually done writing, goto sync, else stay busy */
        if (code_copy_lock == END) {
 8000b92:	4951      	ldr	r1, [pc, #324]	; (8000cd8 <dfuUpdateByRequest+0x208>)
 8000b94:	7808      	ldrb	r0, [r1, #0]
 8000b96:	2802      	cmp	r0, #2
 8000b98:	d174      	bne.n	8000c84 <dfuUpdateByRequest+0x1b4>
            dfuAppStatus.bwPollTimeout0 = 0x00;
            code_copy_lock = WAIT;
 8000b9a:	2303      	movs	r3, #3
        }

    } else if (startState == dfuDNBUSY)              {
        /* if were actually done writing, goto sync, else stay busy */
        if (code_copy_lock == END) {
            dfuAppStatus.bwPollTimeout0 = 0x00;
 8000b9c:	7062      	strb	r2, [r4, #1]
            code_copy_lock = WAIT;
 8000b9e:	700b      	strb	r3, [r1, #0]
            dfuAppStatus.bState = dfuDNLOAD_IDLE;
 8000ba0:	2305      	movs	r3, #5
 8000ba2:	e06f      	b.n	8000c84 <dfuUpdateByRequest+0x1b4>
        } else {
            dfuAppStatus.bState = dfuDNBUSY;
        }

    } else if (startState == dfuDNLOAD_IDLE)         {
 8000ba4:	2b05      	cmp	r3, #5
 8000ba6:	d114      	bne.n	8000bd2 <dfuUpdateByRequest+0x102>
        /* device is expecting dfu_dnload requests */
        if (pInformation->USBbRequest == DFU_DNLOAD) {
 8000ba8:	4b43      	ldr	r3, [pc, #268]	; (8000cb8 <dfuUpdateByRequest+0x1e8>)
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	7853      	ldrb	r3, [r2, #1]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d108      	bne.n	8000bc4 <dfuUpdateByRequest+0xf4>
            if (pInformation->USBwLengths.w > 0) {
 8000bb2:	88d3      	ldrh	r3, [r2, #6]
 8000bb4:	b10b      	cbz	r3, 8000bba <dfuUpdateByRequest+0xea>
                dfuAppStatus.bState  = dfuDNLOAD_SYNC;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	e064      	b.n	8000c84 <dfuUpdateByRequest+0x1b4>
            } else {
                /* todo, support "disagreement" if device expects more data than this */
                dfuAppStatus.bState  = dfuMANIFEST_SYNC;
 8000bba:	2306      	movs	r3, #6
 8000bbc:	7123      	strb	r3, [r4, #4]

                /* relock the flash */
                flashLock();
 8000bbe:	f7ff fe9b 	bl	80008f8 <flashLock>
 8000bc2:	e06d      	b.n	8000ca0 <dfuUpdateByRequest+0x1d0>
            }
        } else if (pInformation->USBbRequest == DFU_ABORT) {
 8000bc4:	2b06      	cmp	r3, #6
 8000bc6:	d04d      	beq.n	8000c64 <dfuUpdateByRequest+0x194>
            dfuAppStatus.bState  = dfuIDLE;
        } else if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8000bc8:	2b03      	cmp	r3, #3
 8000bca:	d04b      	beq.n	8000c64 <dfuUpdateByRequest+0x194>
            dfuAppStatus.bState  = dfuIDLE;
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 8000bcc:	2b05      	cmp	r3, #5
 8000bce:	d163      	bne.n	8000c98 <dfuUpdateByRequest+0x1c8>
 8000bd0:	e048      	b.n	8000c64 <dfuUpdateByRequest+0x194>
        } else {
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }

    } else if (startState == dfuMANIFEST_SYNC)       {
 8000bd2:	2b06      	cmp	r3, #6
 8000bd4:	d10b      	bne.n	8000bee <dfuUpdateByRequest+0x11e>
        /* device has received last block, waiting DFU_GETSTATUS request */

        if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8000bd6:	4938      	ldr	r1, [pc, #224]	; (8000cb8 <dfuUpdateByRequest+0x1e8>)
 8000bd8:	6809      	ldr	r1, [r1, #0]
 8000bda:	7849      	ldrb	r1, [r1, #1]
 8000bdc:	2903      	cmp	r1, #3
 8000bde:	d103      	bne.n	8000be8 <dfuUpdateByRequest+0x118>
            dfuAppStatus.bState  = dfuMANIFEST_WAIT_RESET;
 8000be0:	2308      	movs	r3, #8
 8000be2:	7123      	strb	r3, [r4, #4]
            dfuAppStatus.bStatus = OK;
 8000be4:	7022      	strb	r2, [r4, #0]
 8000be6:	e05b      	b.n	8000ca0 <dfuUpdateByRequest+0x1d0>
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 8000be8:	2905      	cmp	r1, #5
 8000bea:	d155      	bne.n	8000c98 <dfuUpdateByRequest+0x1c8>
 8000bec:	e04a      	b.n	8000c84 <dfuUpdateByRequest+0x1b4>
        } else {
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }

    } else if (startState == dfuMANIFEST)            {
 8000bee:	2b07      	cmp	r3, #7
 8000bf0:	d0f6      	beq.n	8000be0 <dfuUpdateByRequest+0x110>

        /* should never receive request while in manifest! */
        dfuAppStatus.bState  = dfuMANIFEST_WAIT_RESET;
        dfuAppStatus.bStatus = OK;

    } else if (startState == dfuMANIFEST_WAIT_RESET) {
 8000bf2:	2b08      	cmp	r3, #8
 8000bf4:	d046      	beq.n	8000c84 <dfuUpdateByRequest+0x1b4>
           usb reset or power on reset to run the new code */

        /* consider timing out and self-resetting */
        dfuAppStatus.bState  = dfuMANIFEST_WAIT_RESET;

    } else if (startState == dfuUPLOAD_IDLE)         {
 8000bf6:	2b09      	cmp	r3, #9
 8000bf8:	d13c      	bne.n	8000c74 <dfuUpdateByRequest+0x1a4>
        /* device expecting further dfu_upload requests */

        if (pInformation->USBbRequest == DFU_UPLOAD) {
 8000bfa:	4b2f      	ldr	r3, [pc, #188]	; (8000cb8 <dfuUpdateByRequest+0x1e8>)
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	7853      	ldrb	r3, [r2, #1]
 8000c00:	2b02      	cmp	r3, #2
 8000c02:	d12d      	bne.n	8000c60 <dfuUpdateByRequest+0x190>
            if (pInformation->USBwLengths.w > 0) {
 8000c04:	88d0      	ldrh	r0, [r2, #6]
 8000c06:	b338      	cbz	r0, 8000c58 <dfuUpdateByRequest+0x188>
                /* check that this is not the last possible block */
                userFirmwareLen = uploadBlockLen * pInformation->USBwValue;
 8000c08:	4930      	ldr	r1, [pc, #192]	; (8000ccc <dfuUpdateByRequest+0x1fc>)
 8000c0a:	8852      	ldrh	r2, [r2, #2]
 8000c0c:	880b      	ldrh	r3, [r1, #0]
                if (userAppAddr + userFirmwareLen + uploadBlockLen <= userAppEnd) {
 8000c0e:	4d2e      	ldr	r5, [pc, #184]	; (8000cc8 <dfuUpdateByRequest+0x1f8>)
        /* device expecting further dfu_upload requests */

        if (pInformation->USBbRequest == DFU_UPLOAD) {
            if (pInformation->USBwLengths.w > 0) {
                /* check that this is not the last possible block */
                userFirmwareLen = uploadBlockLen * pInformation->USBwValue;
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	4353      	muls	r3, r2
 8000c14:	4a29      	ldr	r2, [pc, #164]	; (8000cbc <dfuUpdateByRequest+0x1ec>)
                if (userAppAddr + userFirmwareLen + uploadBlockLen <= userAppEnd) {
 8000c16:	4e2f      	ldr	r6, [pc, #188]	; (8000cd4 <dfuUpdateByRequest+0x204>)
        /* device expecting further dfu_upload requests */

        if (pInformation->USBbRequest == DFU_UPLOAD) {
            if (pInformation->USBwLengths.w > 0) {
                /* check that this is not the last possible block */
                userFirmwareLen = uploadBlockLen * pInformation->USBwValue;
 8000c18:	6013      	str	r3, [r2, #0]
                if (userAppAddr + userFirmwareLen + uploadBlockLen <= userAppEnd) {
 8000c1a:	682f      	ldr	r7, [r5, #0]
 8000c1c:	f8d2 8000 	ldr.w	r8, [r2]
 8000c20:	f8b1 c000 	ldrh.w	ip, [r1]
 8000c24:	4447      	add	r7, r8
 8000c26:	6833      	ldr	r3, [r6, #0]
 8000c28:	fa1f fc8c 	uxth.w	ip, ip
 8000c2c:	4467      	add	r7, ip
 8000c2e:	429f      	cmp	r7, r3
 8000c30:	4b27      	ldr	r3, [pc, #156]	; (8000cd0 <dfuUpdateByRequest+0x200>)
 8000c32:	d803      	bhi.n	8000c3c <dfuUpdateByRequest+0x16c>
                    thisBlockLen = uploadBlockLen;
 8000c34:	880a      	ldrh	r2, [r1, #0]
 8000c36:	b292      	uxth	r2, r2
 8000c38:	801a      	strh	r2, [r3, #0]
 8000c3a:	e019      	b.n	8000c70 <dfuUpdateByRequest+0x1a0>
                    dfuAppStatus.bState  = dfuUPLOAD_IDLE;
                } else {
                    /* if above comparison was just equal, thisBlockLen becomes zero
                    next time when USBWValue has been increased by one */
                    thisBlockLen = userAppEnd - userAppAddr - userFirmwareLen;
 8000c3c:	6836      	ldr	r6, [r6, #0]
 8000c3e:	682d      	ldr	r5, [r5, #0]
 8000c40:	6811      	ldr	r1, [r2, #0]
 8000c42:	1b72      	subs	r2, r6, r5
 8000c44:	1a52      	subs	r2, r2, r1
 8000c46:	b292      	uxth	r2, r2
 8000c48:	801a      	strh	r2, [r3, #0]
                    /* check for overflow due to USBwValue out of range */
                    if (thisBlockLen >= pInformation->USBwLengths.w) {
 8000c4a:	881a      	ldrh	r2, [r3, #0]
 8000c4c:	b292      	uxth	r2, r2
 8000c4e:	4282      	cmp	r2, r0
 8000c50:	d308      	bcc.n	8000c64 <dfuUpdateByRequest+0x194>
                        thisBlockLen = 0;
 8000c52:	2200      	movs	r2, #0
 8000c54:	801a      	strh	r2, [r3, #0]
 8000c56:	e005      	b.n	8000c64 <dfuUpdateByRequest+0x194>
                    }
                    dfuAppStatus.bState  = dfuIDLE;
                }
            } else {
                dfuAppStatus.bState  = dfuERROR;
 8000c58:	230a      	movs	r3, #10
 8000c5a:	7123      	strb	r3, [r4, #4]
                dfuAppStatus.bStatus = errNOTDONE;
 8000c5c:	2309      	movs	r3, #9
 8000c5e:	e01e      	b.n	8000c9e <dfuUpdateByRequest+0x1ce>
            }
        } else if (pInformation->USBbRequest == DFU_ABORT) {
 8000c60:	2b06      	cmp	r3, #6
 8000c62:	d101      	bne.n	8000c68 <dfuUpdateByRequest+0x198>
            dfuAppStatus.bState  = dfuIDLE;
 8000c64:	2302      	movs	r3, #2
 8000c66:	e00d      	b.n	8000c84 <dfuUpdateByRequest+0x1b4>
        } else if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8000c68:	2b03      	cmp	r3, #3
 8000c6a:	d001      	beq.n	8000c70 <dfuUpdateByRequest+0x1a0>
            dfuAppStatus.bState  = dfuUPLOAD_IDLE;
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 8000c6c:	2b05      	cmp	r3, #5
 8000c6e:	d113      	bne.n	8000c98 <dfuUpdateByRequest+0x1c8>
            dfuAppStatus.bState  = dfuUPLOAD_IDLE;
 8000c70:	2309      	movs	r3, #9
 8000c72:	e007      	b.n	8000c84 <dfuUpdateByRequest+0x1b4>
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }


    } else if (startState == dfuERROR)               {
 8000c74:	2b0a      	cmp	r3, #10
 8000c76:	d10f      	bne.n	8000c98 <dfuUpdateByRequest+0x1c8>
        /* status is in error, awaiting DFU_CLRSTATUS request */

        if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8000c78:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <dfuUpdateByRequest+0x1e8>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	785b      	ldrb	r3, [r3, #1]
 8000c7e:	2b03      	cmp	r3, #3
 8000c80:	d102      	bne.n	8000c88 <dfuUpdateByRequest+0x1b8>
            /* todo, add routine to wait for last block write to finish */
            dfuAppStatus.bState  = dfuERROR;
 8000c82:	230a      	movs	r3, #10
 8000c84:	7123      	strb	r3, [r4, #4]
 8000c86:	e00b      	b.n	8000ca0 <dfuUpdateByRequest+0x1d0>
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 8000c88:	2b05      	cmp	r3, #5
 8000c8a:	d0fa      	beq.n	8000c82 <dfuUpdateByRequest+0x1b2>
            dfuAppStatus.bState  = dfuERROR;
        } else if (pInformation->USBbRequest == DFU_CLRSTATUS) {
 8000c8c:	2b04      	cmp	r3, #4
 8000c8e:	d103      	bne.n	8000c98 <dfuUpdateByRequest+0x1c8>
            /* todo handle any cleanup we need here */
            dfuAppStatus.bState  = dfuIDLE;
 8000c90:	2302      	movs	r3, #2
 8000c92:	7123      	strb	r3, [r4, #4]
            dfuAppStatus.bStatus = OK;
 8000c94:	2300      	movs	r3, #0
 8000c96:	e002      	b.n	8000c9e <dfuUpdateByRequest+0x1ce>
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }

    } else {
        /* some kind of error... */
        dfuAppStatus.bState  = dfuERROR;
 8000c98:	230a      	movs	r3, #10
 8000c9a:	7123      	strb	r3, [r4, #4]
        dfuAppStatus.bStatus = errSTALLEDPKT;
 8000c9c:	230f      	movs	r3, #15
 8000c9e:	7023      	strb	r3, [r4, #0]
    }

    if (dfuAppStatus.bStatus == OK) {
 8000ca0:	7820      	ldrb	r0, [r4, #0]
        return TRUE;
    } else {
        return FALSE;
    }
}
 8000ca2:	f1d0 0001 	rsbs	r0, r0, #1
 8000ca6:	bf38      	it	cc
 8000ca8:	2000      	movcc	r0, #0
 8000caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000a1f 	andcs	r0, r0, pc, lsl sl
 8000cb4:	20000a19 	andcs	r0, r0, r9, lsl sl
 8000cb8:	20000200 	andcs	r0, r0, r0, lsl #4
 8000cbc:	20000a14 	andcs	r0, r0, r4, lsl sl
 8000cc0:	20000a18 	andcs	r0, r0, r8, lsl sl
 8000cc4:	08002000 	stmdaeq	r0, {sp}
 8000cc8:	200001c0 	andcs	r0, r0, r0, asr #3
 8000ccc:	20000a10 	andcs	r0, r0, r0, lsl sl
 8000cd0:	20000a12 	andcs	r0, r0, r2, lsl sl
 8000cd4:	200001bc 			; <UNDEFINED> instruction: 0x200001bc
 8000cd8:	200001cc 	andcs	r0, r0, ip, asr #3

08000cdc <dfuUploadStarted>:
void dfuSetState(u8 newState) {
    dfuAppStatus.bState = newState;
}

bool dfuUploadStarted() {
    return dfuBusy;
 8000cdc:	4b01      	ldr	r3, [pc, #4]	; (8000ce4 <dfuUploadStarted+0x8>)
 8000cde:	7818      	ldrb	r0, [r3, #0]
}
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	20000a1f 	andcs	r0, r0, pc, lsl sl

08000ce8 <dfuFinishUpload>:

void dfuFinishUpload() {
    while (1)
    {
        __asm("nop");
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <dfuFinishUpload>

08000cec <SetEPTxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(u8 bEpNum, u16 wState)
{
  _SetEPTxStatus(bEpNum, wState);
 8000cec:	0080      	lsls	r0, r0, #2
 8000cee:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8000cf2:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8000cf6:	6803      	ldr	r3, [r0, #0]
 8000cf8:	06ca      	lsls	r2, r1, #27
 8000cfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000cfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	bf48      	it	mi
 8000d06:	f083 0310 	eormi.w	r3, r3, #16
 8000d0a:	068a      	lsls	r2, r1, #26
 8000d0c:	bf48      	it	mi
 8000d0e:	f083 0320 	eormi.w	r3, r3, #32
 8000d12:	6003      	str	r3, [r0, #0]
 8000d14:	4770      	bx	lr

08000d16 <SetEPRxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(u8 bEpNum)
{
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 8000d16:	0080      	lsls	r0, r0, #2
 8000d18:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8000d1c:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8000d20:	6803      	ldr	r3, [r0, #0]
 8000d22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000d30:	6003      	str	r3, [r0, #0]
 8000d32:	4770      	bx	lr

08000d34 <Clear_Status_Out>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Clear_Status_Out(u8 bEpNum)
{
  _ClearEP_KIND(bEpNum);
 8000d34:	0080      	lsls	r0, r0, #2
 8000d36:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8000d3a:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8000d3e:	6803      	ldr	r3, [r0, #0]
 8000d40:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8000d44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d48:	041b      	lsls	r3, r3, #16
 8000d4a:	0c1b      	lsrs	r3, r3, #16
 8000d4c:	6003      	str	r3, [r0, #0]
 8000d4e:	4770      	bx	lr

08000d50 <ClearDTOG_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(u8 bEpNum)
{
  _ClearDTOG_RX(bEpNum);
 8000d50:	0080      	lsls	r0, r0, #2
 8000d52:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8000d56:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8000d5a:	6803      	ldr	r3, [r0, #0]
 8000d5c:	045b      	lsls	r3, r3, #17
 8000d5e:	d506      	bpl.n	8000d6e <ClearDTOG_RX+0x1e>
 8000d60:	6802      	ldr	r2, [r0, #0]
 8000d62:	f648 738f 	movw	r3, #36751	; 0x8f8f
 8000d66:	4013      	ands	r3, r2
 8000d68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d6c:	6003      	str	r3, [r0, #0]
 8000d6e:	4770      	bx	lr

08000d70 <ClearDTOG_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(u8 bEpNum)
{
  _ClearDTOG_TX(bEpNum);
 8000d70:	0080      	lsls	r0, r0, #2
 8000d72:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8000d76:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8000d7a:	6803      	ldr	r3, [r0, #0]
 8000d7c:	065b      	lsls	r3, r3, #25
 8000d7e:	d506      	bpl.n	8000d8e <ClearDTOG_TX+0x1e>
 8000d80:	6802      	ldr	r2, [r0, #0]
 8000d82:	f648 738f 	movw	r3, #36751	; 0x8f8f
 8000d86:	4013      	ands	r3, r2
 8000d88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d8c:	6003      	str	r3, [r0, #0]
 8000d8e:	4770      	bx	lr

08000d90 <GetEPTxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
u16 GetEPTxAddr(u8 bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 8000d90:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <GetEPTxAddr+0x18>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	b29b      	uxth	r3, r3
 8000d96:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8000d9a:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 8000d9e:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 8000da2:	0040      	lsls	r0, r0, #1
}
 8000da4:	8800      	ldrh	r0, [r0, #0]
 8000da6:	4770      	bx	lr
 8000da8:	40005c50 	andmi	r5, r0, r0, asr ip

08000dac <GetEPRxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
u16 GetEPRxAddr(u8 bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 8000dac:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <GetEPRxAddr+0x14>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8000db6:	4b03      	ldr	r3, [pc, #12]	; (8000dc4 <GetEPRxAddr+0x18>)
 8000db8:	4403      	add	r3, r0
 8000dba:	005b      	lsls	r3, r3, #1
}
 8000dbc:	8818      	ldrh	r0, [r3, #0]
 8000dbe:	4770      	bx	lr
 8000dc0:	40005c50 	andmi	r5, r0, r0, asr ip
 8000dc4:	20003004 	andcs	r3, r0, r4

08000dc8 <SetEPTxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(u8 bEpNum, u16 wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 8000dc8:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <SetEPTxCount+0x14>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8000dd2:	4b03      	ldr	r3, [pc, #12]	; (8000de0 <SetEPTxCount+0x18>)
 8000dd4:	4403      	add	r3, r0
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	6019      	str	r1, [r3, #0]
 8000dda:	4770      	bx	lr
 8000ddc:	40005c50 	andmi	r5, r0, r0, asr ip
 8000de0:	20003002 	andcs	r3, r0, r2

08000de4 <SetEPRxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(u8 bEpNum, u16 wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 8000de4:	4b0d      	ldr	r3, [pc, #52]	; (8000e1c <SetEPRxCount+0x38>)
 8000de6:	293e      	cmp	r1, #62	; 0x3e
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8000df0:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <SetEPRxCount+0x3c>)
 8000df2:	4403      	add	r3, r0
 8000df4:	ea4f 0243 	mov.w	r2, r3, lsl #1
 8000df8:	d909      	bls.n	8000e0e <SetEPRxCount+0x2a>
 8000dfa:	094b      	lsrs	r3, r1, #5
 8000dfc:	06c8      	lsls	r0, r1, #27
 8000dfe:	bf04      	itt	eq
 8000e00:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
 8000e04:	b29b      	uxtheq	r3, r3
 8000e06:	029b      	lsls	r3, r3, #10
 8000e08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e0c:	e004      	b.n	8000e18 <SetEPRxCount+0x34>
 8000e0e:	084b      	lsrs	r3, r1, #1
 8000e10:	07c9      	lsls	r1, r1, #31
 8000e12:	bf48      	it	mi
 8000e14:	3301      	addmi	r3, #1
 8000e16:	029b      	lsls	r3, r3, #10
 8000e18:	6013      	str	r3, [r2, #0]
 8000e1a:	4770      	bx	lr
 8000e1c:	40005c50 	andmi	r5, r0, r0, asr ip
 8000e20:	20003006 	andcs	r3, r0, r6

08000e24 <CTR_LP>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
 8000e24:	b570      	push	{r4, r5, r6, lr}
  u32 wEPVal = 0;
  /* stay in loop while pending ints */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8000e26:	4a4c      	ldr	r2, [pc, #304]	; (8000f58 <CTR_LP+0x134>)
 8000e28:	4b4c      	ldr	r3, [pc, #304]	; (8000f5c <CTR_LP+0x138>)
 8000e2a:	6811      	ldr	r1, [r2, #0]
 8000e2c:	b288      	uxth	r0, r1
 8000e2e:	040c      	lsls	r4, r1, #16
 8000e30:	8018      	strh	r0, [r3, #0]
 8000e32:	f140 8090 	bpl.w	8000f56 <CTR_LP+0x132>
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
 8000e36:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8000e3a:	6011      	str	r1, [r2, #0]
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
 8000e3c:	881a      	ldrh	r2, [r3, #0]
 8000e3e:	4c48      	ldr	r4, [pc, #288]	; (8000f60 <CTR_LP+0x13c>)
 8000e40:	f002 020f 	and.w	r2, r2, #15
 8000e44:	7022      	strb	r2, [r4, #0]
    if (EPindex == 0)
 8000e46:	2a00      	cmp	r2, #0
 8000e48:	d15f      	bne.n	8000f0a <CTR_LP+0xe6>
      /* calling related service routine */
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      SaveRState = _GetEPRxStatus(ENDP0);
 8000e4a:	4c46      	ldr	r4, [pc, #280]	; (8000f64 <CTR_LP+0x140>)
 8000e4c:	4d46      	ldr	r5, [pc, #280]	; (8000f68 <CTR_LP+0x144>)
 8000e4e:	6822      	ldr	r2, [r4, #0]
      SaveTState = _GetEPTxStatus(ENDP0);
 8000e50:	4e46      	ldr	r6, [pc, #280]	; (8000f6c <CTR_LP+0x148>)
      /* calling related service routine */
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      SaveRState = _GetEPRxStatus(ENDP0);
 8000e52:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8000e56:	802a      	strh	r2, [r5, #0]
      SaveTState = _GetEPTxStatus(ENDP0);
 8000e58:	6822      	ldr	r2, [r4, #0]
 8000e5a:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8000e5e:	8032      	strh	r2, [r6, #0]
      _SetEPRxStatus(ENDP0, EP_RX_NAK);
 8000e60:	6822      	ldr	r2, [r4, #0]
 8000e62:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000e66:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000e6a:	b292      	uxth	r2, r2
 8000e6c:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8000e70:	6022      	str	r2, [r4, #0]
      _SetEPTxStatus(ENDP0, EP_TX_NAK);
 8000e72:	6822      	ldr	r2, [r4, #0]
 8000e74:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000e78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e7c:	b292      	uxth	r2, r2
 8000e7e:	f082 0220 	eor.w	r2, r2, #32
 8000e82:	6022      	str	r2, [r4, #0]


      /* DIR bit = origin of the interrupt */

      if ((wIstr & ISTR_DIR) == 0)
 8000e84:	881b      	ldrh	r3, [r3, #0]
 8000e86:	06d8      	lsls	r0, r3, #27
 8000e88:	d502      	bpl.n	8000e90 <CTR_LP+0x6c>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */

        wEPVal = _GetENDPOINT(ENDP0);
 8000e8a:	6823      	ldr	r3, [r4, #0]
        if ((wEPVal & EP_CTR_TX) != 0)
 8000e8c:	0619      	lsls	r1, r3, #24
 8000e8e:	d507      	bpl.n	8000ea0 <CTR_LP+0x7c>
        {
          _ClearEP_CTR_TX(ENDP0);
 8000e90:	6822      	ldr	r2, [r4, #0]
 8000e92:	f648 730f 	movw	r3, #36623	; 0x8f0f
 8000e96:	4013      	ands	r3, r2
 8000e98:	6023      	str	r3, [r4, #0]
          In0_Process();
 8000e9a:	f000 fc61 	bl	8001760 <In0_Process>
 8000e9e:	e012      	b.n	8000ec6 <CTR_LP+0xa2>
          /* before terminate set Tx & Rx status */
          _SetEPRxStatus(ENDP0, SaveRState);
          _SetEPTxStatus(ENDP0, SaveTState);
          return;
        }
        else if ((wEPVal &EP_SETUP) != 0)
 8000ea0:	051a      	lsls	r2, r3, #20
 8000ea2:	d507      	bpl.n	8000eb4 <CTR_LP+0x90>
        {
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 8000ea4:	6822      	ldr	r2, [r4, #0]
 8000ea6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8000eaa:	4013      	ands	r3, r2
 8000eac:	6023      	str	r3, [r4, #0]
          Setup0_Process();
 8000eae:	f000 fa69 	bl	8001384 <Setup0_Process>
 8000eb2:	e008      	b.n	8000ec6 <CTR_LP+0xa2>
          _SetEPRxStatus(ENDP0, SaveRState);
          _SetEPTxStatus(ENDP0, SaveTState);
          return;
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
 8000eb4:	0418      	lsls	r0, r3, #16
 8000eb6:	d5b6      	bpl.n	8000e26 <CTR_LP+0x2>
        {
          _ClearEP_CTR_RX(ENDP0);
 8000eb8:	6822      	ldr	r2, [r4, #0]
 8000eba:	f640 738f 	movw	r3, #3983	; 0xf8f
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	6023      	str	r3, [r4, #0]
          Out0_Process();
 8000ec2:	f000 fbcd 	bl	8001660 <Out0_Process>
          /* before terminate set Tx & Rx status */
          _SetEPRxStatus(ENDP0, SaveRState);
 8000ec6:	6823      	ldr	r3, [r4, #0]
 8000ec8:	882a      	ldrh	r2, [r5, #0]
 8000eca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	04d1      	lsls	r1, r2, #19
 8000ed6:	bf48      	it	mi
 8000ed8:	f483 5380 	eormi.w	r3, r3, #4096	; 0x1000
 8000edc:	0495      	lsls	r5, r2, #18
 8000ede:	4a21      	ldr	r2, [pc, #132]	; (8000f64 <CTR_LP+0x140>)
 8000ee0:	bf48      	it	mi
 8000ee2:	f483 5300 	eormi.w	r3, r3, #8192	; 0x2000
 8000ee6:	6013      	str	r3, [r2, #0]
          _SetEPTxStatus(ENDP0, SaveTState);
 8000ee8:	6813      	ldr	r3, [r2, #0]
 8000eea:	8831      	ldrh	r1, [r6, #0]
 8000eec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000ef0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	06cc      	lsls	r4, r1, #27
 8000ef8:	bf48      	it	mi
 8000efa:	f083 0310 	eormi.w	r3, r3, #16
 8000efe:	0688      	lsls	r0, r1, #26
 8000f00:	bf48      	it	mi
 8000f02:	f083 0320 	eormi.w	r3, r3, #32
 8000f06:	6013      	str	r3, [r2, #0]
          return;
 8000f08:	bd70      	pop	{r4, r5, r6, pc}
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8000f0a:	0093      	lsls	r3, r2, #2
 8000f0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f10:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8000f14:	681d      	ldr	r5, [r3, #0]
      if ((wEPVal & EP_CTR_RX) != 0)
 8000f16:	0429      	lsls	r1, r5, #16
 8000f18:	d509      	bpl.n	8000f2e <CTR_LP+0x10a>
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 8000f1a:	6818      	ldr	r0, [r3, #0]
 8000f1c:	f640 718f 	movw	r1, #3983	; 0xf8f
 8000f20:	4001      	ands	r1, r0
 8000f22:	6019      	str	r1, [r3, #0]

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 8000f24:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <CTR_LP+0x14c>)
 8000f26:	3a01      	subs	r2, #1
 8000f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f2c:	4798      	blx	r3

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
 8000f2e:	062b      	lsls	r3, r5, #24
 8000f30:	f57f af79 	bpl.w	8000e26 <CTR_LP+0x2>
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 8000f34:	7821      	ldrb	r1, [r4, #0]
 8000f36:	f648 720f 	movw	r2, #36623	; 0x8f0f
 8000f3a:	008b      	lsls	r3, r1, #2
 8000f3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f40:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8000f44:	6818      	ldr	r0, [r3, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 8000f46:	3901      	subs	r1, #1
      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 8000f48:	4002      	ands	r2, r0
 8000f4a:	601a      	str	r2, [r3, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 8000f4c:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <CTR_LP+0x150>)
 8000f4e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000f52:	4798      	blx	r3
 8000f54:	e767      	b.n	8000e26 <CTR_LP+0x2>
 8000f56:	bd70      	pop	{r4, r5, r6, pc}
 8000f58:	40005c44 	andmi	r5, r0, r4, asr #24
 8000f5c:	200001c8 	andcs	r0, r0, r8, asr #3
 8000f60:	200001dc 	ldrdcs	r0, [r0], -ip
 8000f64:	40005c00 	andmi	r5, r0, r0, lsl #24
 8000f68:	200001ce 	andcs	r0, r0, lr, asr #3
 8000f6c:	200001d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 8000f70:	20000050 	andcs	r0, r0, r0, asr r0
 8000f74:	20000034 	andcs	r0, r0, r4, lsr r0

08000f78 <USB_Init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
 8000f78:	b508      	push	{r3, lr}
  pInformation = &Device_Info;
 8000f7a:	4a07      	ldr	r2, [pc, #28]	; (8000f98 <USB_Init+0x20>)
 8000f7c:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <USB_Init+0x24>)
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
  pUser_Standard_Requests = &User_Standard_Requests;
 8000f7e:	4908      	ldr	r1, [pc, #32]	; (8000fa0 <USB_Init+0x28>)
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
 8000f80:	6013      	str	r3, [r2, #0]
  pInformation->ControlState = 2;
 8000f82:	2202      	movs	r2, #2
 8000f84:	721a      	strb	r2, [r3, #8]
  pProperty = &Device_Property;
 8000f86:	4b07      	ldr	r3, [pc, #28]	; (8000fa4 <USB_Init+0x2c>)
 8000f88:	4a07      	ldr	r2, [pc, #28]	; (8000fa8 <USB_Init+0x30>)
 8000f8a:	6013      	str	r3, [r2, #0]
  pUser_Standard_Requests = &User_Standard_Requests;
 8000f8c:	4a07      	ldr	r2, [pc, #28]	; (8000fac <USB_Init+0x34>)
  /* Initialize devices one by one */

  pProperty->Init();
 8000f8e:	681b      	ldr	r3, [r3, #0]
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
  pUser_Standard_Requests = &User_Standard_Requests;
 8000f90:	6011      	str	r1, [r2, #0]
  /* Initialize devices one by one */

  pProperty->Init();
 8000f92:	4798      	blx	r3
 8000f94:	bd08      	pop	{r3, pc}
 8000f96:	bf00      	nop
 8000f98:	20000200 	andcs	r0, r0, r0, lsl #4
 8000f9c:	200001e0 	andcs	r0, r0, r0, ror #3
 8000fa0:	2000006c 	andcs	r0, r0, ip, rrx
 8000fa4:	20000000 	andcs	r0, r0, r0
 8000fa8:	200001d8 	ldrdcs	r0, [r0], -r8
 8000fac:	200001fc 	strdcs	r0, [r0], -ip

08000fb0 <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
u8 *Standard_GetConfiguration(u16 Length)
{
 8000fb0:	b510      	push	{r4, lr}
 8000fb2:	4c06      	ldr	r4, [pc, #24]	; (8000fcc <Standard_GetConfiguration+0x1c>)
  if (Length == 0)
 8000fb4:	b918      	cbnz	r0, 8000fbe <Standard_GetConfiguration+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength =
 8000fb6:	6823      	ldr	r3, [r4, #0]
 8000fb8:	2201      	movs	r2, #1
 8000fba:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_Configuration);
    return 0;
 8000fbc:	bd10      	pop	{r4, pc}
  }
  pUser_Standard_Requests->User_GetConfiguration();
 8000fbe:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <Standard_GetConfiguration+0x20>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4798      	blx	r3
  return (u8 *)&pInformation->Current_Configuration;
 8000fc6:	6820      	ldr	r0, [r4, #0]
 8000fc8:	300a      	adds	r0, #10
}
 8000fca:	bd10      	pop	{r4, pc}
 8000fcc:	20000200 	andcs	r0, r0, r0, lsl #4
 8000fd0:	200001fc 	strdcs	r0, [r0], -ip

08000fd4 <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
u8 *Standard_GetInterface(u16 Length)
{
 8000fd4:	b510      	push	{r4, lr}
 8000fd6:	4c06      	ldr	r4, [pc, #24]	; (8000ff0 <Standard_GetInterface+0x1c>)
  if (Length == 0)
 8000fd8:	b918      	cbnz	r0, 8000fe2 <Standard_GetInterface+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength =
 8000fda:	6823      	ldr	r3, [r4, #0]
 8000fdc:	2201      	movs	r2, #1
 8000fde:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
 8000fe0:	bd10      	pop	{r4, pc}
  }
  pUser_Standard_Requests->User_GetInterface();
 8000fe2:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <Standard_GetInterface+0x20>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	4798      	blx	r3
  return (u8 *)&pInformation->Current_AlternateSetting;
 8000fea:	6820      	ldr	r0, [r4, #0]
 8000fec:	300c      	adds	r0, #12
}
 8000fee:	bd10      	pop	{r4, pc}
 8000ff0:	20000200 	andcs	r0, r0, r0, lsl #4
 8000ff4:	200001fc 	strdcs	r0, [r0], -ip

08000ff8 <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
u8 *Standard_GetStatus(u16 Length)
{
 8000ff8:	b510      	push	{r4, lr}
 8000ffa:	4b20      	ldr	r3, [pc, #128]	; (800107c <Standard_GetStatus+0x84>)
  if (Length == 0)
 8000ffc:	b918      	cbnz	r0, 8001006 <Standard_GetStatus+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2202      	movs	r2, #2
 8001002:	821a      	strh	r2, [r3, #16]
    return 0;
 8001004:	bd10      	pop	{r4, pc}
  }

  StatusInfo.w = 0;
 8001006:	4a1e      	ldr	r2, [pc, #120]	; (8001080 <Standard_GetStatus+0x88>)
  /* Reset Status Information */

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001008:	6819      	ldr	r1, [r3, #0]
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  StatusInfo.w = 0;
 800100a:	2000      	movs	r0, #0
 800100c:	8010      	strh	r0, [r2, #0]
  /* Reset Status Information */

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800100e:	780c      	ldrb	r4, [r1, #0]
 8001010:	4613      	mov	r3, r2
 8001012:	f014 047f 	ands.w	r4, r4, #127	; 0x7f
 8001016:	d10d      	bne.n	8001034 <Standard_GetStatus+0x3c>
  {
    /*Get Device Status */
    u8 Feature = pInformation->Current_Feature;
 8001018:	7a4a      	ldrb	r2, [r1, #9]

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
 800101a:	0691      	lsls	r1, r2, #26
    {
      SetBit(StatusInfo0, 1);
 800101c:	bf44      	itt	mi
 800101e:	2102      	movmi	r1, #2
 8001020:	7019      	strbmi	r1, [r3, #0]
    }

    /* Bus-powered */
    if (ValBit(Feature, 6))
 8001022:	f012 0f40 	tst.w	r2, #64	; 0x40
    {
      ClrBit(StatusInfo0, 0);
 8001026:	781a      	ldrb	r2, [r3, #0]
 8001028:	bf14      	ite	ne
 800102a:	f022 0201 	bicne.w	r2, r2, #1
    }
    else /* Self-powered */
    {
      SetBit(StatusInfo0, 0);
 800102e:	f042 0201 	orreq.w	r2, r2, #1
 8001032:	e014      	b.n	800105e <Standard_GetStatus+0x66>
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8001034:	2c01      	cmp	r4, #1
 8001036:	d01f      	beq.n	8001078 <Standard_GetStatus+0x80>
  {
    return (u8 *)&StatusInfo;
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8001038:	2c02      	cmp	r4, #2
 800103a:	d11e      	bne.n	800107a <Standard_GetStatus+0x82>
  {
    u8 Related_Endpoint;
    u8 wIndex0 = pInformation->USBwIndex0;
 800103c:	7909      	ldrb	r1, [r1, #4]

    Related_Endpoint = (wIndex0 & 0x0f);
 800103e:	f001 020f 	and.w	r2, r1, #15
 8001042:	0092      	lsls	r2, r2, #2
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8001044:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001048:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
  {
    u8 Related_Endpoint;
    u8 wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 800104c:	f011 0f80 	tst.w	r1, #128	; 0x80
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8001050:	6812      	ldr	r2, [r2, #0]
  {
    u8 Related_Endpoint;
    u8 wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 8001052:	d006      	beq.n	8001062 <Standard_GetStatus+0x6a>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8001054:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8001058:	2a10      	cmp	r2, #16
 800105a:	d107      	bne.n	800106c <Standard_GetStatus+0x74>
      {
        SetBit(StatusInfo0, 0); /* IN Endpoint stalled */
 800105c:	2201      	movs	r2, #1
 800105e:	701a      	strb	r2, [r3, #0]
 8001060:	e004      	b.n	800106c <Standard_GetStatus+0x74>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 8001062:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8001066:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800106a:	e7f6      	b.n	800105a <Standard_GetStatus+0x62>
  }
  else
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <Standard_GetStatus+0x8c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	691b      	ldr	r3, [r3, #16]
 8001072:	4798      	blx	r3
  return (u8 *)&StatusInfo;
 8001074:	4802      	ldr	r0, [pc, #8]	; (8001080 <Standard_GetStatus+0x88>)
 8001076:	bd10      	pop	{r4, pc}
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
  {
    return (u8 *)&StatusInfo;
 8001078:	4610      	mov	r0, r2
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
  return (u8 *)&StatusInfo;
}
 800107a:	bd10      	pop	{r4, pc}
 800107c:	20000200 	andcs	r0, r0, r0, lsl #4
 8001080:	20000206 	andcs	r0, r0, r6, lsl #4
 8001084:	200001fc 	strdcs	r0, [r0], -ip

08001088 <DataStageIn>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 8001088:	4a23      	ldr	r2, [pc, #140]	; (8001118 <DataStageIn+0x90>)
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 800108a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 800108e:	6814      	ldr	r4, [r2, #0]
 8001090:	4690      	mov	r8, r2
  u32 save_wLength = pEPinfo->Usb_wLength;
 8001092:	8a23      	ldrh	r3, [r4, #16]
  u32 ControlState = pInformation->ControlState;
 8001094:	7a26      	ldrb	r6, [r4, #8]
 8001096:	4f21      	ldr	r7, [pc, #132]	; (800111c <DataStageIn+0x94>)

  u8 *DataBuffer;
  u32 Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 8001098:	b9a3      	cbnz	r3, 80010c4 <DataStageIn+0x3c>
 800109a:	2e04      	cmp	r6, #4
 800109c:	d112      	bne.n	80010c4 <DataStageIn+0x3c>
  {
    if(Data_Mul_MaxPacketSize == TRUE)
 800109e:	4920      	ldr	r1, [pc, #128]	; (8001120 <DataStageIn+0x98>)
 80010a0:	780a      	ldrb	r2, [r1, #0]
 80010a2:	2a01      	cmp	r2, #1
 80010a4:	d10a      	bne.n	80010bc <DataStageIn+0x34>
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 80010a6:	4a1f      	ldr	r2, [pc, #124]	; (8001124 <DataStageIn+0x9c>)
 80010a8:	6810      	ldr	r0, [r2, #0]
 80010aa:	4a1f      	ldr	r2, [pc, #124]	; (8001128 <DataStageIn+0xa0>)
 80010ac:	b280      	uxth	r0, r0
 80010ae:	4402      	add	r2, r0
 80010b0:	0052      	lsls	r2, r2, #1
 80010b2:	6013      	str	r3, [r2, #0]
 80010b4:	2230      	movs	r2, #48	; 0x30
 80010b6:	803a      	strh	r2, [r7, #0]
      ControlState = LAST_IN_DATA;
      Data_Mul_MaxPacketSize = FALSE;
 80010b8:	700b      	strb	r3, [r1, #0]
 80010ba:	e027      	b.n	800110c <DataStageIn+0x84>
    }
    else
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
      vSetEPTxStatus(EP_TX_STALL);
 80010bc:	2310      	movs	r3, #16
 80010be:	803b      	strh	r3, [r7, #0]
      Data_Mul_MaxPacketSize = FALSE;
    }
    else
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
 80010c0:	2607      	movs	r6, #7
 80010c2:	e023      	b.n	800110c <DataStageIn+0x84>
    }

    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 80010c4:	8aa5      	ldrh	r5, [r4, #20]
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 80010c6:	42ab      	cmp	r3, r5
 80010c8:	bf8c      	ite	hi
 80010ca:	2602      	movhi	r6, #2
 80010cc:	2604      	movls	r6, #4
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 80010ce:	429d      	cmp	r5, r3
 80010d0:	bf28      	it	cs
 80010d2:	461d      	movcs	r5, r3
 80010d4:	4628      	mov	r0, r5
 80010d6:	69a3      	ldr	r3, [r4, #24]
 80010d8:	4798      	blx	r3
 80010da:	4681      	mov	r9, r0

  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 80010dc:	2000      	movs	r0, #0
 80010de:	f7ff fe57 	bl	8000d90 <GetEPTxAddr>
 80010e2:	462a      	mov	r2, r5
 80010e4:	4601      	mov	r1, r0
 80010e6:	4648      	mov	r0, r9
 80010e8:	f000 fb68 	bl	80017bc <UserToPMABufferCopy>

  SetEPTxCount(ENDP0, Length);
 80010ec:	4629      	mov	r1, r5
 80010ee:	2000      	movs	r0, #0
 80010f0:	f7ff fe6a 	bl	8000dc8 <SetEPTxCount>

  pEPinfo->Usb_wLength -= Length;
 80010f4:	8a23      	ldrh	r3, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 80010f6:	f44f 5240 	mov.w	r2, #12288	; 0x3000

  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
 80010fa:	1b5b      	subs	r3, r3, r5
 80010fc:	8223      	strh	r3, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
 80010fe:	8a63      	ldrh	r3, [r4, #18]
 8001100:	441d      	add	r5, r3
  vSetEPTxStatus(EP_TX_VALID);
 8001102:	2330      	movs	r3, #48	; 0x30
 8001104:	803b      	strh	r3, [r7, #0]

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <DataStageIn+0xa4>)
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
 8001108:	8265      	strh	r5, [r4, #18]
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 800110a:	801a      	strh	r2, [r3, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 800110c:	f8d8 3000 	ldr.w	r3, [r8]
 8001110:	721e      	strb	r6, [r3, #8]
 8001112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001116:	bf00      	nop
 8001118:	20000200 	andcs	r0, r0, r0, lsl #4
 800111c:	200001d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 8001120:	20000a20 	andcs	r0, r0, r0, lsr #20
 8001124:	40005c50 	andmi	r5, r0, r0, asr ip
 8001128:	20003002 	andcs	r3, r0, r2
 800112c:	200001ce 	andcs	r0, r0, lr, asr #3

08001130 <Standard_SetConfiguration>:
* Output         : None.
* Return         : Return USB_SUCCESS, if the request is performed.
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{
 8001130:	b510      	push	{r4, lr}

  if ((pInformation->USBwValue0 <=
 8001132:	4b0a      	ldr	r3, [pc, #40]	; (800115c <Standard_SetConfiguration+0x2c>)
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 8001134:	490a      	ldr	r1, [pc, #40]	; (8001160 <Standard_SetConfiguration+0x30>)
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{

  if ((pInformation->USBwValue0 <=
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	7849      	ldrb	r1, [r1, #1]
 800113a:	789a      	ldrb	r2, [r3, #2]
 800113c:	4291      	cmp	r1, r2
 800113e:	d30a      	bcc.n	8001156 <Standard_SetConfiguration+0x26>
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 8001140:	78d9      	ldrb	r1, [r3, #3]
 8001142:	b941      	cbnz	r1, 8001156 <Standard_SetConfiguration+0x26>
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 8001144:	889c      	ldrh	r4, [r3, #4]
 8001146:	b934      	cbnz	r4, 8001156 <Standard_SetConfiguration+0x26>
  {
    pInformation->Current_Configuration = pInformation->USBwValue0;
 8001148:	729a      	strb	r2, [r3, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <Standard_SetConfiguration+0x34>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	4798      	blx	r3
    return USB_SUCCESS;
 8001152:	4620      	mov	r0, r4
 8001154:	bd10      	pop	{r4, pc}
  }
  else
  {
    return USB_UNSUPPORT;
 8001156:	2002      	movs	r0, #2
  }
}
 8001158:	bd10      	pop	{r4, pc}
 800115a:	bf00      	nop
 800115c:	20000200 	andcs	r0, r0, r0, lsl #4
 8001160:	20000090 	mulcs	r0, r0, r0
 8001164:	200001fc 	strdcs	r0, [r0], -ip

08001168 <Standard_SetInterface>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetInterface(void)
{
 8001168:	b538      	push	{r3, r4, r5, lr}
  RESULT Re;
  /*Test if the specified Interface and Alternate Setting are supported by
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 800116a:	4a0e      	ldr	r2, [pc, #56]	; (80011a4 <Standard_SetInterface+0x3c>)
 800116c:	4c0e      	ldr	r4, [pc, #56]	; (80011a8 <Standard_SetInterface+0x40>)
 800116e:	6812      	ldr	r2, [r2, #0]
 8001170:	6823      	ldr	r3, [r4, #0]
 8001172:	6992      	ldr	r2, [r2, #24]
 8001174:	7918      	ldrb	r0, [r3, #4]
 8001176:	7899      	ldrb	r1, [r3, #2]
 8001178:	4790      	blx	r2

  if (pInformation->Current_Configuration != 0)
 800117a:	6823      	ldr	r3, [r4, #0]
 800117c:	7a9a      	ldrb	r2, [r3, #10]
 800117e:	b17a      	cbz	r2, 80011a0 <Standard_SetInterface+0x38>
  {
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 8001180:	b970      	cbnz	r0, 80011a0 <Standard_SetInterface+0x38>
 8001182:	795a      	ldrb	r2, [r3, #5]
 8001184:	b962      	cbnz	r2, 80011a0 <Standard_SetInterface+0x38>
        || (pInformation->USBwValue1 != 0))
 8001186:	78dd      	ldrb	r5, [r3, #3]
 8001188:	b955      	cbnz	r5, 80011a0 <Standard_SetInterface+0x38>
    {
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
 800118a:	4b08      	ldr	r3, [pc, #32]	; (80011ac <Standard_SetInterface+0x44>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	4798      	blx	r3
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8001192:	6823      	ldr	r3, [r4, #0]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
      return USB_SUCCESS;
 8001194:	4628      	mov	r0, r5
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8001196:	791a      	ldrb	r2, [r3, #4]
 8001198:	72da      	strb	r2, [r3, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 800119a:	789a      	ldrb	r2, [r3, #2]
 800119c:	731a      	strb	r2, [r3, #12]
      return USB_SUCCESS;
 800119e:	bd38      	pop	{r3, r4, r5, pc}
    }

  }

  return USB_UNSUPPORT;
 80011a0:	2002      	movs	r0, #2
}
 80011a2:	bd38      	pop	{r3, r4, r5, pc}
 80011a4:	200001d8 	ldrdcs	r0, [r0], -r8
 80011a8:	20000200 	andcs	r0, r0, r0, lsl #4
 80011ac:	200001fc 	strdcs	r0, [r0], -ip

080011b0 <Standard_ClearFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_ClearFeature(void)
{
 80011b0:	b538      	push	{r3, r4, r5, lr}
  u32     Type_Rec = Type_Recipient;
 80011b2:	4b2f      	ldr	r3, [pc, #188]	; (8001270 <Standard_ClearFeature+0xc0>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	7818      	ldrb	r0, [r3, #0]
  u32     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80011b8:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 80011bc:	d104      	bne.n	80011c8 <Standard_ClearFeature+0x18>
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
 80011be:	7a5a      	ldrb	r2, [r3, #9]
 80011c0:	f022 0220 	bic.w	r2, r2, #32
 80011c4:	725a      	strb	r2, [r3, #9]
    return USB_SUCCESS;
 80011c6:	bd38      	pop	{r3, r4, r5, pc}
  }
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 80011c8:	2802      	cmp	r0, #2
 80011ca:	d14e      	bne.n	800126a <Standard_ClearFeature+0xba>
    DEVICE* pDev;
    u32 Related_Endpoint;
    u32 wIndex0;
    u32 rEP;

    if ((pInformation->USBwValue != ENDPOINT_STALL)
 80011cc:	885a      	ldrh	r2, [r3, #2]
 80011ce:	2a00      	cmp	r2, #0
 80011d0:	d14c      	bne.n	800126c <Standard_ClearFeature+0xbc>
        || (pInformation->USBwIndex1 != 0))
 80011d2:	795a      	ldrb	r2, [r3, #5]
 80011d4:	2a00      	cmp	r2, #0
 80011d6:	d149      	bne.n	800126c <Standard_ClearFeature+0xbc>
    {
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
 80011d8:	791a      	ldrb	r2, [r3, #4]
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 80011da:	4d26      	ldr	r5, [pc, #152]	; (8001274 <Standard_ClearFeature+0xc4>)
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
    rEP = wIndex0 & ~0x80;
 80011dc:	f022 0080 	bic.w	r0, r2, #128	; 0x80
 80011e0:	0084      	lsls	r4, r0, #2

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 80011e2:	f104 4180 	add.w	r1, r4, #1073741824	; 0x40000000
 80011e6:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 80011ea:	6809      	ldr	r1, [r1, #0]
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 80011ec:	782d      	ldrb	r5, [r5, #0]
    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
    rEP = wIndex0 & ~0x80;
    Related_Endpoint = ENDP0 + rEP;

    if (ValBit(pInformation->USBwIndex0, 7))
 80011ee:	f012 0f80 	tst.w	r2, #128	; 0x80
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 80011f2:	bf14      	ite	ne
 80011f4:	f001 0130 	andne.w	r1, r1, #48	; 0x30
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 80011f8:	f401 5140 	andeq.w	r1, r1, #12288	; 0x3000
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 80011fc:	42a8      	cmp	r0, r5
 80011fe:	d234      	bcs.n	800126a <Standard_ClearFeature+0xba>
 8001200:	2900      	cmp	r1, #0
 8001202:	d032      	beq.n	800126a <Standard_ClearFeature+0xba>
        || (pInformation->Current_Configuration == 0))
 8001204:	7a9b      	ldrb	r3, [r3, #10]
 8001206:	b383      	cbz	r3, 800126a <Standard_ClearFeature+0xba>


    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 8001208:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800120c:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 8001210:	0612      	lsls	r2, r2, #24
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 8001212:	6823      	ldr	r3, [r4, #0]
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 8001214:	d50c      	bpl.n	8001230 <Standard_ClearFeature+0x80>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 8001216:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800121a:	2b10      	cmp	r3, #16
 800121c:	d11f      	bne.n	800125e <Standard_ClearFeature+0xae>
      {
        ClearDTOG_TX(Related_Endpoint);
 800121e:	b2c4      	uxtb	r4, r0
 8001220:	4620      	mov	r0, r4
 8001222:	f7ff fda5 	bl	8000d70 <ClearDTOG_TX>
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 8001226:	4620      	mov	r0, r4
 8001228:	2130      	movs	r1, #48	; 0x30
 800122a:	f7ff fd5f 	bl	8000cec <SetEPTxStatus>
 800122e:	e016      	b.n	800125e <Standard_ClearFeature+0xae>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 8001230:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001234:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001238:	d111      	bne.n	800125e <Standard_ClearFeature+0xae>
      {
        if (Related_Endpoint == ENDP0)
 800123a:	b928      	cbnz	r0, 8001248 <Standard_ClearFeature+0x98>
        {
          /* After clear the STALL, enable the default endpoint receiver */
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 800123c:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <Standard_ClearFeature+0xc8>)
 800123e:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 8001242:	f7ff fdcf 	bl	8000de4 <SetEPRxCount>
 8001246:	e001      	b.n	800124c <Standard_ClearFeature+0x9c>
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
 8001248:	f7ff fd82 	bl	8000d50 <ClearDTOG_RX>
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 800124c:	6823      	ldr	r3, [r4, #0]
 800124e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001256:	b29b      	uxth	r3, r3
 8001258:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800125c:	6023      	str	r3, [r4, #0]
        }
      }
    }
    pUser_Standard_Requests->User_ClearFeature();
 800125e:	4b07      	ldr	r3, [pc, #28]	; (800127c <Standard_ClearFeature+0xcc>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	4798      	blx	r3
    return USB_SUCCESS;
 8001266:	2000      	movs	r0, #0
 8001268:	bd38      	pop	{r3, r4, r5, pc}
  }

  return USB_UNSUPPORT;
 800126a:	2002      	movs	r0, #2
}
 800126c:	bd38      	pop	{r3, r4, r5, pc}
 800126e:	bf00      	nop
 8001270:	20000200 	andcs	r0, r0, r0, lsl #4
 8001274:	20000090 	mulcs	r0, r0, r0
 8001278:	20000000 	andcs	r0, r0, r0
 800127c:	200001fc 	strdcs	r0, [r0], -ip

08001280 <Standard_SetEndPointFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetEndPointFeature(void)
{
 8001280:	b538      	push	{r3, r4, r5, lr}
  u32    wIndex0;
  u32    Related_Endpoint;
  u32    rEP;
  u32   Status;

  wIndex0 = pInformation->USBwIndex0;
 8001282:	4b1d      	ldr	r3, [pc, #116]	; (80012f8 <Standard_SetEndPointFeature+0x78>)
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8001284:	4d1d      	ldr	r5, [pc, #116]	; (80012fc <Standard_SetEndPointFeature+0x7c>)
  u32    wIndex0;
  u32    Related_Endpoint;
  u32    rEP;
  u32   Status;

  wIndex0 = pInformation->USBwIndex0;
 8001286:	6819      	ldr	r1, [r3, #0]
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8001288:	782d      	ldrb	r5, [r5, #0]
  u32    wIndex0;
  u32    Related_Endpoint;
  u32    rEP;
  u32   Status;

  wIndex0 = pInformation->USBwIndex0;
 800128a:	790a      	ldrb	r2, [r1, #4]
  rEP = wIndex0 & ~0x80;
 800128c:	f022 0480 	bic.w	r4, r2, #128	; 0x80
 8001290:	00a3      	lsls	r3, r4, #2

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8001292:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
 8001296:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800129a:	6800      	ldr	r0, [r0, #0]

  wIndex0 = pInformation->USBwIndex0;
  rEP = wIndex0 & ~0x80;
  Related_Endpoint = ENDP0 + rEP;

  if (ValBit(pInformation->USBwIndex0, 7))
 800129c:	f012 0f80 	tst.w	r2, #128	; 0x80
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 80012a0:	bf14      	ite	ne
 80012a2:	f000 0030 	andne.w	r0, r0, #48	; 0x30
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 80012a6:	f400 5040 	andeq.w	r0, r0, #12288	; 0x3000
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 80012aa:	42ac      	cmp	r4, r5
 80012ac:	d222      	bcs.n	80012f4 <Standard_SetEndPointFeature+0x74>
      || pInformation->USBwValue != 0 || Status == 0
 80012ae:	884c      	ldrh	r4, [r1, #2]
 80012b0:	bb04      	cbnz	r4, 80012f4 <Standard_SetEndPointFeature+0x74>
 80012b2:	b1f8      	cbz	r0, 80012f4 <Standard_SetEndPointFeature+0x74>
      || pInformation->Current_Configuration == 0)
 80012b4:	7a89      	ldrb	r1, [r1, #10]
 80012b6:	b1e9      	cbz	r1, 80012f4 <Standard_SetEndPointFeature+0x74>
  else
  {
    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 80012b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80012bc:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 80012c0:	f012 0f80 	tst.w	r2, #128	; 0x80
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 80012c4:	681a      	ldr	r2, [r3, #0]
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 80012c6:	d007      	beq.n	80012d8 <Standard_SetEndPointFeature+0x58>
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 80012c8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80012cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012d0:	b292      	uxth	r2, r2
 80012d2:	f082 0210 	eor.w	r2, r2, #16
 80012d6:	e006      	b.n	80012e6 <Standard_SetEndPointFeature+0x66>
    }

    else
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 80012d8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80012dc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80012e0:	b292      	uxth	r2, r2
 80012e2:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 80012e6:	601a      	str	r2, [r3, #0]
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
 80012e8:	4b05      	ldr	r3, [pc, #20]	; (8001300 <Standard_SetEndPointFeature+0x80>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	699b      	ldr	r3, [r3, #24]
 80012ee:	4798      	blx	r3
  return USB_SUCCESS;
 80012f0:	2000      	movs	r0, #0
 80012f2:	bd38      	pop	{r3, r4, r5, pc}

  if (Related_Endpoint >= Device_Table.Total_Endpoint
      || pInformation->USBwValue != 0 || Status == 0
      || pInformation->Current_Configuration == 0)
  {
    return USB_UNSUPPORT;
 80012f4:	2002      	movs	r0, #2
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
  return USB_SUCCESS;
}
 80012f6:	bd38      	pop	{r3, r4, r5, pc}
 80012f8:	20000200 	andcs	r0, r0, r0, lsl #4
 80012fc:	20000090 	mulcs	r0, r0, r0
 8001300:	200001fc 	strdcs	r0, [r0], -ip

08001304 <Standard_SetDeviceFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
 8001304:	b508      	push	{r3, lr}
  SetBit(pInformation->Current_Feature, 5);
 8001306:	4b06      	ldr	r3, [pc, #24]	; (8001320 <Standard_SetDeviceFeature+0x1c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	7a5a      	ldrb	r2, [r3, #9]
 800130c:	f042 0220 	orr.w	r2, r2, #32
 8001310:	725a      	strb	r2, [r3, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 8001312:	4b04      	ldr	r3, [pc, #16]	; (8001324 <Standard_SetDeviceFeature+0x20>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	69db      	ldr	r3, [r3, #28]
 8001318:	4798      	blx	r3
  return USB_SUCCESS;
}
 800131a:	2000      	movs	r0, #0
 800131c:	bd08      	pop	{r3, pc}
 800131e:	bf00      	nop
 8001320:	20000200 	andcs	r0, r0, r0, lsl #4
 8001324:	200001fc 	strdcs	r0, [r0], -ip

08001328 <Standard_GetDescriptorData>:
*******************************************************************************/
u8 *Standard_GetDescriptorData(u16 Length, ONE_DESCRIPTOR *pDesc)
{
  u32  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 8001328:	4b05      	ldr	r3, [pc, #20]	; (8001340 <Standard_GetDescriptorData+0x18>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	8a53      	ldrh	r3, [r2, #18]
  if (Length == 0)
 800132e:	b918      	cbnz	r0, 8001338 <Standard_GetDescriptorData+0x10>
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 8001330:	8889      	ldrh	r1, [r1, #4]
 8001332:	1acb      	subs	r3, r1, r3
 8001334:	8213      	strh	r3, [r2, #16]
    return 0;
 8001336:	4770      	bx	lr
  }

  return pDesc->Descriptor + wOffset;
 8001338:	6808      	ldr	r0, [r1, #0]
 800133a:	4418      	add	r0, r3
}
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	20000200 	andcs	r0, r0, r0, lsl #4

08001344 <Post0_Process>:
* Output         : None.
* Return         : - 0 if the control State is in PAUSE
*                  - 1 if not.
*******************************************************************************/
u8 Post0_Process(void)
{
 8001344:	b508      	push	{r3, lr}
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 8001346:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <Post0_Process+0x30>)
 8001348:	2000      	movs	r0, #0
 800134a:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 800134e:	f7ff fd49 	bl	8000de4 <SetEPRxCount>

  if (pInformation->ControlState == STALLED)
 8001352:	4b09      	ldr	r3, [pc, #36]	; (8001378 <Post0_Process+0x34>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	7a18      	ldrb	r0, [r3, #8]
 8001358:	2808      	cmp	r0, #8
 800135a:	d106      	bne.n	800136a <Post0_Process+0x26>
  {
    vSetEPRxStatus(EP_RX_STALL);
 800135c:	4b07      	ldr	r3, [pc, #28]	; (800137c <Post0_Process+0x38>)
 800135e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001362:	801a      	strh	r2, [r3, #0]
    vSetEPTxStatus(EP_TX_STALL);
 8001364:	4b06      	ldr	r3, [pc, #24]	; (8001380 <Post0_Process+0x3c>)
 8001366:	2210      	movs	r2, #16
 8001368:	801a      	strh	r2, [r3, #0]
  }

  return (pInformation->ControlState == PAUSE);
}
 800136a:	f1b0 0309 	subs.w	r3, r0, #9
 800136e:	4258      	negs	r0, r3
 8001370:	4158      	adcs	r0, r3
 8001372:	bd08      	pop	{r3, pc}
 8001374:	20000000 	andcs	r0, r0, r0
 8001378:	20000200 	andcs	r0, r0, r0, lsl #4
 800137c:	200001ce 	andcs	r0, r0, lr, asr #3
 8001380:	200001d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>

08001384 <Setup0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
u8 Setup0_Process(void)
{
 8001384:	b573      	push	{r0, r1, r4, r5, r6, lr}
  {
    u8* b;
    u16* w;
  } pBuf;

  pBuf.b = PMAAddr + (u8 *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8001386:	4e96      	ldr	r6, [pc, #600]	; (80015e0 <Setup0_Process+0x25c>)
 8001388:	4b96      	ldr	r3, [pc, #600]	; (80015e4 <Setup0_Process+0x260>)
 800138a:	6832      	ldr	r2, [r6, #0]

  if (pInformation->ControlState != PAUSE)
 800138c:	4d96      	ldr	r5, [pc, #600]	; (80015e8 <Setup0_Process+0x264>)
 800138e:	b292      	uxth	r2, r2
  {
    u8* b;
    u16* w;
  } pBuf;

  pBuf.b = PMAAddr + (u8 *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8001390:	4413      	add	r3, r2
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	681a      	ldr	r2, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 8001396:	682b      	ldr	r3, [r5, #0]
 8001398:	7a19      	ldrb	r1, [r3, #8]
 800139a:	2909      	cmp	r1, #9
 800139c:	d00f      	beq.n	80013be <Setup0_Process+0x3a>
 800139e:	b292      	uxth	r2, r2
  {
    u8* b;
    u16* w;
  } pBuf;

  pBuf.b = PMAAddr + (u8 *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 80013a0:	0052      	lsls	r2, r2, #1
 80013a2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80013a6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 80013aa:	7811      	ldrb	r1, [r2, #0]
 80013ac:	7019      	strb	r1, [r3, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 80013ae:	7851      	ldrb	r1, [r2, #1]
 80013b0:	7059      	strb	r1, [r3, #1]
    pBuf.w++;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = *pBuf.w++; /* wValue in Little Endian */
 80013b2:	8891      	ldrh	r1, [r2, #4]
 80013b4:	8059      	strh	r1, [r3, #2]
    pBuf.w++;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = *pBuf.w++; /* wIndex in Little Endian */
 80013b6:	8911      	ldrh	r1, [r2, #8]
 80013b8:	8099      	strh	r1, [r3, #4]
    pBuf.w++;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength in Little Endian */
 80013ba:	8992      	ldrh	r2, [r2, #12]
 80013bc:	80da      	strh	r2, [r3, #6]
  }

  pInformation->ControlState = SETTING_UP;
 80013be:	2201      	movs	r2, #1
 80013c0:	721a      	strb	r2, [r3, #8]
  if (pInformation->USBwLength == 0)
 80013c2:	88da      	ldrh	r2, [r3, #6]
 80013c4:	785c      	ldrb	r4, [r3, #1]
 80013c6:	2a00      	cmp	r2, #0
 80013c8:	d161      	bne.n	800148e <Setup0_Process+0x10a>
{
  RESULT Result = USB_UNSUPPORT;
  u32 RequestNo = pInformation->USBbRequest;
  u32 ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80013ca:	781a      	ldrb	r2, [r3, #0]
 80013cc:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
 80013d0:	d13a      	bne.n	8001448 <Setup0_Process+0xc4>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
 80013d2:	2c09      	cmp	r4, #9
 80013d4:	d102      	bne.n	80013dc <Setup0_Process+0x58>
    {
      Result = Standard_SetConfiguration();
 80013d6:	f7ff feab 	bl	8001130 <Standard_SetConfiguration>
 80013da:	e044      	b.n	8001466 <Setup0_Process+0xe2>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
 80013dc:	2c05      	cmp	r4, #5
 80013de:	d10f      	bne.n	8001400 <Setup0_Process+0x7c>
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 80013e0:	f993 2002 	ldrsb.w	r2, [r3, #2]
 80013e4:	2a00      	cmp	r2, #0
 80013e6:	da01      	bge.n	80013ec <Setup0_Process+0x68>
          || (pInformation->USBwIndex != 0)
          || (pInformation->Current_Configuration != 0))
        /* Device Address should be 127 or less*/
      {
        ControlState = STALLED;
 80013e8:	2308      	movs	r3, #8
 80013ea:	e04d      	b.n	8001488 <Setup0_Process+0x104>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 80013ec:	78da      	ldrb	r2, [r3, #3]
 80013ee:	2a00      	cmp	r2, #0
 80013f0:	d1fa      	bne.n	80013e8 <Setup0_Process+0x64>
          || (pInformation->USBwIndex != 0)
 80013f2:	889a      	ldrh	r2, [r3, #4]
 80013f4:	2a00      	cmp	r2, #0
 80013f6:	d1f7      	bne.n	80013e8 <Setup0_Process+0x64>
          || (pInformation->Current_Configuration != 0))
 80013f8:	7a9b      	ldrb	r3, [r3, #10]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d037      	beq.n	800146e <Setup0_Process+0xea>
 80013fe:	e7f3      	b.n	80013e8 <Setup0_Process+0x64>
      {
        Result = USB_SUCCESS;
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
 8001400:	2c03      	cmp	r4, #3
 8001402:	d113      	bne.n	800142c <Setup0_Process+0xa8>
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP)
 8001404:	789a      	ldrb	r2, [r3, #2]
 8001406:	2a01      	cmp	r2, #1
 8001408:	d007      	beq.n	800141a <Setup0_Process+0x96>
  }


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 800140a:	4b78      	ldr	r3, [pc, #480]	; (80015ec <Setup0_Process+0x268>)
 800140c:	4620      	mov	r0, r4
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 8001414:	2803      	cmp	r0, #3
 8001416:	d128      	bne.n	800146a <Setup0_Process+0xe6>
 8001418:	e035      	b.n	8001486 <Setup0_Process+0x102>
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP)
          && (pInformation->USBwIndex == 0)
 800141a:	889a      	ldrh	r2, [r3, #4]
 800141c:	2a00      	cmp	r2, #0
 800141e:	d1f4      	bne.n	800140a <Setup0_Process+0x86>
          && (ValBit(pInformation->Current_Feature, 5)))
 8001420:	7a5b      	ldrb	r3, [r3, #9]
 8001422:	0698      	lsls	r0, r3, #26
 8001424:	d5f1      	bpl.n	800140a <Setup0_Process+0x86>
      {
        Result = Standard_SetDeviceFeature();
 8001426:	f7ff ff6d 	bl	8001304 <Standard_SetDeviceFeature>
 800142a:	e01c      	b.n	8001466 <Setup0_Process+0xe2>
      {
        Result = USB_UNSUPPORT;
      }
    }
    /*Clear FEATURE for Device */
    else if (RequestNo == CLEAR_FEATURE)
 800142c:	2c01      	cmp	r4, #1
 800142e:	d1ec      	bne.n	800140a <Setup0_Process+0x86>
    {
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 8001430:	789a      	ldrb	r2, [r3, #2]
 8001432:	2a01      	cmp	r2, #1
 8001434:	d1e9      	bne.n	800140a <Setup0_Process+0x86>
          && pInformation->USBwIndex == 0
 8001436:	889a      	ldrh	r2, [r3, #4]
 8001438:	2a00      	cmp	r2, #0
 800143a:	d1e6      	bne.n	800140a <Setup0_Process+0x86>
          && ValBit(pInformation->Current_Feature, 5))
 800143c:	7a5b      	ldrb	r3, [r3, #9]
 800143e:	0699      	lsls	r1, r3, #26
 8001440:	d5e3      	bpl.n	800140a <Setup0_Process+0x86>
      {
        Result = Standard_ClearFeature();
 8001442:	f7ff feb5 	bl	80011b0 <Standard_ClearFeature>
 8001446:	e00e      	b.n	8001466 <Setup0_Process+0xe2>
    }

  }

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8001448:	2a01      	cmp	r2, #1
 800144a:	d104      	bne.n	8001456 <Setup0_Process+0xd2>
  {
    /*SET INTERFACE*/
    if (RequestNo == SET_INTERFACE)
 800144c:	2c0b      	cmp	r4, #11
 800144e:	d1dc      	bne.n	800140a <Setup0_Process+0x86>
    {
      Result = Standard_SetInterface();
 8001450:	f7ff fe8a 	bl	8001168 <Standard_SetInterface>
 8001454:	e007      	b.n	8001466 <Setup0_Process+0xe2>
    }
  }

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8001456:	2a02      	cmp	r2, #2
 8001458:	d1d7      	bne.n	800140a <Setup0_Process+0x86>
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
 800145a:	2c01      	cmp	r4, #1
 800145c:	d0f1      	beq.n	8001442 <Setup0_Process+0xbe>
    {
      Result = Standard_ClearFeature();
    }
    /* SET FEATURE for EndPoint*/
    else if (RequestNo == SET_FEATURE)
 800145e:	2c03      	cmp	r4, #3
 8001460:	d1d3      	bne.n	800140a <Setup0_Process+0x86>
    {
      Result = Standard_SetEndPointFeature();
 8001462:	f7ff ff0d 	bl	8001280 <Standard_SetEndPointFeature>
  {
    Result = USB_UNSUPPORT;
  }


  if (Result != USB_SUCCESS)
 8001466:	b110      	cbz	r0, 800146e <Setup0_Process+0xea>
 8001468:	e7cf      	b.n	800140a <Setup0_Process+0x86>
      ControlState = PAUSE;
      goto exit_NoData_Setup0;
    }
  }

  if (Result != USB_SUCCESS)
 800146a:	2800      	cmp	r0, #0
 800146c:	d1bc      	bne.n	80013e8 <Setup0_Process+0x64>
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 800146e:	6832      	ldr	r2, [r6, #0]
 8001470:	4b5f      	ldr	r3, [pc, #380]	; (80015f0 <Setup0_Process+0x26c>)
 8001472:	b292      	uxth	r2, r2
 8001474:	4413      	add	r3, r2
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	4b5d      	ldr	r3, [pc, #372]	; (80015f4 <Setup0_Process+0x270>)
 800147e:	2230      	movs	r2, #48	; 0x30
 8001480:	801a      	strh	r2, [r3, #0]
  {
    ControlState = STALLED;
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */
 8001482:	2306      	movs	r3, #6
 8001484:	e000      	b.n	8001488 <Setup0_Process+0x104>
  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
    if (Result == USB_NOT_READY)
    {
      ControlState = PAUSE;
 8001486:	2309      	movs	r3, #9
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 8001488:	682a      	ldr	r2, [r5, #0]
 800148a:	7213      	strb	r3, [r2, #8]
 800148c:	e0d4      	b.n	8001638 <Setup0_Process+0x2b4>


  CopyRoutine = NULL;
  wOffset = 0;

  if (Request_No == GET_DESCRIPTOR)
 800148e:	2c06      	cmp	r4, #6
 8001490:	d118      	bne.n	80014c4 <Setup0_Process+0x140>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001492:	781a      	ldrb	r2, [r3, #0]
 8001494:	0652      	lsls	r2, r2, #25
 8001496:	d17c      	bne.n	8001592 <Setup0_Process+0x20e>
    {
      u8 wValue1 = pInformation->USBwValue1;
 8001498:	78da      	ldrb	r2, [r3, #3]
 800149a:	4b54      	ldr	r3, [pc, #336]	; (80015ec <Setup0_Process+0x268>)
      if (wValue1 == DEVICE_DESCRIPTOR)
 800149c:	2a01      	cmp	r2, #1
 800149e:	d102      	bne.n	80014a6 <Setup0_Process+0x122>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	69db      	ldr	r3, [r3, #28]
 80014a4:	e06c      	b.n	8001580 <Setup0_Process+0x1fc>
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
 80014a6:	2a02      	cmp	r2, #2
 80014a8:	d102      	bne.n	80014b0 <Setup0_Process+0x12c>
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6a1b      	ldr	r3, [r3, #32]
 80014ae:	e067      	b.n	8001580 <Setup0_Process+0x1fc>
      }
      else if (wValue1 == STRING_DESCRIPTOR)
 80014b0:	2a03      	cmp	r2, #3
 80014b2:	d102      	bne.n	80014ba <Setup0_Process+0x136>
      {
        CopyRoutine = pProperty->GetStringDescriptor;
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b8:	e062      	b.n	8001580 <Setup0_Process+0x1fc>
      } else if (wValue1 == 0x21) /* added to support functional descriptors */
 80014ba:	2a21      	cmp	r2, #33	; 0x21
 80014bc:	d169      	bne.n	8001592 <Setup0_Process+0x20e>
      {
	CopyRoutine = pProperty->GetFunctionalDescriptor;
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c2:	e05d      	b.n	8001580 <Setup0_Process+0x1fc>
      } /* End of GET_DESCRIPTOR */
    }
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 80014c4:	2c00      	cmp	r4, #0
 80014c6:	d13c      	bne.n	8001542 <Setup0_Process+0x1be>
 80014c8:	8859      	ldrh	r1, [r3, #2]
 80014ca:	2900      	cmp	r1, #0
 80014cc:	d161      	bne.n	8001592 <Setup0_Process+0x20e>
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
 80014ce:	685a      	ldr	r2, [r3, #4]
 80014d0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80014d4:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 80014d8:	d15b      	bne.n	8001592 <Setup0_Process+0x20e>
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80014da:	781a      	ldrb	r2, [r3, #0]
 80014dc:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
 80014e0:	d104      	bne.n	80014ec <Setup0_Process+0x168>
        && (pInformation->USBwIndex == 0))
 80014e2:	889b      	ldrh	r3, [r3, #4]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f000 80ab 	beq.w	8001640 <Setup0_Process+0x2bc>
 80014ea:	e052      	b.n	8001592 <Setup0_Process+0x20e>
    {
      CopyRoutine = Standard_GetStatus;
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 80014ec:	2a01      	cmp	r2, #1
 80014ee:	d10c      	bne.n	800150a <Setup0_Process+0x186>
    {
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 80014f0:	4a3e      	ldr	r2, [pc, #248]	; (80015ec <Setup0_Process+0x268>)
 80014f2:	7918      	ldrb	r0, [r3, #4]
 80014f4:	6812      	ldr	r2, [r2, #0]
 80014f6:	6992      	ldr	r2, [r2, #24]
 80014f8:	4790      	blx	r2
 80014fa:	2800      	cmp	r0, #0
 80014fc:	d149      	bne.n	8001592 <Setup0_Process+0x20e>
          && (pInformation->Current_Configuration != 0))
 80014fe:	682b      	ldr	r3, [r5, #0]
 8001500:	7a9b      	ldrb	r3, [r3, #10]
 8001502:	2b00      	cmp	r3, #0
 8001504:	f040 809c 	bne.w	8001640 <Setup0_Process+0x2bc>
 8001508:	e043      	b.n	8001592 <Setup0_Process+0x20e>
        CopyRoutine = Standard_GetStatus;
      }
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800150a:	2a02      	cmp	r2, #2
 800150c:	d141      	bne.n	8001592 <Setup0_Process+0x20e>
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 800150e:	791b      	ldrb	r3, [r3, #4]
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8001510:	4839      	ldr	r0, [pc, #228]	; (80015f8 <Setup0_Process+0x274>)
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 8001512:	f003 010f 	and.w	r1, r3, #15
 8001516:	008a      	lsls	r2, r1, #2

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8001518:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800151c:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8001520:	6812      	ldr	r2, [r2, #0]
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8001522:	7800      	ldrb	r0, [r0, #0]
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
      Reserved = pInformation->USBwIndex0 & 0x70;

      if (ValBit(pInformation->USBwIndex0, 7))
 8001524:	f013 0f80 	tst.w	r3, #128	; 0x80
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8001528:	bf14      	ite	ne
 800152a:	f002 0230 	andne.w	r2, r2, #48	; 0x30
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 800152e:	f402 5240 	andeq.w	r2, r2, #12288	; 0x3000
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8001532:	4281      	cmp	r1, r0
 8001534:	d22d      	bcs.n	8001592 <Setup0_Process+0x20e>
 8001536:	f013 0f70 	tst.w	r3, #112	; 0x70
 800153a:	d12a      	bne.n	8001592 <Setup0_Process+0x20e>
          && (Status != 0))
 800153c:	2a00      	cmp	r2, #0
 800153e:	d17f      	bne.n	8001640 <Setup0_Process+0x2bc>
 8001540:	e027      	b.n	8001592 <Setup0_Process+0x20e>
    }

  }

  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
 8001542:	2c08      	cmp	r4, #8
 8001544:	d103      	bne.n	800154e <Setup0_Process+0x1ca>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	065b      	lsls	r3, r3, #25
 800154a:	d07b      	beq.n	8001644 <Setup0_Process+0x2c0>
 800154c:	e021      	b.n	8001592 <Setup0_Process+0x20e>
    {
      CopyRoutine = Standard_GetConfiguration;
    }
  }
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
 800154e:	2c0a      	cmp	r4, #10
 8001550:	d11f      	bne.n	8001592 <Setup0_Process+0x20e>
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8001552:	781a      	ldrb	r2, [r3, #0]
 8001554:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001558:	2a01      	cmp	r2, #1
 800155a:	d11a      	bne.n	8001592 <Setup0_Process+0x20e>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 800155c:	7a9a      	ldrb	r2, [r3, #10]
 800155e:	b1c2      	cbz	r2, 8001592 <Setup0_Process+0x20e>
 8001560:	8859      	ldrh	r1, [r3, #2]
 8001562:	b9b1      	cbnz	r1, 8001592 <Setup0_Process+0x20e>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 8001564:	685a      	ldr	r2, [r3, #4]
 8001566:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800156a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800156e:	d110      	bne.n	8001592 <Setup0_Process+0x20e>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 8001570:	4a1e      	ldr	r2, [pc, #120]	; (80015ec <Setup0_Process+0x268>)
 8001572:	7918      	ldrb	r0, [r3, #4]
 8001574:	6812      	ldr	r2, [r2, #0]
 8001576:	6992      	ldr	r2, [r2, #24]
 8001578:	4790      	blx	r2
 800157a:	2800      	cmp	r0, #0
 800157c:	d064      	beq.n	8001648 <Setup0_Process+0x2c4>
 800157e:	e008      	b.n	8001592 <Setup0_Process+0x20e>
      CopyRoutine = Standard_GetInterface;
    }

  }

  if (CopyRoutine)
 8001580:	b13b      	cbz	r3, 8001592 <Setup0_Process+0x20e>
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8001582:	682a      	ldr	r2, [r5, #0]
 8001584:	2400      	movs	r4, #0
 8001586:	8254      	strh	r4, [r2, #18]
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8001588:	6193      	str	r3, [r2, #24]
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 800158a:	4620      	mov	r0, r4
 800158c:	4798      	blx	r3
    Result = USB_SUCCESS;
 800158e:	4620      	mov	r0, r4
 8001590:	e00a      	b.n	80015a8 <Setup0_Process+0x224>
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 8001592:	4b16      	ldr	r3, [pc, #88]	; (80015ec <Setup0_Process+0x268>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	682b      	ldr	r3, [r5, #0]
 8001598:	6912      	ldr	r2, [r2, #16]
 800159a:	7858      	ldrb	r0, [r3, #1]
 800159c:	4790      	blx	r2
    if (Result == USB_NOT_READY)
 800159e:	2803      	cmp	r0, #3
 80015a0:	d102      	bne.n	80015a8 <Setup0_Process+0x224>
    {
      pInformation->ControlState = PAUSE;
 80015a2:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <Setup0_Process+0x264>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	e005      	b.n	80015b4 <Setup0_Process+0x230>
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 80015a8:	682b      	ldr	r3, [r5, #0]
 80015aa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80015ae:	8a1a      	ldrh	r2, [r3, #16]
 80015b0:	428a      	cmp	r2, r1
 80015b2:	d101      	bne.n	80015b8 <Setup0_Process+0x234>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
 80015b4:	2209      	movs	r2, #9
 80015b6:	e003      	b.n	80015c0 <Setup0_Process+0x23c>
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 80015b8:	2802      	cmp	r0, #2
 80015ba:	d000      	beq.n	80015be <Setup0_Process+0x23a>
 80015bc:	b912      	cbnz	r2, 80015c4 <Setup0_Process+0x240>
  {
    /* Unsupported request */
    pInformation->ControlState = STALLED;
 80015be:	2208      	movs	r2, #8
 80015c0:	721a      	strb	r2, [r3, #8]
 80015c2:	e039      	b.n	8001638 <Setup0_Process+0x2b4>
    return;
  }


  if (ValBit(pInformation->USBbmRequestType, 7))
 80015c4:	f993 1000 	ldrsb.w	r1, [r3]
 80015c8:	2900      	cmp	r1, #0
 80015ca:	da2f      	bge.n	800162c <Setup0_Process+0x2a8>
  {
    /* Device ==> Host */
    vu32 wLength = pInformation->USBwLength;
 80015cc:	88d9      	ldrh	r1, [r3, #6]
 80015ce:	9101      	str	r1, [sp, #4]

    /* Restrict the data length to be the one host asks */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 80015d0:	9801      	ldr	r0, [sp, #4]
 80015d2:	4282      	cmp	r2, r0
 80015d4:	4805      	ldr	r0, [pc, #20]	; (80015ec <Setup0_Process+0x268>)
 80015d6:	d911      	bls.n	80015fc <Setup0_Process+0x278>
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 80015d8:	9a01      	ldr	r2, [sp, #4]
 80015da:	821a      	strh	r2, [r3, #16]
 80015dc:	e01f      	b.n	800161e <Setup0_Process+0x29a>
 80015de:	bf00      	nop
 80015e0:	40005c50 	andmi	r5, r0, r0, asr ip
 80015e4:	20003004 	andcs	r3, r0, r4
 80015e8:	20000200 	andcs	r0, r0, r0, lsl #4
 80015ec:	200001d8 	ldrdcs	r0, [r0], -r8
 80015f0:	20003002 	andcs	r3, r0, r2
 80015f4:	200001d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 80015f8:	20000090 	mulcs	r0, r0, r0
    }

    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 80015fc:	428a      	cmp	r2, r1
 80015fe:	d20e      	bcs.n	800161e <Setup0_Process+0x29a>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 8001600:	6801      	ldr	r1, [r0, #0]
 8001602:	f891 1030 	ldrb.w	r1, [r1, #48]	; 0x30
 8001606:	428a      	cmp	r2, r1
 8001608:	d201      	bcs.n	800160e <Setup0_Process+0x28a>
      {
        Data_Mul_MaxPacketSize = FALSE;
 800160a:	2100      	movs	r1, #0
 800160c:	e005      	b.n	800161a <Setup0_Process+0x296>
      }
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 800160e:	fb92 f4f1 	sdiv	r4, r2, r1
 8001612:	fb01 2214 	mls	r2, r1, r4, r2
 8001616:	b912      	cbnz	r2, 800161e <Setup0_Process+0x29a>
      {
        Data_Mul_MaxPacketSize = TRUE;
 8001618:	2101      	movs	r1, #1
 800161a:	4a0c      	ldr	r2, [pc, #48]	; (800164c <Setup0_Process+0x2c8>)
 800161c:	7011      	strb	r1, [r2, #0]
      }
    }

    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 800161e:	6802      	ldr	r2, [r0, #0]
 8001620:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8001624:	829a      	strh	r2, [r3, #20]
    DataStageIn();
 8001626:	f7ff fd2f 	bl	8001088 <DataStageIn>
 800162a:	e005      	b.n	8001638 <Setup0_Process+0x2b4>
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
 800162c:	2203      	movs	r2, #3
 800162e:	721a      	strb	r2, [r3, #8]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 8001630:	4b07      	ldr	r3, [pc, #28]	; (8001650 <Setup0_Process+0x2cc>)
 8001632:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001636:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Setup with data stage */
    Data_Setup0();
  }
  return Post0_Process();
 8001638:	f7ff fe84 	bl	8001344 <Post0_Process>
}
 800163c:	b002      	add	sp, #8
 800163e:	bd70      	pop	{r4, r5, r6, pc}
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
        && (pInformation->USBwIndex == 0))
    {
      CopyRoutine = Standard_GetStatus;
 8001640:	4b04      	ldr	r3, [pc, #16]	; (8001654 <Setup0_Process+0x2d0>)
 8001642:	e79e      	b.n	8001582 <Setup0_Process+0x1fe>
  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      CopyRoutine = Standard_GetConfiguration;
 8001644:	4b04      	ldr	r3, [pc, #16]	; (8001658 <Setup0_Process+0x2d4>)
 8001646:	e79c      	b.n	8001582 <Setup0_Process+0x1fe>
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
    {
      CopyRoutine = Standard_GetInterface;
 8001648:	4b04      	ldr	r3, [pc, #16]	; (800165c <Setup0_Process+0x2d8>)
 800164a:	e79a      	b.n	8001582 <Setup0_Process+0x1fe>
 800164c:	20000a20 	andcs	r0, r0, r0, lsr #20
 8001650:	200001ce 	andcs	r0, r0, lr, asr #3
 8001654:	08000ff9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8001658:	08000fb1 	stmdaeq	r0, {r0, r4, r5, r7, r8, r9, sl, fp}
 800165c:	08000fd5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r8, r9, sl, fp}

08001660 <Out0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
u8 Out0_Process(void)
{
 8001660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32 ControlState = pInformation->ControlState;
 8001662:	4d2b      	ldr	r5, [pc, #172]	; (8001710 <Out0_Process+0xb0>)
 8001664:	682c      	ldr	r4, [r5, #0]
 8001666:	7a23      	ldrb	r3, [r4, #8]

  if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 8001668:	2b03      	cmp	r3, #3
 800166a:	d001      	beq.n	8001670 <Out0_Process+0x10>
 800166c:	2b05      	cmp	r3, #5
 800166e:	d141      	bne.n	80016f4 <Out0_Process+0x94>
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  u32 save_rLength;

  save_rLength = pEPinfo->Usb_rLength;

  if (pEPinfo->CopyData && save_rLength)
 8001670:	69a3      	ldr	r3, [r4, #24]
void DataStageOut(void)
{
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  u32 save_rLength;

  save_rLength = pEPinfo->Usb_rLength;
 8001672:	8a22      	ldrh	r2, [r4, #16]

  if (pEPinfo->CopyData && save_rLength)
 8001674:	b1ab      	cbz	r3, 80016a2 <Out0_Process+0x42>
 8001676:	b1a2      	cbz	r2, 80016a2 <Out0_Process+0x42>
  {
    u8 *Buffer;
    u32 Length;

    Length = pEPinfo->PacketSize;
 8001678:	8aa6      	ldrh	r6, [r4, #20]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 800167a:	4296      	cmp	r6, r2
 800167c:	bf28      	it	cs
 800167e:	4616      	movcs	r6, r2
 8001680:	4630      	mov	r0, r6
 8001682:	4798      	blx	r3
    pEPinfo->Usb_rLength -= Length;
 8001684:	8a23      	ldrh	r3, [r4, #16]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 8001686:	4607      	mov	r7, r0
    pEPinfo->Usb_rLength -= Length;
 8001688:	1b9b      	subs	r3, r3, r6
 800168a:	8223      	strh	r3, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 800168c:	8a63      	ldrh	r3, [r4, #18]

    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 800168e:	2000      	movs	r0, #0
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
    pEPinfo->Usb_rLength -= Length;
    pEPinfo->Usb_rOffset += Length;
 8001690:	4433      	add	r3, r6
 8001692:	8263      	strh	r3, [r4, #18]

    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 8001694:	f7ff fb8a 	bl	8000dac <GetEPRxAddr>
 8001698:	4632      	mov	r2, r6
 800169a:	4601      	mov	r1, r0
 800169c:	4638      	mov	r0, r7
 800169e:	f000 f8a5 	bl	80017ec <PMAToUserBufferCopy>
  }

  if (pEPinfo->Usb_rLength != 0)
 80016a2:	8a23      	ldrh	r3, [r4, #16]
 80016a4:	b153      	cbz	r3, 80016bc <Out0_Process+0x5c>
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 80016a6:	4b1b      	ldr	r3, [pc, #108]	; (8001714 <Out0_Process+0xb4>)
    SetEPTxCount(ENDP0, 0);
 80016a8:	2000      	movs	r0, #0
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 80016aa:	f44f 5240 	mov.w	r2, #12288	; 0x3000
    SetEPTxCount(ENDP0, 0);
 80016ae:	4601      	mov	r1, r0
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 80016b0:	801a      	strh	r2, [r3, #0]
    SetEPTxCount(ENDP0, 0);
 80016b2:	f7ff fb89 	bl	8000dc8 <SetEPTxCount>
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 80016b6:	4b18      	ldr	r3, [pc, #96]	; (8001718 <Out0_Process+0xb8>)
 80016b8:	2230      	movs	r2, #48	; 0x30
 80016ba:	801a      	strh	r2, [r3, #0]
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 80016bc:	8a23      	ldrh	r3, [r4, #16]
 80016be:	8aa2      	ldrh	r2, [r4, #20]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d802      	bhi.n	80016ca <Out0_Process+0x6a>
  {
    pInformation->ControlState = OUT_DATA;
 80016c4:	682b      	ldr	r3, [r5, #0]
 80016c6:	2203      	movs	r2, #3
 80016c8:	e002      	b.n	80016d0 <Out0_Process+0x70>
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
 80016ca:	b11b      	cbz	r3, 80016d4 <Out0_Process+0x74>
    {
      pInformation->ControlState = LAST_OUT_DATA;
 80016cc:	682b      	ldr	r3, [r5, #0]
 80016ce:	2205      	movs	r2, #5
 80016d0:	721a      	strb	r2, [r3, #8]
 80016d2:	e00c      	b.n	80016ee <Out0_Process+0x8e>
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 80016d4:	682a      	ldr	r2, [r5, #0]
 80016d6:	2106      	movs	r1, #6
 80016d8:	7211      	strb	r1, [r2, #8]
      USB_StatusIn();
 80016da:	4a10      	ldr	r2, [pc, #64]	; (800171c <Out0_Process+0xbc>)
 80016dc:	6811      	ldr	r1, [r2, #0]
 80016de:	4a10      	ldr	r2, [pc, #64]	; (8001720 <Out0_Process+0xc0>)
 80016e0:	b289      	uxth	r1, r1
 80016e2:	440a      	add	r2, r1
 80016e4:	0052      	lsls	r2, r2, #1
 80016e6:	6013      	str	r3, [r2, #0]
 80016e8:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <Out0_Process+0xb8>)
 80016ea:	2230      	movs	r2, #48	; 0x30
 80016ec:	801a      	strh	r2, [r3, #0]
  u32 ControlState = pInformation->ControlState;

  if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
  {
    DataStageOut();
    ControlState = pInformation->ControlState; /* may be changed outside the function */
 80016ee:	682b      	ldr	r3, [r5, #0]
 80016f0:	7a1b      	ldrb	r3, [r3, #8]
 80016f2:	e006      	b.n	8001702 <Out0_Process+0xa2>
  }

  else if (ControlState == WAIT_STATUS_OUT)
 80016f4:	2b07      	cmp	r3, #7
 80016f6:	d103      	bne.n	8001700 <Out0_Process+0xa0>
  {
    (*pProperty->Process_Status_OUT)();
 80016f8:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <Out0_Process+0xc4>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	4798      	blx	r3
  }

  else if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
  {
    /* host aborts the transfer before finish */
    ControlState = STALLED;
 8001700:	2308      	movs	r3, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 8001702:	682a      	ldr	r2, [r5, #0]
 8001704:	7213      	strb	r3, [r2, #8]

  return Post0_Process();
}
 8001706:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;

  return Post0_Process();
 800170a:	f7ff be1b 	b.w	8001344 <Post0_Process>
 800170e:	bf00      	nop
 8001710:	20000200 	andcs	r0, r0, r0, lsl #4
 8001714:	200001ce 	andcs	r0, r0, lr, asr #3
 8001718:	200001d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 800171c:	40005c50 	andmi	r5, r0, r0, asr ip
 8001720:	20003002 	andcs	r3, r0, r2
 8001724:	200001d8 	ldrdcs	r0, [r0], -r8

08001728 <SetDeviceAddress>:
* Input          : - Val: device adress.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDeviceAddress(u8 Val)
{
 8001728:	b530      	push	{r4, r5, lr}
  u32 i;
  u32 nEP = Device_Table.Total_Endpoint;
 800172a:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <SetDeviceAddress+0x30>)
 800172c:	781c      	ldrb	r4, [r3, #0]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 800172e:	2300      	movs	r3, #0
 8001730:	42a3      	cmp	r3, r4
 8001732:	d20c      	bcs.n	800174e <SetDeviceAddress+0x26>
 8001734:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
 8001738:	f502 52b8 	add.w	r2, r2, #5888	; 0x1700
 800173c:	0091      	lsls	r1, r2, #2
  {
    _SetEPAddress((u8)i, (u8)i);
 800173e:	680d      	ldr	r5, [r1, #0]
 8001740:	f648 728f 	movw	r2, #36751	; 0x8f8f
 8001744:	402a      	ands	r2, r5
 8001746:	431a      	orrs	r2, r3
 8001748:	600a      	str	r2, [r1, #0]
{
  u32 i;
  u32 nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 800174a:	3301      	adds	r3, #1
 800174c:	e7f0      	b.n	8001730 <SetDeviceAddress+0x8>
  {
    _SetEPAddress((u8)i, (u8)i);
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */
 800174e:	4b03      	ldr	r3, [pc, #12]	; (800175c <SetDeviceAddress+0x34>)
 8001750:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8001754:	6018      	str	r0, [r3, #0]
 8001756:	bd30      	pop	{r4, r5, pc}
 8001758:	20000090 	mulcs	r0, r0, r0
 800175c:	40005c4c 	andmi	r5, r0, ip, asr #24

08001760 <In0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
u8 In0_Process(void)
{
 8001760:	b510      	push	{r4, lr}
  u32 ControlState = pInformation->ControlState;
 8001762:	4c13      	ldr	r4, [pc, #76]	; (80017b0 <In0_Process+0x50>)
 8001764:	6823      	ldr	r3, [r4, #0]
 8001766:	7a1a      	ldrb	r2, [r3, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 8001768:	2a02      	cmp	r2, #2
 800176a:	d001      	beq.n	8001770 <In0_Process+0x10>
 800176c:	2a04      	cmp	r2, #4
 800176e:	d104      	bne.n	800177a <In0_Process+0x1a>
  {
    DataStageIn();
 8001770:	f7ff fc8a 	bl	8001088 <DataStageIn>
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
 8001774:	6823      	ldr	r3, [r4, #0]
 8001776:	7a1b      	ldrb	r3, [r3, #8]
 8001778:	e013      	b.n	80017a2 <In0_Process+0x42>
  }

  else if (ControlState == WAIT_STATUS_IN)
 800177a:	2a06      	cmp	r2, #6
 800177c:	d110      	bne.n	80017a0 <In0_Process+0x40>
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 800177e:	785a      	ldrb	r2, [r3, #1]
 8001780:	2a05      	cmp	r2, #5
 8001782:	d109      	bne.n	8001798 <In0_Process+0x38>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
 8001784:	781a      	ldrb	r2, [r3, #0]
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 8001786:	0652      	lsls	r2, r2, #25
 8001788:	d106      	bne.n	8001798 <In0_Process+0x38>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
 800178a:	7898      	ldrb	r0, [r3, #2]
 800178c:	f7ff ffcc 	bl	8001728 <SetDeviceAddress>
      pUser_Standard_Requests->User_SetDeviceAddress();
 8001790:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <In0_Process+0x54>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6a1b      	ldr	r3, [r3, #32]
 8001796:	4798      	blx	r3
    }
    (*pProperty->Process_Status_IN)();
 8001798:	4b07      	ldr	r3, [pc, #28]	; (80017b8 <In0_Process+0x58>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	4798      	blx	r3
    ControlState = STALLED;
  }

  else
  {
    ControlState = STALLED;
 80017a0:	2308      	movs	r3, #8
  }

  pInformation->ControlState = ControlState;
 80017a2:	6822      	ldr	r2, [r4, #0]
 80017a4:	7213      	strb	r3, [r2, #8]

  return Post0_Process();
}
 80017a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;

  return Post0_Process();
 80017aa:	f7ff bdcb 	b.w	8001344 <Post0_Process>
 80017ae:	bf00      	nop
 80017b0:	20000200 	andcs	r0, r0, r0, lsl #4
 80017b4:	200001fc 	strdcs	r0, [r0], -ip
 80017b8:	200001d8 	ldrdcs	r0, [r0], -r8

080017bc <UserToPMABufferCopy>:
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
 80017bc:	b530      	push	{r4, r5, lr}
  u32 n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  u32 i, temp1, temp2;
  u16 *pdwVal;
  pdwVal = (u16 *)(wPMABufAddr * 2 + PMAAddr);
 80017be:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
  u32 n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 80017c2:	3201      	adds	r2, #1
  u32 i, temp1, temp2;
  u16 *pdwVal;
  pdwVal = (u16 *)(wPMABufAddr * 2 + PMAAddr);
 80017c4:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
  u32 n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 80017c8:	1052      	asrs	r2, r2, #1
  u32 i, temp1, temp2;
  u16 *pdwVal;
  pdwVal = (u16 *)(wPMABufAddr * 2 + PMAAddr);
 80017ca:	0049      	lsls	r1, r1, #1
  for (i = n; i != 0; i--)
 80017cc:	2300      	movs	r3, #0
 80017ce:	4293      	cmp	r3, r2
 80017d0:	f100 0002 	add.w	r0, r0, #2
 80017d4:	d009      	beq.n	80017ea <UserToPMABufferCopy+0x2e>
  {
    temp1 = (u16) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (u16) * pbUsrBuf << 8;
 80017d6:	f810 5c01 	ldrb.w	r5, [r0, #-1]
  u32 i, temp1, temp2;
  u16 *pdwVal;
  pdwVal = (u16 *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (u16) * pbUsrBuf;
 80017da:	f810 4c02 	ldrb.w	r4, [r0, #-2]
    pbUsrBuf++;
    temp2 = temp1 | (u16) * pbUsrBuf << 8;
 80017de:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
    *pdwVal++ = temp2;
 80017e2:	f821 4023 	strh.w	r4, [r1, r3, lsl #2]
 80017e6:	3301      	adds	r3, #1
 80017e8:	e7f1      	b.n	80017ce <UserToPMABufferCopy+0x12>
    pdwVal++;
    pbUsrBuf++;
  }
}
 80017ea:	bd30      	pop	{r4, r5, pc}

080017ec <PMAToUserBufferCopy>:
*                  - wNBytes     = no. of bytes to be copied.
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
 80017ec:	b510      	push	{r4, lr}
  u32 n = (wNBytes + 1) >> 1;/* /2*/
  u32 i;
  u32 *pdwVal;
  pdwVal = (u32 *)(wPMABufAddr * 2 + PMAAddr);
 80017ee:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
  u32 n = (wNBytes + 1) >> 1;/* /2*/
 80017f2:	3201      	adds	r2, #1
  u32 i;
  u32 *pdwVal;
  pdwVal = (u32 *)(wPMABufAddr * 2 + PMAAddr);
 80017f4:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
  u32 n = (wNBytes + 1) >> 1;/* /2*/
 80017f8:	1052      	asrs	r2, r2, #1
  u32 i;
  u32 *pdwVal;
  pdwVal = (u32 *)(wPMABufAddr * 2 + PMAAddr);
 80017fa:	0049      	lsls	r1, r1, #1
  for (i = n; i != 0; i--)
 80017fc:	2300      	movs	r3, #0
 80017fe:	4293      	cmp	r3, r2
 8001800:	d005      	beq.n	800180e <PMAToUserBufferCopy+0x22>
  {
    *(u16*)pbUsrBuf++ = *pdwVal++;
 8001802:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8001806:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
 800180a:	3301      	adds	r3, #1
 800180c:	e7f7      	b.n	80017fe <PMAToUserBufferCopy+0x12>
    pbUsrBuf++;
  }
}
 800180e:	bd10      	pop	{r4, pc}

Disassembly of section .matrix_info:

08001e00 <matrix_info>:
 8001e00:	00000078 	andeq	r0, r0, r8, ror r0
 8001e04:	4d585054 	ldclmi	0, cr5, [r8, #-336]	; 0xfffffeb0
 8001e08:	00000096 	muleq	r0, r6, r0
 8001e0c:	00000000 	andeq	r0, r0, r0

Disassembly of section .data:

20000000 <Device_Property>:
20000000:	08000495 	stmdaeq	r0, {r0, r2, r4, r7, sl}
20000004:	08000181 	stmdaeq	r0, {r0, r7, r8}
20000008:	0800013f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r8}
2000000c:	08000141 	stmdaeq	r0, {r0, r6, r8}
20000010:	08000229 	stmdaeq	r0, {r0, r3, r5, r9}
20000014:	080002cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9}
20000018:	08000143 	stmdaeq	r0, {r0, r1, r6, r8}
2000001c:	08000289 	stmdaeq	r0, {r0, r3, r7, r9}
20000020:	08000295 	stmdaeq	r0, {r0, r2, r4, r7, r9}
20000024:	080002a1 	stmdaeq	r0, {r0, r5, r7, r9}
20000028:	080002c1 	stmdaeq	r0, {r0, r6, r7, r9}
2000002c:	00000000 	andeq	r0, r0, r0
20000030:	00000040 	andeq	r0, r0, r0, asr #32

20000034 <pEpInt_IN>:
20000034:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
20000038:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
2000003c:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
20000040:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
20000044:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
20000048:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
2000004c:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}

20000050 <pEpInt_OUT>:
20000050:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
20000054:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
20000058:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
2000005c:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
20000060:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
20000064:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
20000068:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}

2000006c <User_Standard_Requests>:
2000006c:	0800014d 	stmdaeq	r0, {r0, r2, r3, r6, r8}
20000070:	08000151 	stmdaeq	r0, {r0, r4, r6, r8}
20000074:	08000169 	stmdaeq	r0, {r0, r3, r5, r6, r8}
20000078:	0800016b 	stmdaeq	r0, {r0, r1, r3, r5, r6, r8}
2000007c:	0800016d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8}
20000080:	0800016f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r8}
20000084:	08000171 	stmdaeq	r0, {r0, r4, r5, r6, r8}
20000088:	08000173 	stmdaeq	r0, {r0, r1, r4, r5, r6, r8}
2000008c:	08000175 	stmdaeq	r0, {r0, r2, r4, r5, r6, r8}

20000090 <Device_Table>:
20000090:	00000101 	andeq	r0, r0, r1, lsl #2

20000094 <usbStringDescriptor>:
20000094:	200000e8 	andcs	r0, r0, r8, ror #1
20000098:	00000004 	andeq	r0, r0, r4
2000009c:	20000124 	andcs	r0, r0, r4, lsr #2
200000a0:	0000001e 	andeq	r0, r0, lr, lsl r0
200000a4:	2000014c 	andcs	r0, r0, ip, asr #2
200000a8:	00000016 	andeq	r0, r0, r6, lsl r0
200000ac:	20000107 	andcs	r0, r0, r7, lsl #2
200000b0:	00000014 	andeq	r0, r0, r4, lsl r0
200000b4:	20000162 	andcs	r0, r0, r2, ror #2
200000b8:	00000050 	andeq	r0, r0, r0, asr r0
	...

200000cc <u8_usbDeviceDescriptorDFU>:
200000cc:	01000112 	tsteq	r0, r2, lsl r1
200000d0:	40000000 	andmi	r0, r0, r0
200000d4:	00030203 	andeq	r0, r3, r3, lsl #4
200000d8:	02010201 	andeq	r0, r1, #268435456	; 0x10000000
200000dc:	00000103 	andeq	r0, r0, r3, lsl #2

200000e0 <usbFunctionalDescriptor>:
200000e0:	2000011b 	andcs	r0, r0, fp, lsl r1
200000e4:	00000009 	andeq	r0, r0, r9

200000e8 <u8_usbStringLangId>:
200000e8:	04090304 	streq	r0, [r9], #-772	; 0x304

200000ec <u8_usbConfigDescriptorDFU>:
200000ec:	001b0209 	andseq	r0, fp, r9, lsl #4
200000f0:	80000101 	andhi	r0, r0, r1, lsl #2
200000f4:	00040932 	andeq	r0, r4, r2, lsr r9
200000f8:	01fe0000 	mvnseq	r0, r0
200000fc:	21090402 	tstcs	r9, r2, lsl #8
20000100:	0000ff03 	andeq	pc, r0, r3, lsl #30
20000104:	14011008 	strne	r1, [r1], #-8

20000107 <u8_usbStringSerial>:
20000107:	00300314 	eorseq	r0, r0, r4, lsl r3
2000010b:	00300032 	eorseq	r0, r0, r2, lsr r0
2000010f:	00200033 	eoreq	r0, r0, r3, lsr r0
20000113:	00300030 	eorseq	r0, r0, r0, lsr r0
20000117:	00330030 	eorseq	r0, r3, r0, lsr r0

2000011b <u8_usbFunctionalDescriptor>:
2000011b:	ff032109 			; <UNDEFINED> instruction: 0xff032109
2000011f:	10080000 	andne	r0, r8, r0
20000123:	32031e01 	andcc	r1, r3, #1, 28

20000124 <u8_usbStringVendor>:
20000124:	0032031e 	eorseq	r0, r2, lr, lsl r3
20000128:	00330030 	eorseq	r0, r3, r0, lsr r0
2000012c:	00490020 	subeq	r0, r9, r0, lsr #32
20000130:	0064006e 	rsbeq	r0, r4, lr, rrx
20000134:	00730075 	rsbseq	r0, r3, r5, ror r0
20000138:	00720074 	rsbseq	r0, r2, r4, ror r0
2000013c:	00650069 	rsbeq	r0, r5, r9, rrx
20000140:	00000073 	andeq	r0, r0, r3, ror r0

20000144 <usbDeviceDescriptorDFU>:
20000144:	200000cc 	andcs	r0, r0, ip, asr #1
20000148:	00000012 	andeq	r0, r0, r2, lsl r0

2000014c <u8_usbStringProduct>:
2000014c:	004d0316 	subeq	r0, sp, r6, lsl r3
20000150:	00740061 	rsbseq	r0, r4, r1, rrx
20000154:	00690072 	rsbeq	r0, r9, r2, ror r0
20000158:	00200078 	eoreq	r0, r0, r8, ror r0
2000015c:	00460044 	subeq	r0, r6, r4, asr #32
20000160:	03500055 	cmpeq	r0, #85	; 0x55

20000162 <u8_usbStringAlt0>:
20000162:	004d0350 	subeq	r0, sp, r0, asr r3
20000166:	00740061 	rsbseq	r0, r4, r1, rrx
2000016a:	00690072 	rsbeq	r0, r9, r2, ror r0
2000016e:	00200078 	eoreq	r0, r0, r8, ror r0
20000172:	006f0042 	rsbeq	r0, pc, r2, asr #32
20000176:	0074006f 	rsbseq	r0, r4, pc, rrx
2000017a:	006f006c 	rsbeq	r0, pc, ip, rrx
2000017e:	00640061 	rsbeq	r0, r4, r1, rrx
20000182:	00720065 	rsbseq	r0, r2, r5, rrx
20000186:	00760020 	rsbseq	r0, r6, r0, lsr #32
2000018a:	002e0031 	eoreq	r0, lr, r1, lsr r0
2000018e:	00200032 	eoreq	r0, r0, r2, lsr r0
20000192:	00550020 	subseq	r0, r5, r0, lsr #32
20000196:	006c0070 	rsbeq	r0, ip, r0, ror r0
2000019a:	0061006f 	rsbeq	r0, r1, pc, rrx
2000019e:	00200064 	eoreq	r0, r0, r4, rrx
200001a2:	00690046 	rsbeq	r0, r9, r6, asr #32
200001a6:	006d0072 	rsbeq	r0, sp, r2, ror r0
200001aa:	00610077 	rsbeq	r0, r1, r7, ror r0
200001ae:	00650072 	rsbeq	r0, r5, r2, ror r0
	...

200001b4 <usbConfigDescriptorDFU>:
200001b4:	200000ec 	andcs	r0, r0, ip, ror #1
200001b8:	0000001b 	andeq	r0, r0, fp, lsl r0

200001bc <userAppEnd>:
200001bc:	20005000 	andcs	r5, r0, r0

200001c0 <userAppAddr>:
200001c0:	20000c00 	andcs	r0, r0, r0, lsl #24

Disassembly of section .bss:

200001c4 <_sbss>:
200001c4:	00000000 	andeq	r0, r0, r0

200001c8 <wIstr>:
	...

200001ca <ResumeS>:
	...

200001cc <code_copy_lock>:
	...

200001ce <SaveRState>:
	...

200001d0 <SaveTState>:
200001d0:	00000000 	andeq	r0, r0, r0

200001d4 <SaveState>:
200001d4:	00000000 	andeq	r0, r0, r0

200001d8 <pProperty>:
200001d8:	00000000 	andeq	r0, r0, r0

200001dc <EPindex>:
200001dc:	00000000 	andeq	r0, r0, r0

200001e0 <Device_Info>:
	...

200001fc <pUser_Standard_Requests>:
200001fc:	00000000 	andeq	r0, r0, r0

20000200 <pInformation>:
20000200:	00000000 	andeq	r0, r0, r0

20000204 <wInterrupt_Mask>:
	...

20000206 <StatusInfo>:
	...

Disassembly of section .bss.bIntPackSOF:

20000208 <bIntPackSOF>:
	...

Disassembly of section .bss.bDeviceState:

2000020c <bDeviceState>:
2000020c:	00000000 	andeq	r0, r0, r0

Disassembly of section .bss.recvBuffer:

20000210 <recvBuffer>:
	...

Disassembly of section .bss.uploadBlockLen:

20000a10 <uploadBlockLen>:
	...

Disassembly of section .bss.thisBlockLen:

20000a12 <thisBlockLen>:
	...

Disassembly of section .bss.userFirmwareLen:

20000a14 <userFirmwareLen>:
20000a14:	00000000 	andeq	r0, r0, r0

Disassembly of section .bss.userUploadType:

20000a18 <userUploadType>:
	...

Disassembly of section .bss.dfuAppStatus:

20000a19 <dfuAppStatus>:
20000a19:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .bss.dfuBusy:

20000a1f <dfuBusy>:
	...

Disassembly of section .bss.Data_Mul_MaxPacketSize:

20000a20 <Data_Mul_MaxPacketSize>:
	...

Disassembly of section ._usrstack:

20000a21 <_susrstack-0x3>:
20000a21:	00000000 	andeq	r0, r0, r0

20000a24 <_susrstack>:
	...

Disassembly of section .comment:

00000000 <.comment>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
   0:	3a434347 	bcc	10d0d24 <__Stack_Size+0x10d0924>
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xd45
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
    if ((wEPVal & EP_CTR_RX) != 0)
  2c:	64724128 	ldrbtvs	r4, [r2], #-296	; 0x128
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
  30:	6f6e6975 	svcvs	0x006e6975
  34:	69756220 	ldmdbvs	r5!, {r5, r9, sp, lr}^
  38:	2929646c 	stmdbcs	r9!, {r2, r3, r5, r6, sl, sp, lr}

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
  3c:	382e3420 	stmdacc	lr!, {r5, sl, ip, sp}

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
  40:	3220332e 	eorcc	r3, r0, #-1207959552	; 0xb8000000
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
  44:	30343130 	eorscc	r3, r4, r0, lsr r1
  48:	20383232 	eorscs	r3, r8, r2, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0x165
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <BootRAM+0xef6faaf>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	2d385f34 	ldccs	15, cr5, [r8, #-208]!	; 0xffffff30
  68:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  6c:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDblBuffCount(u8 bEpNum, u8 bDir, u16 wCount)
{
  _SetEPDblBuffCount(bEpNum, bDir, wCount);
  70:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  74:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  78:	33383032 	teqcc	r8, #50	; 0x32
  7c:	005d3232 	subseq	r3, sp, r2, lsr r2

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002e41 	andeq	r2, r0, r1, asr #28
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000024 	andeq	r0, r0, r4, lsr #32
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
  10:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
  14:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
  18:	0600334d 	streq	r3, [r0], -sp, asr #6
  1c:	094d070a 	stmdbeq	sp, {r1, r3, r8, r9, sl}^
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
  20:	14041202 	strne	r1, [r4], #-514	; 0x202
  24:	17011501 	strne	r1, [r1, -r1, lsl #10]
  28:	1a011803 	bne	4603c <__Stack_Size+0x45c3c>
    if ((wEPVal & EP_CTR_RX) != 0)
  2c:	Address 0x000000000000002c is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
  10:	080000f0 	stmdaeq	r0, {r4, r5, r6, r7}
  14:	00000048 	andeq	r0, r0, r8, asr #32
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
  18:	08000138 	stmdaeq	r0, {r3, r4, r5, r8}
  1c:	00000004 	andeq	r0, r0, r4
	...
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
    if ((wEPVal & EP_CTR_RX) != 0)
  2c:	00620002 	rsbeq	r0, r2, r2
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
  30:	00040000 	andeq	r0, r4, r0
	...

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
  3c:	0000007a 	andeq	r0, r0, sl, ror r0
	...

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
  48:	00000114 	andeq	r0, r0, r4, lsl r1
  4c:	00ca0002 	sbceq	r0, sl, r2

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	0800013c 	stmdaeq	r0, {r2, r3, r4, r5, r8}
  5c:	00000002 	andeq	r0, r0, r2
  60:	0800013e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8}
  64:	00000002 	andeq	r0, r0, r2
  68:	08000140 	stmdaeq	r0, {r6, r8}
  6c:	00000002 	andeq	r0, r0, r2
  70:	08000142 	stmdaeq	r0, {r1, r6, r8}
  74:	0000000a 	andeq	r0, r0, sl
  78:	0800014c 	stmdaeq	r0, {r2, r3, r6, r8}
  7c:	00000002 	andeq	r0, r0, r2
  80:	08000150 	stmdaeq	r0, {r4, r6, r8}
  84:	00000018 	andeq	r0, r0, r8, lsl r0
  88:	08000168 	stmdaeq	r0, {r3, r5, r6, r8}
  8c:	00000002 	andeq	r0, r0, r2
  90:	0800016a 	stmdaeq	r0, {r1, r3, r5, r6, r8}
  94:	00000002 	andeq	r0, r0, r2
  98:	0800016c 	stmdaeq	r0, {r2, r3, r5, r6, r8}
  9c:	00000002 	andeq	r0, r0, r2
  a0:	0800016e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8}
  a4:	00000002 	andeq	r0, r0, r2
  a8:	08000170 	stmdaeq	r0, {r4, r5, r6, r8}
  ac:	00000002 	andeq	r0, r0, r2
  b0:	08000172 	stmdaeq	r0, {r1, r4, r5, r6, r8}
  b4:	00000002 	andeq	r0, r0, r2
  b8:	08000174 	stmdaeq	r0, {r2, r4, r5, r6, r8}
  bc:	0000000c 	andeq	r0, r0, ip
  c0:	08000180 	stmdaeq	r0, {r7, r8}
  c4:	000000a8 	andeq	r0, r0, r8, lsr #1
  c8:	08000228 	stmdaeq	r0, {r3, r5, r9}
  cc:	00000060 	andeq	r0, r0, r0, rrx
  d0:	08000288 	stmdaeq	r0, {r3, r7, r9}
  d4:	0000000c 	andeq	r0, r0, ip
  d8:	08000294 	stmdaeq	r0, {r2, r4, r7, r9}
  dc:	0000000c 	andeq	r0, r0, ip
  e0:	080002a0 	stmdaeq	r0, {r5, r7, r9}
  e4:	00000020 	andeq	r0, r0, r0, lsr #32
  e8:	080002c0 	stmdaeq	r0, {r6, r7, r9}
  ec:	0000000c 	andeq	r0, r0, ip
  f0:	080002cc 	stmdaeq	r0, {r2, r3, r6, r7, r9}
  f4:	00000028 	andeq	r0, r0, r8, lsr #32
  f8:	080002f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9}
  fc:	0000007c 	andeq	r0, r0, ip, ror r0
 100:	00000000 	andeq	r0, r0, r0
 104:	00000004 	andeq	r0, r0, r4
 108:	08000370 	stmdaeq	r0, {r4, r5, r6, r8, r9}
 10c:	0000001c 	andeq	r0, r0, ip, lsl r0
 110:	0800038c 	stmdaeq	r0, {r2, r3, r7, r8, r9}
 114:	00000018 	andeq	r0, r0, r8, lsl r0
 118:	080003a4 	stmdaeq	r0, {r2, r5, r7, r8, r9}
 11c:	00000084 	andeq	r0, r0, r4, lsl #1
 120:	08000428 	stmdaeq	r0, {r3, r5, sl}
 124:	00000028 	andeq	r0, r0, r8, lsr #32
 128:	08000450 	stmdaeq	r0, {r4, r6, sl}
 12c:	0000001c 	andeq	r0, r0, ip, lsl r0
 130:	0800046c 	stmdaeq	r0, {r2, r3, r5, r6, sl}
 134:	00000004 	andeq	r0, r0, r4
 138:	08000470 	stmdaeq	r0, {r4, r5, r6, sl}
 13c:	00000024 	andeq	r0, r0, r4, lsr #32
 140:	08000494 	stmdaeq	r0, {r2, r4, r7, sl}
 144:	00000040 	andeq	r0, r0, r0, asr #32
 148:	080004d4 	stmdaeq	r0, {r2, r4, r6, r7, sl}
 14c:	00000022 	andeq	r0, r0, r2, lsr #32
 150:	080004f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl}
 154:	000000b4 	strheq	r0, [r0], -r4
	...
 160:	00000014 	andeq	r0, r0, r4, lsl r0
 164:	0ddc0002 	ldcleq	0, cr0, [ip, #8]
 168:	00040000 	andeq	r0, r4, r0
	...
 178:	0000001c 	andeq	r0, r0, ip, lsl r0
 17c:	0ffb0002 	svceq	0x00fb0002
 180:	00040000 	andeq	r0, r4, r0
 184:	00000000 	andeq	r0, r0, r0
 188:	080005ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl}
 18c:	0000005c 	andeq	r0, r0, ip, asr r0
	...
 198:	000000d4 	ldrdeq	r0, [r0], -r4
 19c:	12840002 	addne	r0, r4, #2
 1a0:	00040000 	andeq	r0, r4, r0
 1a4:	00000000 	andeq	r0, r0, r0
 1a8:	08000608 	stmdaeq	r0, {r3, r9, sl}
 1ac:	00000016 	andeq	r0, r0, r6, lsl r0
 1b0:	00000000 	andeq	r0, r0, r0
 1b4:	00000012 	andeq	r0, r0, r2, lsl r0
 1b8:	08000620 	stmdaeq	r0, {r5, r9, sl}
 1bc:	00000010 	andeq	r0, r0, r0, lsl r0
 1c0:	00000000 	andeq	r0, r0, r0
 1c4:	00000050 	andeq	r0, r0, r0, asr r0
 1c8:	08000630 	stmdaeq	r0, {r4, r5, r9, sl}
 1cc:	00000048 	andeq	r0, r0, r8, asr #32
 1d0:	08000678 	stmdaeq	r0, {r3, r4, r5, r6, r9, sl}
 1d4:	00000060 	andeq	r0, r0, r0, rrx
 1d8:	080006d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl}
 1dc:	00000018 	andeq	r0, r0, r8, lsl r0
 1e0:	080006f0 	stmdaeq	r0, {r4, r5, r6, r7, r9, sl}
 1e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1e8:	0800070c 	stmdaeq	r0, {r2, r3, r8, r9, sl}
 1ec:	00000014 	andeq	r0, r0, r4, lsl r0
 1f0:	08000720 	stmdaeq	r0, {r5, r8, r9, sl}
 1f4:	00000018 	andeq	r0, r0, r8, lsl r0
 1f8:	08000738 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl}
 1fc:	0000002c 	andeq	r0, r0, ip, lsr #32
 200:	08000764 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl}
 204:	00000048 	andeq	r0, r0, r8, asr #32
 208:	080007ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl}
 20c:	0000006c 	andeq	r0, r0, ip, rrx
 210:	08000818 	stmdaeq	r0, {r3, r4, fp}
 214:	00000024 	andeq	r0, r0, r4, lsr #32
 218:	0800083c 	stmdaeq	r0, {r2, r3, r4, r5, fp}
 21c:	00000028 	andeq	r0, r0, r8, lsr #32
 220:	08000864 	stmdaeq	r0, {r2, r5, r6, fp}
 224:	00000014 	andeq	r0, r0, r4, lsl r0
 228:	08000878 	stmdaeq	r0, {r3, r4, r5, r6, fp}
 22c:	00000034 	andeq	r0, r0, r4, lsr r0
 230:	00000000 	andeq	r0, r0, r0
 234:	00000030 	andeq	r0, r0, r0, lsr r0
 238:	080008ac 	stmdaeq	r0, {r2, r3, r5, r7, fp}
 23c:	0000004c 	andeq	r0, r0, ip, asr #32
 240:	080008f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, fp}
 244:	0000000c 	andeq	r0, r0, ip
 248:	08000904 	stmdaeq	r0, {r2, r8, fp}
 24c:	00000018 	andeq	r0, r0, r8, lsl r0
 250:	0800091c 	stmdaeq	r0, {r2, r3, r4, r8, fp}
 254:	00000012 	andeq	r0, r0, r2, lsl r0
 258:	08000930 	stmdaeq	r0, {r4, r5, r8, fp}
 25c:	00000010 	andeq	r0, r0, r0, lsl r0
 260:	08000940 	stmdaeq	r0, {r6, r8, fp}
 264:	00000018 	andeq	r0, r0, r8, lsl r0
	...
 270:	0000007c 	andeq	r0, r0, ip, ror r0
 274:	1dab0002 	stcne	0, cr0, [fp, #8]!
 278:	00040000 	andeq	r0, r4, r0
 27c:	00000000 	andeq	r0, r0, r0
 280:	08000958 	stmdaeq	r0, {r3, r4, r6, r8, fp}
 284:	0000005c 	andeq	r0, r0, ip, asr r0
 288:	080009b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, fp}
 28c:	00000044 	andeq	r0, r0, r4, asr #32
 290:	00000000 	andeq	r0, r0, r0
 294:	00000002 	andeq	r0, r0, r2
 298:	080009f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, fp}
 29c:	00000018 	andeq	r0, r0, r8, lsl r0
 2a0:	08000a10 	stmdaeq	r0, {r4, r9, fp}
 2a4:	00000018 	andeq	r0, r0, r8, lsl r0
 2a8:	08000a28 	stmdaeq	r0, {r3, r5, r9, fp}
 2ac:	00000028 	andeq	r0, r0, r8, lsr #32
 2b0:	08000a50 	stmdaeq	r0, {r4, r6, r9, fp}
 2b4:	00000034 	andeq	r0, r0, r4, lsr r0
 2b8:	08000a84 	stmdaeq	r0, {r2, r7, r9, fp}
 2bc:	0000004c 	andeq	r0, r0, ip, asr #32
 2c0:	08000ad0 	stmdaeq	r0, {r4, r6, r7, r9, fp}
 2c4:	0000020c 	andeq	r0, r0, ip, lsl #4
 2c8:	00000000 	andeq	r0, r0, r0
 2cc:	0000000c 	andeq	r0, r0, ip
 2d0:	00000000 	andeq	r0, r0, r0
 2d4:	0000000c 	andeq	r0, r0, ip
 2d8:	08000cdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, sl, fp}
 2dc:	0000000c 	andeq	r0, r0, ip
 2e0:	08000ce8 	stmdaeq	r0, {r3, r5, r6, r7, sl, fp}
 2e4:	00000004 	andeq	r0, r0, r4
	...
 2f0:	000001ec 	andeq	r0, r0, ip, ror #3
 2f4:	23ff0002 	mvnscs	r0, #2
 2f8:	00040000 	andeq	r0, r4, r0
	...
 304:	0000000c 	andeq	r0, r0, ip
 308:	00000000 	andeq	r0, r0, r0
 30c:	0000000c 	andeq	r0, r0, ip
 310:	00000000 	andeq	r0, r0, r0
 314:	0000000c 	andeq	r0, r0, ip
 318:	00000000 	andeq	r0, r0, r0
 31c:	0000000c 	andeq	r0, r0, ip
 320:	00000000 	andeq	r0, r0, r0
 324:	0000000c 	andeq	r0, r0, ip
 328:	00000000 	andeq	r0, r0, r0
 32c:	0000000c 	andeq	r0, r0, ip
 330:	00000000 	andeq	r0, r0, r0
 334:	0000000c 	andeq	r0, r0, ip
 338:	00000000 	andeq	r0, r0, r0
 33c:	00000010 	andeq	r0, r0, r0, lsl r0
 340:	00000000 	andeq	r0, r0, r0
 344:	0000000c 	andeq	r0, r0, ip
 348:	00000000 	andeq	r0, r0, r0
 34c:	0000000e 	andeq	r0, r0, lr
 350:	00000000 	andeq	r0, r0, r0
 354:	00000010 	andeq	r0, r0, r0, lsl r0
 358:	00000000 	andeq	r0, r0, r0
 35c:	0000001c 	andeq	r0, r0, ip, lsl r0
 360:	00000000 	andeq	r0, r0, r0
 364:	00000012 	andeq	r0, r0, r2, lsl r0
 368:	08000cec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, fp}
 36c:	0000002a 	andeq	r0, r0, sl, lsr #32
 370:	00000000 	andeq	r0, r0, r0
 374:	0000002a 	andeq	r0, r0, sl, lsr #32
 378:	00000000 	andeq	r0, r0, r0
 37c:	00000024 	andeq	r0, r0, r4, lsr #32
 380:	00000000 	andeq	r0, r0, r0
 384:	00000012 	andeq	r0, r0, r2, lsl r0
 388:	00000000 	andeq	r0, r0, r0
 38c:	00000012 	andeq	r0, r0, r2, lsl r0
 390:	00000000 	andeq	r0, r0, r0
 394:	0000001e 	andeq	r0, r0, lr, lsl r0
 398:	08000d16 	stmdaeq	r0, {r1, r2, r4, r8, sl, fp}
 39c:	0000001e 	andeq	r0, r0, lr, lsl r0
 3a0:	00000000 	andeq	r0, r0, r0
 3a4:	0000001e 	andeq	r0, r0, lr, lsl r0
 3a8:	00000000 	andeq	r0, r0, r0
 3ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b0:	08000d34 	stmdaeq	r0, {r2, r4, r5, r8, sl, fp}
 3b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b8:	00000000 	andeq	r0, r0, r0
 3bc:	0000001e 	andeq	r0, r0, lr, lsl r0
 3c0:	00000000 	andeq	r0, r0, r0
 3c4:	0000001e 	andeq	r0, r0, lr, lsl r0
 3c8:	00000000 	andeq	r0, r0, r0
 3cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3d0:	00000000 	andeq	r0, r0, r0
 3d4:	0000001a 	andeq	r0, r0, sl, lsl r0
 3d8:	00000000 	andeq	r0, r0, r0
 3dc:	0000001a 	andeq	r0, r0, sl, lsl r0
 3e0:	00000000 	andeq	r0, r0, r0
 3e4:	00000018 	andeq	r0, r0, r8, lsl r0
 3e8:	00000000 	andeq	r0, r0, r0
 3ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 3f0:	00000000 	andeq	r0, r0, r0
 3f4:	00000020 	andeq	r0, r0, r0, lsr #32
 3f8:	00000000 	andeq	r0, r0, r0
 3fc:	00000020 	andeq	r0, r0, r0, lsr #32
 400:	08000d50 	stmdaeq	r0, {r4, r6, r8, sl, fp}
 404:	00000020 	andeq	r0, r0, r0, lsr #32
 408:	08000d70 	stmdaeq	r0, {r4, r5, r6, r8, sl, fp}
 40c:	00000020 	andeq	r0, r0, r0, lsr #32
 410:	00000000 	andeq	r0, r0, r0
 414:	0000001e 	andeq	r0, r0, lr, lsl r0
 418:	00000000 	andeq	r0, r0, r0
 41c:	00000012 	andeq	r0, r0, r2, lsl r0
 420:	00000000 	andeq	r0, r0, r0
 424:	00000020 	andeq	r0, r0, r0, lsr #32
 428:	00000000 	andeq	r0, r0, r0
 42c:	00000020 	andeq	r0, r0, r0, lsr #32
 430:	08000d90 	stmdaeq	r0, {r4, r7, r8, sl, fp}
 434:	0000001c 	andeq	r0, r0, ip, lsl r0
 438:	08000dac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, fp}
 43c:	0000001c 	andeq	r0, r0, ip, lsl r0
 440:	08000dc8 	stmdaeq	r0, {r3, r6, r7, r8, sl, fp}
 444:	0000001c 	andeq	r0, r0, ip, lsl r0
 448:	00000000 	andeq	r0, r0, r0
 44c:	00000026 	andeq	r0, r0, r6, lsr #32
 450:	08000de4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, fp}
 454:	00000040 	andeq	r0, r0, r0, asr #32
 458:	00000000 	andeq	r0, r0, r0
 45c:	00000020 	andeq	r0, r0, r0, lsr #32
 460:	00000000 	andeq	r0, r0, r0
 464:	00000020 	andeq	r0, r0, r0, lsr #32
 468:	00000000 	andeq	r0, r0, r0
 46c:	00000038 	andeq	r0, r0, r8, lsr r0
 470:	00000000 	andeq	r0, r0, r0
 474:	00000020 	andeq	r0, r0, r0, lsr #32
 478:	00000000 	andeq	r0, r0, r0
 47c:	00000020 	andeq	r0, r0, r0, lsr #32
 480:	00000000 	andeq	r0, r0, r0
 484:	0000001c 	andeq	r0, r0, ip, lsl r0
 488:	00000000 	andeq	r0, r0, r0
 48c:	0000001c 	andeq	r0, r0, ip, lsl r0
 490:	00000000 	andeq	r0, r0, r0
 494:	000000a8 	andeq	r0, r0, r8, lsr #1
 498:	00000000 	andeq	r0, r0, r0
 49c:	0000005c 	andeq	r0, r0, ip, asr r0
 4a0:	00000000 	andeq	r0, r0, r0
 4a4:	0000005c 	andeq	r0, r0, ip, asr r0
 4a8:	00000000 	andeq	r0, r0, r0
 4ac:	00000020 	andeq	r0, r0, r0, lsr #32
 4b0:	00000000 	andeq	r0, r0, r0
 4b4:	00000020 	andeq	r0, r0, r0, lsr #32
 4b8:	00000000 	andeq	r0, r0, r0
 4bc:	00000044 	andeq	r0, r0, r4, asr #32
 4c0:	00000000 	andeq	r0, r0, r0
 4c4:	0000003a 	andeq	r0, r0, sl, lsr r0
 4c8:	00000000 	andeq	r0, r0, r0
 4cc:	00000006 	andeq	r0, r0, r6
 4d0:	00000000 	andeq	r0, r0, r0
 4d4:	0000000a 	andeq	r0, r0, sl
	...
 4e0:	00000024 	andeq	r0, r0, r4, lsr #32
 4e4:	308b0002 	addcc	r0, fp, r2
 4e8:	00040000 	andeq	r0, r4, r0
 4ec:	00000000 	andeq	r0, r0, r0
 4f0:	08000e24 	stmdaeq	r0, {r2, r5, r9, sl, fp}
 4f4:	00000154 	andeq	r0, r0, r4, asr r1
 4f8:	00000000 	andeq	r0, r0, r0
 4fc:	00000070 	andeq	r0, r0, r0, ror r0
	...
 508:	0000001c 	andeq	r0, r0, ip, lsl r0
 50c:	32670002 	rsbcc	r0, r7, #2
 510:	00040000 	andeq	r0, r4, r0
 514:	00000000 	andeq	r0, r0, r0
 518:	08000f78 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sl, fp}
 51c:	00000038 	andeq	r0, r0, r8, lsr r0
	...
 528:	00000094 	muleq	r0, r4, r0
 52c:	36640002 	strbtcc	r0, [r4], -r2
 530:	00040000 	andeq	r0, r4, r0
 534:	00000000 	andeq	r0, r0, r0
 538:	08000fb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, fp}
 53c:	00000024 	andeq	r0, r0, r4, lsr #32
 540:	08000fd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, fp}
 544:	00000024 	andeq	r0, r0, r4, lsr #32
 548:	08000ff8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl, fp}
 54c:	00000090 	muleq	r0, r0, r0
 550:	08001088 	stmdaeq	r0, {r3, r7, ip}
 554:	000000a8 	andeq	r0, r0, r8, lsr #1
 558:	08001130 	stmdaeq	r0, {r4, r5, r8, ip}
 55c:	00000038 	andeq	r0, r0, r8, lsr r0
 560:	08001168 	stmdaeq	r0, {r3, r5, r6, r8, ip}
 564:	00000048 	andeq	r0, r0, r8, asr #32
 568:	080011b0 	stmdaeq	r0, {r4, r5, r7, r8, ip}
 56c:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 570:	08001280 	stmdaeq	r0, {r7, r9, ip}
 574:	00000084 	andeq	r0, r0, r4, lsl #1
 578:	08001304 	stmdaeq	r0, {r2, r8, r9, ip}
 57c:	00000024 	andeq	r0, r0, r4, lsr #32
 580:	08001328 	stmdaeq	r0, {r3, r5, r8, r9, ip}
 584:	0000001c 	andeq	r0, r0, ip, lsl r0
 588:	08001344 	stmdaeq	r0, {r2, r6, r8, r9, ip}
 58c:	00000040 	andeq	r0, r0, r0, asr #32
 590:	08001384 	stmdaeq	r0, {r2, r7, r8, r9, ip}
 594:	000002dc 	ldrdeq	r0, [r0], -ip
 598:	08001660 	stmdaeq	r0, {r5, r6, r9, sl, ip}
 59c:	000000c8 	andeq	r0, r0, r8, asr #1
 5a0:	08001728 	stmdaeq	r0, {r3, r5, r8, r9, sl, ip}
 5a4:	00000038 	andeq	r0, r0, r8, lsr r0
 5a8:	08001760 	stmdaeq	r0, {r5, r6, r8, r9, sl, ip}
 5ac:	0000005c 	andeq	r0, r0, ip, asr r0
 5b0:	00000000 	andeq	r0, r0, r0
 5b4:	00000002 	andeq	r0, r0, r2
	...
 5c0:	00000024 	andeq	r0, r0, r4, lsr #32
 5c4:	44480002 	strbmi	r0, [r8], #-2
 5c8:	00040000 	andeq	r0, r4, r0
 5cc:	00000000 	andeq	r0, r0, r0
 5d0:	080017bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, ip}
 5d4:	00000030 	andeq	r0, r0, r0, lsr r0
 5d8:	080017ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, ip}
 5dc:	00000024 	andeq	r0, r0, r4, lsr #32
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	0000005e 	andeq	r0, r0, lr, asr r0
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	00000002 	andeq	r0, r0, r2
       8:	01040000 	mrseq	r0, (UNDEF: 4)
	...
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      14:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
      1c:	5f632f62 	svcpl	0x00632f62
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	796c6e6f 	stmdbvc	ip!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
      24:	6174735f 	cmnvs	r4, pc, asr r3
      28:	70757472 	rsbsvc	r7, r5, r2, ror r4
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	2f00732e 	svccs	0x0000732e
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	6964656d 	stmdbvs	r4!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
      34:	66732f61 	ldrbtvs	r2, [r3], -r1, ror #30
      38:	7469475f 	strbtvc	r4, [r9], #-1887	; 0x75f

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	2f627548 	svccs	0x00627548

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	7274614d 	rsbsvc	r6, r4, #1073741843	; 0x40000013
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	42207869 	eormi	r7, r0, #6881280	; 0x690000
      48:	6c746f6f 	ldclvs	15, cr6, [r4], #-444	; 0xfffffe44
      4c:	6564616f 	strbvs	r6, [r4, #-367]!	; 0x16f

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	4e470072 	mcrmi	0, 2, r0, cr7, cr2, {3}
      54:	53412055 	movtpl	r2, #4181	; 0x1055
      58:	322e3220 	eorcc	r3, lr, #32, 4
      5c:	00322e33 	eorseq	r2, r2, r3, lsr lr
      60:	00648001 	rsbeq	r8, r4, r1
      64:	00020000 	andeq	r0, r2, r0
      68:	00000012 	andeq	r0, r0, r2, lsl r0
      6c:	00750104 	rsbseq	r0, r5, r4, lsl #2
	...
      78:	2f2e0000 	svccs	0x002e0000
      7c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
      80:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
      84:	6f632f62 	svcvs	0x00632f62
      88:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
      8c:	6d5f336d 	ldclvs	3, cr3, [pc, #-436]	; fffffee0 <BootRAM+0xef70681>
      90:	6f726361 	svcvs	0x00726361
      94:	2f00532e 	svccs	0x0000532e
      98:	6964656d 	stmdbvs	r4!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
      9c:	66732f61 	ldrbtvs	r2, [r3], -r1, ror #30
      a0:	7469475f 	strbtvc	r4, [r9], #-1887	; 0x75f
      a4:	2f627548 	svccs	0x00627548
      a8:	7274614d 	rsbsvc	r6, r4, #1073741843	; 0x40000013
      ac:	42207869 	eormi	r7, r0, #6881280	; 0x690000
      b0:	6c746f6f 	ldclvs	15, cr6, [r4], #-444	; 0xfffffe44
      b4:	6564616f 	strbvs	r6, [r4, #-367]!	; 0x16f
      b8:	4e470072 	mcrmi	0, 2, r0, cr7, cr2, {3}
      bc:	53412055 	movtpl	r2, #4181	; 0x1055
      c0:	322e3220 	eorcc	r3, lr, #32, 4
      c4:	00322e33 	eorseq	r2, r2, r3, lsr lr
      c8:	0d0e8001 	stceq	0, cr8, [lr, #-4]
      cc:	00040000 	andeq	r0, r4, r0
      d0:	00000026 	andeq	r0, r0, r6, lsr #32
      d4:	01580104 	cmpeq	r8, r4, lsl #2
      d8:	17010000 	strne	r0, [r1, -r0]
      dc:	62000001 	andvs	r0, r0, #1
      e0:	20000008 	andcs	r0, r0, r8
      e4:	00000000 	andeq	r0, r0, r0
      e8:	1b000000 	blne	f0 <_Minimum_Stack_Size-0x10>
      ec:	02000001 	andeq	r0, r0, #1
      f0:	01f60504 	mvnseq	r0, r4, lsl #10
      f4:	02020000 	andeq	r0, r2, #0
      f8:	00069805 	andeq	r9, r6, r5, lsl #16
      fc:	06010200 	streq	r0, [r1], -r0, lsl #4
     100:	00000644 	andeq	r0, r0, r4, asr #12
     104:	32337503 	eorscc	r7, r3, #12582912	; 0xc00000
     108:	45270200 	strmi	r0, [r7, #-512]!	; 0x200
     10c:	02000000 	andeq	r0, r0, #0
     110:	037b0704 	cmneq	fp, #4, 14	; 0x100000
     114:	75030000 	strvc	r0, [r3, #-0]
     118:	02003631 	andeq	r3, r0, #51380224	; 0x3100000
     11c:	00005728 	andeq	r5, r0, r8, lsr #14
     120:	07020200 	streq	r0, [r2, -r0, lsl #4]
     124:	000003d7 	ldrdeq	r0, [r0], -r7
     128:	00387503 	eorseq	r7, r8, r3, lsl #10
     12c:	00682902 	rsbeq	r2, r8, r2, lsl #18
     130:	01020000 	mrseq	r0, (UNDEF: 2)
     134:	00064208 	andeq	r4, r6, r8, lsl #4
     138:	04460400 	strbeq	r0, [r6], #-1024	; 0x400
     13c:	2f020000 	svccs	0x00020000
     140:	0000007a 	andeq	r0, r0, sl, ror r0
     144:	00004505 	andeq	r4, r0, r5, lsl #10
     148:	01530400 	cmpeq	r3, r0, lsl #8
     14c:	30020000 	andcc	r0, r2, r0
     150:	0000008a 	andeq	r0, r0, sl, lsl #1
     154:	00005705 	andeq	r5, r0, r5, lsl #14
     158:	75760300 	ldrbvc	r0, [r6, #-768]!	; 0x300
     15c:	31020038 	tstcc	r2, r8, lsr r0
     160:	0000009a 	muleq	r0, sl, r0
     164:	00006805 	andeq	r6, r0, r5, lsl #16
     168:	02010600 	andeq	r0, r1, #0, 12
     16c:	0000b437 	andeq	fp, r0, r7, lsr r4
     170:	05cf0700 	strbeq	r0, [pc, #1792]	; 878 <__Stack_Size+0x478>
     174:	07000000 	streq	r0, [r0, -r0]
     178:	0000073d 	andeq	r0, r0, sp, lsr r7
     17c:	33040001 	movwcc	r0, #16385	; 0x4001
     180:	02000004 	andeq	r0, r0, #4
     184:	00009f37 	andeq	r9, r0, r7, lsr pc
     188:	07040200 	streq	r0, [r4, -r0, lsl #4]
     18c:	00000515 	andeq	r0, r0, r5, lsl r5
     190:	a9030408 	stmdbge	r3, {r3, sl}
     194:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     198:	00044b09 	andeq	r4, r4, r9, lsl #22
     19c:	5eaa0300 	cdppl	3, 10, cr0, cr10, cr0, {0}
     1a0:	00000000 	andeq	r0, r0, r0
     1a4:	00046e09 	andeq	r6, r4, r9, lsl #28
     1a8:	5eab0300 	cdppl	3, 10, cr0, cr11, cr0, {0}
     1ac:	01000000 	mrseq	r0, (UNDEF: 0)
     1b0:	00035009 	andeq	r5, r3, r9
     1b4:	5eac0300 	cdppl	3, 10, cr0, cr12, cr0, {0}
     1b8:	02000000 	andeq	r0, r0, #0
     1bc:	00000009 	andeq	r0, r0, r9
     1c0:	b4ad0300 	strtlt	r0, [sp], #768	; 0x300
     1c4:	03000000 	movweq	r0, #0
     1c8:	04900400 	ldreq	r0, [r0], #1024	; 0x400
     1cc:	ae030000 	cdpge	0, 0, cr0, cr3, cr0, {0}
     1d0:	000000c6 	andeq	r0, r0, r6, asr #1
     1d4:	0110040a 	tsteq	r0, sl, lsl #8
     1d8:	0c0b0000 	stceq	0, cr0, [fp], {-0}
     1dc:	0000036b 	andeq	r0, r0, fp, ror #6
     1e0:	36160501 	ldrcc	r0, [r6], -r1, lsl #10
     1e4:	07000001 	streq	r0, [r0, -r1]
     1e8:	000000fe 	strdeq	r0, [r0], -lr
     1ec:	02aa0700 	adceq	r0, sl, #0, 14
     1f0:	07010000 	streq	r0, [r1, -r0]
     1f4:	000007f2 	strdeq	r0, [r0], -r2
     1f8:	04230702 	strteq	r0, [r3], #-1794	; 0x702
     1fc:	00030000 	andeq	r0, r3, r0
     200:	00008c0d 	andeq	r8, r0, sp, lsl #24
     204:	24040800 	strcs	r0, [r4], #-2048	; 0x800
     208:	0000015b 	andeq	r0, r0, fp, asr r1
     20c:	00013d09 	andeq	r3, r1, r9, lsl #26
     210:	5b260400 	blpl	981218 <__Stack_Size+0x980e18>
     214:	00000001 	andeq	r0, r0, r1
     218:	00059309 	andeq	r9, r5, r9, lsl #6
     21c:	4c270400 	cfstrsmi	mvf0, [r7], #-0
     220:	04000000 	streq	r0, [r0], #-0
     224:	5e040a00 	vmlapl.f32	s0, s8, s0
     228:	04000000 	streq	r0, [r0], #-0
     22c:	000002d6 	ldrdeq	r0, [r0], -r6
     230:	01362904 	teqeq	r6, r4, lsl #18
     234:	d5040000 	strle	r0, [r4, #-0]
     238:	04000002 	streq	r0, [r0], #-2
     23c:	00017729 	andeq	r7, r1, r9, lsr #14
     240:	36040a00 	strcc	r0, [r4], -r0, lsl #20
     244:	0c000001 	stceq	0, cr0, [r0], {1}
     248:	00000735 	andeq	r0, r0, r5, lsr r7
     24c:	a22d0401 	eorge	r0, sp, #16777216	; 0x1000000
     250:	07000001 	streq	r0, [r0, -r1]
     254:	000008e9 	andeq	r0, r0, r9, ror #17
     258:	03ea0700 	mvneq	r0, #0, 14
     25c:	07010000 	streq	r0, [r1, -r0]
     260:	00000774 	andeq	r0, r0, r4, ror r7
     264:	02220702 	eoreq	r0, r2, #524288	; 0x80000
     268:	00030000 	andeq	r0, r3, r0
     26c:	00073604 	andeq	r3, r7, r4, lsl #12
     270:	7d340400 	cfldrsvc	mvf0, [r4, #-0]
     274:	0d000001 	stceq	0, cr0, [r0, #-4]
     278:	0000090e 	andeq	r0, r0, lr, lsl #18
     27c:	ea38040c 	b	e012b4 <__Stack_Size+0xe00eb4>
     280:	09000001 	stmdbeq	r0, {r0}
     284:	00000290 	muleq	r0, r0, r2
     288:	004c5004 	subeq	r5, ip, r4
     28c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     290:	00000319 	andeq	r0, r0, r9, lsl r3
     294:	004c5104 	subeq	r5, ip, r4, lsl #2
     298:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
     29c:	000015a6 	andeq	r1, r0, r6, lsr #11
     2a0:	004c5204 	subeq	r5, ip, r4, lsl #4
     2a4:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
     2a8:	000000e3 	andeq	r0, r0, r3, ror #1
     2ac:	01f95304 	mvnseq	r5, r4, lsl #6
     2b0:	00080000 	andeq	r0, r8, r0
     2b4:	00015b0e 	andeq	r5, r1, lr, lsl #22
     2b8:	0001f900 	andeq	pc, r1, r0, lsl #18
     2bc:	004c0f00 	subeq	r0, ip, r0, lsl #30
     2c0:	0a000000 	beq	2c8 <_Minimum_Stack_Size+0x1c8>
     2c4:	0001ea04 	andeq	lr, r1, r4, lsl #20
     2c8:	090f0400 	stmdbeq	pc, {sl}	; <UNPREDICTABLE>
     2cc:	54040000 	strpl	r0, [r4], #-0
     2d0:	000001ad 	andeq	r0, r0, sp, lsr #3
     2d4:	0007cd0d 	andeq	ip, r7, sp, lsl #26
     2d8:	58040200 	stmdapl	r4, {r9}
     2dc:	0000022f 	andeq	r0, r0, pc, lsr #4
     2e0:	00092d09 	andeq	r2, r9, r9, lsl #26
     2e4:	5e5a0400 	cdppl	4, 5, cr0, cr10, cr0, {0}
     2e8:	00000000 	andeq	r0, r0, r0
     2ec:	0003b009 	andeq	fp, r3, r9
     2f0:	5e5b0400 	cdppl	4, 5, cr0, cr11, cr0, {0}
     2f4:	01000000 	mrseq	r0, (UNDEF: 0)
     2f8:	07ce0400 	strbeq	r0, [lr, r0, lsl #8]
     2fc:	5d040000 	stcpl	0, cr0, [r4, #-0]
     300:	0000020a 	andeq	r0, r0, sl, lsl #4
     304:	00574210 	subseq	r4, r7, r0, lsl r2
     308:	5e620402 	cdppl	4, 6, cr0, cr2, cr2, {0}
     30c:	11000002 	tstne	r0, r2
     310:	00306262 	eorseq	r6, r0, r2, ror #4
     314:	005e6504 	subseq	r6, lr, r4, lsl #10
     318:	11000000 	mrsne	r0, (UNDEF: 0)
     31c:	00316262 	eorseq	r6, r1, r2, ror #4
     320:	005e6604 	subseq	r6, lr, r4, lsl #12
     324:	00010000 	andeq	r0, r1, r0
     328:	5f040212 	svcpl	0x00040212
     32c:	0000027a 	andeq	r0, r0, sl, ror r2
     330:	04007713 	streq	r7, [r0], #-1811	; 0x713
     334:	00004c61 	andeq	r4, r0, r1, ror #24
     338:	77621300 	strbvc	r1, [r2, -r0, lsl #6]!
     33c:	3a680400 	bcc	1a01344 <__Stack_Size+0x1a00f44>
     340:	00000002 	andeq	r0, r0, r2
     344:	0003ff04 	andeq	pc, r3, r4, lsl #30
     348:	5e690400 	cdppl	4, 6, cr0, cr9, cr0, {0}
     34c:	0d000002 	stceq	0, cr0, [r0, #-8]
     350:	0000003c 	andeq	r0, r0, ip, lsr r0
     354:	166b041c 			; <UNDEFINED> instruction: 0x166b041c
     358:	09000003 	stmdbeq	r0, {r0, r1}
     35c:	00000550 	andeq	r0, r0, r0, asr r5
     360:	005e6d04 	subseq	r6, lr, r4, lsl #26
     364:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     368:	00000216 	andeq	r0, r0, r6, lsl r2
     36c:	005e6e04 	subseq	r6, lr, r4, lsl #28
     370:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
     374:	00000418 	andeq	r0, r0, r8, lsl r4
     378:	027a6f04 	rsbseq	r6, sl, #4, 30
     37c:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
     380:	00000148 	andeq	r0, r0, r8, asr #2
     384:	027a7004 	rsbseq	r7, sl, #4
     388:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
     38c:	0000080d 	andeq	r0, r0, sp, lsl #16
     390:	027a7104 	rsbseq	r7, sl, #4, 2
     394:	09060000 	stmdbeq	r6, {}	; <UNPREDICTABLE>
     398:	0000093c 	andeq	r0, r0, ip, lsr r9
     39c:	005e7304 	subseq	r7, lr, r4, lsl #6
     3a0:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
     3a4:	000003a0 	andeq	r0, r0, r0, lsr #7
     3a8:	005e7404 	subseq	r7, lr, r4, lsl #8
     3ac:	09090000 	stmdbeq	r9, {}	; <UNPREDICTABLE>
     3b0:	000004a1 	andeq	r0, r0, r1, lsr #9
     3b4:	005e7504 	subseq	r7, lr, r4, lsl #10
     3b8:	090a0000 	stmdbeq	sl, {}	; <UNPREDICTABLE>
     3bc:	00000885 	andeq	r0, r0, r5, lsl #17
     3c0:	005e7604 	subseq	r7, lr, r4, lsl #12
     3c4:	090b0000 	stmdbeq	fp, {}	; <UNPREDICTABLE>
     3c8:	0000061c 	andeq	r0, r0, ip, lsl r6
     3cc:	005e7704 	subseq	r7, lr, r4, lsl #14
     3d0:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
     3d4:	00000713 	andeq	r0, r0, r3, lsl r7
     3d8:	01ff7a04 	mvnseq	r7, r4, lsl #20
     3dc:	00100000 	andseq	r0, r0, r0
     3e0:	00003d04 	andeq	r3, r0, r4, lsl #26
     3e4:	857b0400 	ldrbhi	r0, [fp, #-1024]!	; 0x400
     3e8:	0d000002 	stceq	0, cr0, [r0, #-8]
     3ec:	00000742 	andeq	r0, r0, r2, asr #14
     3f0:	ca7d0434 	bgt	1f414c8 <__Stack_Size+0x1f410c8>
     3f4:	09000003 	stmdbeq	r0, {r0, r1}
     3f8:	0000053d 	andeq	r0, r0, sp, lsr r5
     3fc:	010a7f04 	tsteq	sl, r4, lsl #30
     400:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     404:	000003c7 	andeq	r0, r0, r7, asr #7
     408:	010a8004 	tsteq	sl, r4
     40c:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
     410:	0000079a 	muleq	r0, sl, r7
     414:	010a8304 	tsteq	sl, r4, lsl #6
     418:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
     41c:	000007ac 	andeq	r0, r0, ip, lsr #15
     420:	010a8404 	tsteq	sl, r4, lsl #8
     424:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
     428:	0000051e 	andeq	r0, r0, lr, lsl r5
     42c:	03d99604 	bicseq	r9, r9, #4, 12	; 0x400000
     430:	09100000 	ldmdbeq	r0, {}	; <UNPREDICTABLE>
     434:	000006f7 	strdeq	r0, [r0], -r7
     438:	03d9a104 	bicseq	sl, r9, #4, 2
     43c:	09140000 	ldmdbeq	r4, {}	; <UNPREDICTABLE>
     440:	000004e8 	andeq	r0, r0, r8, ror #9
     444:	03f3ab04 	mvnseq	sl, #4, 22	; 0x1000
     448:	09180000 	ldmdbeq	r8, {}	; <UNPREDICTABLE>
     44c:	00000134 	andeq	r0, r0, r4, lsr r1
     450:	01f9ad04 	mvnseq	sl, r4, lsl #26
     454:	091c0000 	ldmdbeq	ip, {}	; <UNPREDICTABLE>
     458:	00000202 	andeq	r0, r0, r2, lsl #4
     45c:	01f9ae04 	mvnseq	sl, r4, lsl #28
     460:	09200000 	stmdbeq	r0!, {}	; <UNPREDICTABLE>
     464:	0000081c 	andeq	r0, r0, ip, lsl r8
     468:	01f9af04 	mvnseq	sl, r4, lsl #30
     46c:	09240000 	stmdbeq	r4!, {}	; <UNPREDICTABLE>
     470:	00000604 	andeq	r0, r0, r4, lsl #12
     474:	01f9b004 	mvnseq	fp, r4
     478:	09280000 	stmdbeq	r8!, {}	; <UNPREDICTABLE>
     47c:	0000057b 	andeq	r0, r0, fp, ror r5
     480:	015bb204 	cmpeq	fp, r4, lsl #4
     484:	092c0000 	stmdbeq	ip!, {}	; <UNPREDICTABLE>
     488:	000015a3 	andeq	r1, r0, r3, lsr #11
     48c:	005eb304 	subseq	fp, lr, r4, lsl #6
     490:	00300000 	eorseq	r0, r0, r0
     494:	0001a20e 	andeq	sl, r1, lr, lsl #4
     498:	0003d900 	andeq	sp, r3, r0, lsl #18
     49c:	005e0f00 	subseq	r0, lr, r0, lsl #30
     4a0:	0a000000 	beq	4a8 <__Stack_Size+0xa8>
     4a4:	0003ca04 	andeq	ip, r3, r4, lsl #20
     4a8:	01a20e00 			; <UNDEFINED> instruction: 0x01a20e00
     4ac:	03f30000 	mvnseq	r0, #0
     4b0:	5e0f0000 	cdppl	0, 0, cr0, cr15, cr0, {0}
     4b4:	0f000000 	svceq	0x00000000
     4b8:	0000005e 	andeq	r0, r0, lr, asr r0
     4bc:	df040a00 	svcle	0x00040a00
     4c0:	04000003 	streq	r0, [r0], #-3
     4c4:	00000743 	andeq	r0, r0, r3, asr #14
     4c8:	0321b504 	teqeq	r1, #4, 10	; 0x1000000
     4cc:	500d0000 	andpl	r0, sp, r0
     4d0:	24000006 	strcs	r0, [r0], #-6
     4d4:	047db704 	ldrbteq	fp, [sp], #-1796	; 0x704
     4d8:	bd090000 	stclt	0, cr0, [r9, #-0]
     4dc:	04000006 	streq	r0, [r0], #-6
     4e0:	00010ab9 			; <UNDEFINED> instruction: 0x00010ab9
     4e4:	b9090000 	stmdblt	r9, {}	; <UNPREDICTABLE>
     4e8:	04000005 	streq	r0, [r0], #-5
     4ec:	00010aba 			; <UNDEFINED> instruction: 0x00010aba
     4f0:	d5090400 	strle	r0, [r9, #-1024]	; 0x400
     4f4:	04000005 	streq	r0, [r0], #-5
     4f8:	00010abb 			; <UNDEFINED> instruction: 0x00010abb
     4fc:	ec090800 	stc	8, cr0, [r9], {-0}
     500:	04000000 	streq	r0, [r0], #-0
     504:	00010abc 			; <UNDEFINED> instruction: 0x00010abc
     508:	89090c00 	stmdbhi	r9, {sl, fp}
     50c:	04000006 	streq	r0, [r0], #-6
     510:	00010abd 			; <UNDEFINED> instruction: 0x00010abd
     514:	06091000 	streq	r1, [r9], -r0
     518:	04000004 	streq	r0, [r0], #-4
     51c:	00010abe 			; <UNDEFINED> instruction: 0x00010abe
     520:	6c091400 	cfstrsvs	mvf1, [r9], {-0}
     524:	04000000 	streq	r0, [r0], #-0
     528:	00010abf 			; <UNDEFINED> instruction: 0x00010abf
     52c:	a3091800 	movwge	r1, #38912	; 0x9800
     530:	04000005 	streq	r0, [r0], #-5
     534:	00010ac0 	andeq	r0, r1, r0, asr #21
     538:	1c091c00 	stcne	12, cr1, [r9], {-0}
     53c:	04000000 	streq	r0, [r0], #-0
     540:	00010ac1 	andeq	r0, r1, r1, asr #21
     544:	04002000 	streq	r2, [r0], #-0
     548:	00000651 	andeq	r0, r0, r1, asr r6
     54c:	0404c304 	streq	ip, [r4], #-772	; 0x304
     550:	db0c0000 	blle	300558 <__Stack_Size+0x300158>
     554:	01000008 	tsteq	r0, r8
     558:	04c53d06 	strbeq	r3, [r5], #3334	; 0xd06
     55c:	36070000 	strcc	r0, [r7], -r0
     560:	00000002 	andeq	r0, r0, r2
     564:	0008cb07 	andeq	ip, r8, r7, lsl #22
     568:	d3070100 	movwle	r0, #28928	; 0x7100
     56c:	02000006 	andeq	r0, r0, #6
     570:	00006007 	andeq	r6, r0, r7
     574:	c2070300 	andgt	r0, r7, #0, 6
     578:	04000000 	streq	r0, [r0], #-0
     57c:	0005f707 	andeq	pc, r5, r7, lsl #14
     580:	f4070500 	vst3.8	{d0,d2,d4}, [r7], r0
     584:	06000003 	streq	r0, [r0], -r3
     588:	00058707 	andeq	r8, r5, r7, lsl #14
     58c:	04000700 	streq	r0, [r0], #-1792	; 0x700
     590:	000008dc 	ldrdeq	r0, [r0], -ip
     594:	04884606 	streq	r4, [r8], #1542	; 0x606
     598:	420c0000 	andmi	r0, ip, #0
     59c:	01000005 	tsteq	r0, r5
     5a0:	05014806 	streq	r4, [r1, #-2054]	; 0x806
     5a4:	f5070000 			; <UNDEFINED> instruction: 0xf5070000
     5a8:	00000008 	andeq	r0, r0, r8
     5ac:	00033807 	andeq	r3, r3, r7, lsl #16
     5b0:	0f070100 	svceq	0x00070100
     5b4:	02000001 	andeq	r0, r0, #1
     5b8:	0000b807 	andeq	fp, r0, r7, lsl #16
     5bc:	c1070300 	mrsgt	r0, SP_und
     5c0:	04000008 	streq	r0, [r0], #-8
     5c4:	00084b07 	andeq	r4, r8, r7, lsl #22
     5c8:	08000500 	stmdaeq	r0, {r8, sl}
     5cc:	229c0102 	addscs	r0, ip, #-2147483648	; 0x80000000
     5d0:	09000005 	stmdbeq	r0, {r0, r2}
     5d4:	0000004f 	andeq	r0, r0, pc, asr #32
     5d8:	05229d01 	streq	r9, [r2, #-3329]!	; 0xd01
     5dc:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     5e0:	000000a5 	andeq	r0, r0, r5, lsr #1
     5e4:	05279e01 	streq	r9, [r7, #-3585]!	; 0xe01
     5e8:	00010000 	andeq	r0, r1, r0
     5ec:	0004c505 	andeq	ip, r4, r5, lsl #10
     5f0:	005e0500 	subseq	r0, lr, r0, lsl #10
     5f4:	41140000 	tstmi	r4, r0
     5f8:	01000003 	tsteq	r0, r3
     5fc:	01a20164 			; <UNDEFINED> instruction: 0x01a20164
     600:	4a010000 	bmi	40608 <__Stack_Size+0x40208>
     604:	15000005 	strne	r0, [r0, #-5]
     608:	000007ea 	andeq	r0, r0, sl, ror #15
     60c:	5e016401 	cdppl	4, 0, cr6, cr1, cr1, {0}
     610:	00000000 	andeq	r0, r0, r0
     614:	0004b716 	andeq	fp, r4, r6, lsl r7
     618:	01a60100 			; <UNDEFINED> instruction: 0x01a60100
     61c:	00096217 	andeq	r6, r9, r7, lsl r2
     620:	3ca20100 	stfccs	f0, [r2]
     624:	02080001 	andeq	r0, r8, #1
     628:	01000000 	mrseq	r0, (UNDEF: 0)
     62c:	0394189c 	orrseq	r1, r4, #156, 16	; 0x9c0000
     630:	37010000 	strcc	r0, [r1, -r0]
     634:	00013e01 	andeq	r3, r1, r1, lsl #28
     638:	00000208 	andeq	r0, r0, r8, lsl #4
     63c:	189c0100 	ldmne	ip, {r8}
     640:	0000030c 	andeq	r0, r0, ip, lsl #6
     644:	40013a01 	andmi	r3, r1, r1, lsl #20
     648:	02080001 	andeq	r0, r8, #1
     64c:	01000000 	mrseq	r0, (UNDEF: 0)
     650:	06e0199c 	usateq	r1, #0, ip, lsl #19
     654:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
     658:	0001a201 	andeq	sl, r1, r1, lsl #4
     65c:	00014200 	andeq	r4, r1, r0, lsl #4
     660:	00000a08 	andeq	r0, r0, r8, lsl #20
     664:	c09c0100 	addsgt	r0, ip, r0, lsl #2
     668:	1a000005 	bne	684 <__Stack_Size+0x284>
     66c:	00000464 	andeq	r0, r0, r4, ror #8
     670:	5e016e01 	cdppl	14, 0, cr6, cr1, cr1, {0}
     674:	00000000 	andeq	r0, r0, r0
     678:	1b000000 	blne	680 <__Stack_Size+0x280>
     67c:	00000782 	andeq	r0, r0, r2, lsl #15
     680:	5e016e01 	cdppl	14, 0, cr6, cr1, cr1, {0}
     684:	01000000 	mrseq	r0, (UNDEF: 0)
     688:	5c180051 	ldcpl	0, cr0, [r8], {81}	; 0x51
     68c:	01000002 	tsteq	r0, r2
     690:	014c0195 			; <UNDEFINED> instruction: 0x014c0195
     694:	00020800 	andeq	r0, r2, r0, lsl #16
     698:	9c010000 	stcls	0, cr0, [r1], {-0}
     69c:	00074f18 	andeq	r4, r7, r8, lsl pc
     6a0:	01990100 	orrseq	r0, r9, r0, lsl #2
     6a4:	08000150 	stmdaeq	r0, {r4, r6, r8}
     6a8:	00000018 	andeq	r0, r0, r8, lsl r0
     6ac:	97189c01 	ldrls	r9, [r8, -r1, lsl #24]
     6b0:	01000008 	tsteq	r0, r8
     6b4:	0168019f 			; <UNDEFINED> instruction: 0x0168019f
     6b8:	00020800 	andeq	r0, r2, r0, lsl #16
     6bc:	9c010000 	stcls	0, cr0, [r1], {-0}
     6c0:	00072518 	andeq	r2, r7, r8, lsl r5
     6c4:	01a30100 			; <UNDEFINED> instruction: 0x01a30100
     6c8:	0800016a 	stmdaeq	r0, {r1, r3, r5, r6, r8}
     6cc:	00000002 	andeq	r0, r0, r2
     6d0:	01189c01 	tsteq	r8, r1, lsl #24
     6d4:	01000009 	tsteq	r0, r9
     6d8:	016c01a7 	smultbeq	ip, r7, r1
     6dc:	00020800 	andeq	r0, r2, r0, lsl #16
     6e0:	9c010000 	stcls	0, cr0, [r1], {-0}
     6e4:	00091d18 	andeq	r1, r9, r8, lsl sp
     6e8:	01ab0100 			; <UNDEFINED> instruction: 0x01ab0100
     6ec:	0800016e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8}
     6f0:	00000002 	andeq	r0, r0, r2
     6f4:	d2189c01 	andsle	r9, r8, #256	; 0x100
     6f8:	01000004 	tsteq	r0, r4
     6fc:	017001af 	cmneq	r0, pc, lsr #3
     700:	00020800 	andeq	r0, r2, r0, lsl #16
     704:	9c010000 	stcls	0, cr0, [r1], {-0}
     708:	0000cf18 	andeq	ip, r0, r8, lsl pc
     70c:	01b30100 			; <UNDEFINED> instruction: 0x01b30100
     710:	08000172 	stmdaeq	r0, {r1, r4, r5, r6, r8}
     714:	00000002 	andeq	r0, r0, r2
     718:	e5189c01 	ldr	r9, [r8, #-3073]	; 0xc01
     71c:	01000002 	tsteq	r0, r2
     720:	017401b7 	ldrheq	r0, [r4, #-23]!	; 0xffffffe9
     724:	000c0800 	andeq	r0, ip, r0, lsl #16
     728:	9c010000 	stcls	0, cr0, [r1], {-0}
     72c:	0003c41c 	andeq	ip, r3, ip, lsl r4
     730:	011e0100 	tsteq	lr, r0, lsl #2
     734:	08000180 	stmdaeq	r0, {r7, r8}
     738:	000000a8 	andeq	r0, r0, r8, lsr #1
     73c:	06eb9c01 	strbteq	r9, [fp], r1, lsl #24
     740:	b01d0000 	andslt	r0, sp, r0
     744:	12080001 	andne	r0, r8, #1
     748:	96000000 	strls	r0, [r0], -r0
     74c:	1e000006 	cdpne	0, 0, cr0, cr0, cr6, {0}
     750:	0000045b 	andeq	r0, r0, fp, asr r4
     754:	4c012801 	stcmi	8, cr2, [r1], {1}
     758:	21000000 	mrscs	r0, (UNDEF: 0)
     75c:	00000000 	andeq	r0, r0, r0
     760:	0001861f 	andeq	r8, r1, pc, lsl r6
     764:	000c3008 	andeq	r3, ip, r8
     768:	01e62000 	mvneq	r2, r0
     76c:	0c370800 	ldceq	8, cr0, [r7], #-0
     770:	06b30000 	ldrteq	r0, [r3], r0
     774:	01210000 	teqeq	r1, r0
     778:	00740250 	rsbseq	r0, r4, r0, asr r2
     77c:	01f42000 	mvnseq	r2, r0
     780:	0c490800 	mcrreq	8, 0, r0, r9, cr0
     784:	06c70000 	strbeq	r0, [r7], r0
     788:	01210000 	teqeq	r1, r0
     78c:	00740250 	rsbseq	r0, r4, r0, asr r2
     790:	01fa2000 	mvnseq	r2, r0
     794:	0c600800 	stcleq	8, cr0, [r0], #-0
     798:	06db0000 	ldrbeq	r0, [fp], r0
     79c:	01210000 	teqeq	r1, r0
     7a0:	00740250 	rsbseq	r0, r4, r0, asr r2
     7a4:	020a2200 	andeq	r2, sl, #0, 4
     7a8:	0c720800 	ldcleq	8, cr0, [r2], #-0
     7ac:	01210000 	teqeq	r1, r0
     7b0:	00300150 	eorseq	r0, r0, r0, asr r1
     7b4:	06351900 	ldrteq	r1, [r5], -r0, lsl #18
     7b8:	3d010000 	stccc	0, cr0, [r1, #-0]
     7bc:	0001a201 	andeq	sl, r1, r1, lsl #4
     7c0:	00022800 	andeq	r2, r2, r0, lsl #16
     7c4:	00006008 	andeq	r6, r0, r8
     7c8:	3b9c0100 	blcc	fe700bd0 <BootRAM+0xd671371>
     7cc:	1a000007 	bne	7f0 <__Stack_Size+0x3f0>
     7d0:	000007ea 	andeq	r0, r0, sl, ror #15
     7d4:	5e013d01 	cdppl	13, 0, cr3, cr1, cr1, {0}
     7d8:	70000000 	andvc	r0, r0, r0
     7dc:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
     7e0:	00000949 	andeq	r0, r0, r9, asr #18
     7e4:	f9013e01 			; <UNDEFINED> instruction: 0xf9013e01
     7e8:	91000001 	tstls	r0, r1
     7ec:	1f000000 	svcne	0x00000000
     7f0:	08000240 	stmdaeq	r0, {r6, r9}
     7f4:	00000c83 	andeq	r0, r0, r3, lsl #25
     7f8:	00026c23 	andeq	r6, r2, r3, lsr #24
     7fc:	50012108 	andpl	r2, r1, r8, lsl #2
     800:	00007402 	andeq	r7, r0, r2, lsl #8
     804:	01311900 	teqeq	r1, r0, lsl #18
     808:	77010000 	strvc	r0, [r1, -r0]
     80c:	00015b01 	andeq	r5, r1, r1, lsl #22
     810:	00028800 	andeq	r8, r2, r0, lsl #16
     814:	00000c08 	andeq	r0, r0, r8, lsl #24
     818:	6f9c0100 	svcvs	0x009c0100
     81c:	24000007 	strcs	r0, [r0], #-7
     820:	006e656c 	rsbeq	r6, lr, ip, ror #10
     824:	4c017701 	stcmi	7, cr7, [r1], {1}
     828:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
     82c:	25000000 	strcs	r0, [r0, #-0]
     830:	0800028e 	stmdaeq	r0, {r1, r2, r3, r7, r9}
     834:	00000c8e 	andeq	r0, r0, lr, lsl #25
     838:	01ff1900 	mvnseq	r1, r0, lsl #18
     83c:	7b010000 	blvc	40844 <__Stack_Size+0x40444>
     840:	00015b01 	andeq	r5, r1, r1, lsl #22
     844:	00029400 	andeq	r9, r2, r0, lsl #8
     848:	00000c08 	andeq	r0, r0, r8, lsl #24
     84c:	a39c0100 	orrsge	r0, ip, #0, 2
     850:	24000007 	strcs	r0, [r0], #-7
     854:	006e656c 	rsbeq	r6, lr, ip, ror #10
     858:	4c017b01 	stcmi	11, cr7, [r1], {1}
     85c:	e9000000 	stmdb	r0, {}	; <UNPREDICTABLE>
     860:	25000000 	strcs	r0, [r0, #-0]
     864:	0800029a 	stmdaeq	r0, {r1, r3, r4, r7, r9}
     868:	00000c8e 	andeq	r0, r0, lr, lsl #25
     86c:	08191900 	ldmdaeq	r9, {r8, fp, ip}
     870:	7f010000 	svcvc	0x00010000
     874:	00015b01 	andeq	r5, r1, r1, lsl #22
     878:	0002a000 	andeq	sl, r2, r0
     87c:	00002008 	andeq	r2, r0, r8
     880:	e39c0100 	orrs	r0, ip, #0, 2
     884:	24000007 	strcs	r0, [r0], #-7
     888:	006e656c 	rsbeq	r6, lr, ip, ror #10
     88c:	4c017f01 	stcmi	15, cr7, [r1], {1}
     890:	0a000000 	beq	898 <__Stack_Size+0x498>
     894:	26000001 	strcs	r0, [r0], -r1
     898:	00000013 	andeq	r0, r0, r3, lsl r0
     89c:	5e018001 	cdppl	0, 0, cr8, cr1, cr1, {0}
     8a0:	25000000 	strcs	r0, [r0, #-0]
     8a4:	080002b4 	stmdaeq	r0, {r2, r4, r5, r7, r9}
     8a8:	00000c8e 	andeq	r0, r0, lr, lsl #25
     8ac:	06011900 	streq	r1, [r1], -r0, lsl #18
     8b0:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
     8b4:	00015b01 	andeq	r5, r1, r1, lsl #22
     8b8:	0002c000 	andeq	ip, r2, r0
     8bc:	00000c08 	andeq	r0, r0, r8, lsl #24
     8c0:	179c0100 	ldrne	r0, [ip, r0, lsl #2]
     8c4:	24000008 	strcs	r0, [r0], #-8
     8c8:	006e656c 	rsbeq	r6, lr, ip, ror #10
     8cc:	4c018801 	stcmi	8, cr8, [r1], {1}
     8d0:	44000000 	strmi	r0, [r0], #-0
     8d4:	25000001 	strcs	r0, [r0, #-1]
     8d8:	080002c6 	stmdaeq	r0, {r1, r2, r6, r7, r9}
     8dc:	00000c8e 	andeq	r0, r0, lr, lsl #25
     8e0:	052c2700 	streq	r2, [ip, #-1792]!	; 0x700
     8e4:	02cc0000 	sbceq	r0, ip, #0
     8e8:	00280800 	eoreq	r0, r8, r0, lsl #16
     8ec:	9c010000 	stcls	0, cr0, [r1], {-0}
     8f0:	00000850 	andeq	r0, r0, r0, asr r8
     8f4:	00053d28 	andeq	r3, r5, r8, lsr #26
     8f8:	00016500 	andeq	r6, r1, r0, lsl #10
     8fc:	02dc2900 	sbcseq	r2, ip, #0, 18
     900:	000e0800 	andeq	r0, lr, r0, lsl #16
     904:	3d280000 	stccc	0, cr0, [r8, #-0]
     908:	9f000005 	svcls	0x00000005
     90c:	1f000001 	svcne	0x00000001
     910:	080002e0 	stmdaeq	r0, {r5, r6, r7, r9}
     914:	00000c83 	andeq	r0, r0, r3, lsl #25
     918:	532a0000 	teqpl	sl, #0
     91c:	01000002 	tsteq	r0, r2
     920:	0002f428 	andeq	pc, r2, r8, lsr #8
     924:	00007c08 	andeq	r7, r0, r8, lsl #24
     928:	e19c0100 	orrs	r0, ip, r0, lsl #2
     92c:	2b000008 	blcs	954 <__Stack_Size+0x554>
     930:	00000683 	andeq	r0, r0, r3, lsl #13
     934:	08e13d01 	stmiaeq	r1!, {r0, r8, sl, fp, ip, sp}^
     938:	91020000 	mrsls	r0, (UNDEF: 2)
     93c:	054a2c6c 	strbeq	r2, [sl, #-3180]	; 0xc6c
     940:	03520000 	cmpeq	r2, #0
     944:	00040800 	andeq	r0, r4, r0, lsl #16
     948:	4f010000 	svcmi	0x00010000
     94c:	00000890 	muleq	r0, r0, r8
     950:	0003561f 	andeq	r5, r3, pc, lsl r6
     954:	000ca808 	andeq	sl, ip, r8, lsl #16
     958:	00200000 	eoreq	r0, r0, r0
     95c:	af080003 	svcge	0x00080003
     960:	a300000c 	movwge	r0, #12
     964:	21000008 	tstcs	r0, r8
     968:	3c015001 	stccc	0, cr5, [r1], {1}
     96c:	03122000 	tsteq	r2, #0
     970:	0cc40800 	stcleq	8, cr0, [r4], {0}
     974:	08c40000 	stmiaeq	r4, {}^	; <UNPREDICTABLE>
     978:	01210000 	teqeq	r1, r0
     97c:	21300152 	teqcs	r0, r2, asr r1
     980:	3c015101 	stfccs	f5, [r1], {1}
     984:	05500121 	ldrbeq	r0, [r0, #-289]	; 0x121
     988:	0108000c 	tsteq	r8, ip
     98c:	2c200040 	stccs	0, cr0, [r0], #-256	; 0xffffff00
     990:	af080003 	svcge	0x00080003
     994:	d700000c 	strle	r0, [r0, -ip]
     998:	21000008 	tstcs	r0, r8
     99c:	3c015001 	stccc	0, cr5, [r1], {1}
     9a0:	03381f00 	teqeq	r8, #0, 30
     9a4:	0cdf0800 	ldcleq	8, cr0, [pc], {0}
     9a8:	05000000 	streq	r0, [r0, #-0]
     9ac:	000008e6 	andeq	r0, r0, r6, ror #17
     9b0:	80070402 	andhi	r0, r7, r2, lsl #8
     9b4:	27000003 	strcs	r0, [r0, -r3]
     9b8:	0000054a 	andeq	r0, r0, sl, asr #10
     9bc:	00000000 	andeq	r0, r0, r0
     9c0:	00000004 	andeq	r0, r0, r4
     9c4:	090a9c01 	stmdbeq	sl, {r0, sl, fp, ip, pc}
     9c8:	00250000 	eoreq	r0, r5, r0
     9cc:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
     9d0:	0000000c 	andeq	r0, r0, ip
     9d4:	00009a2a 	andeq	r9, r0, sl, lsr #20
     9d8:	70ac0100 	adcvc	r0, ip, r0, lsl #2
     9dc:	1c080003 	stcne	0, cr0, [r8], {3}
     9e0:	01000000 	mrseq	r0, (UNDEF: 0)
     9e4:	00092f9c 	muleq	r9, ip, pc	; <UNPREDICTABLE>
     9e8:	02be2d00 	adcseq	r2, lr, #0, 26
     9ec:	ad010000 	stcge	0, cr0, [r1, #-0]
     9f0:	0000004c 	andeq	r0, r0, ip, asr #32
     9f4:	000001b5 			; <UNDEFINED> instruction: 0x000001b5
     9f8:	07bf2a00 	ldreq	r2, [pc, r0, lsl #20]!
     9fc:	b6010000 	strlt	r0, [r1], -r0
     a00:	0800038c 	stmdaeq	r0, {r2, r3, r7, r8, r9}
     a04:	00000018 	andeq	r0, r0, r8, lsl r0
     a08:	09579c01 	ldmdbeq	r7, {r0, sl, fp, ip, pc}^
     a0c:	be2b0000 	cdplt	0, 2, cr0, cr11, cr0, {0}
     a10:	01000002 	tsteq	r0, r2
     a14:	00004cb7 			; <UNDEFINED> instruction: 0x00004cb7
     a18:	00710600 	rsbseq	r0, r1, r0, lsl #12
     a1c:	9f1afb09 	svcls	0x001afb09
     a20:	00ae2a00 	adceq	r2, lr, r0, lsl #20
     a24:	c4010000 	strgt	r0, [r1], #-0
     a28:	080003a4 	stmdaeq	r0, {r2, r5, r7, r8, r9}
     a2c:	00000084 	andeq	r0, r0, r4, lsl #1
     a30:	099d9c01 	ldmibeq	sp, {r0, sl, fp, ip, pc}
     a34:	9c2e0000 	stcls	0, cr0, [lr], #-0
     a38:	01000002 	tsteq	r0, r2
     a3c:	0004c5c4 	andeq	ip, r4, r4, asr #11
     a40:	0001cc00 	andeq	ip, r1, r0, lsl #24
     a44:	02be2d00 	adcseq	r2, lr, #0, 26
     a48:	c5010000 	strgt	r0, [r1, #-0]
     a4c:	0000004c 	andeq	r0, r0, ip, asr #32
     a50:	0000021f 	andeq	r0, r0, pc, lsl r2
     a54:	0003c21f 	andeq	ip, r3, pc, lsl r2
     a58:	00092f08 	andeq	r2, r9, r8, lsl #30
     a5c:	03c81f00 	biceq	r1, r8, #0, 30
     a60:	092f0800 	stmdbeq	pc!, {fp}	; <UNPREDICTABLE>
     a64:	2f000000 	svccs	0x00000000
     a68:	00000561 	andeq	r0, r0, r1, ror #10
     a6c:	01a2f401 			; <UNDEFINED> instruction: 0x01a2f401
     a70:	04280000 	strteq	r0, [r8], #-0
     a74:	00280800 	eoreq	r0, r8, r0, lsl #16
     a78:	9c010000 	stcls	0, cr0, [r1], {-0}
     a7c:	000009c3 	andeq	r0, r0, r3, asr #19
     a80:	00045c30 	andeq	r5, r4, r0, lsr ip
     a84:	4cf50100 	ldfmie	f0, [r5]
     a88:	01000000 	mrseq	r0, (UNDEF: 0)
     a8c:	08563100 	ldmdaeq	r6, {r8, ip, sp}^
     a90:	03010000 	movweq	r0, #4096	; 0x1000
     a94:	0001a201 	andeq	sl, r1, r1, lsl #4
     a98:	00045000 	andeq	r5, r4, r0
     a9c:	00001c08 	andeq	r1, r0, r8, lsl #24
     aa0:	2a9c0100 	bcs	fe700ea8 <BootRAM+0xd671649>
     aa4:	000007d5 	ldrdeq	r0, [r0], -r5
     aa8:	046c5601 	strbteq	r5, [ip], #-1537	; 0x601
     aac:	00040800 	andeq	r0, r4, r0, lsl #16
     ab0:	9c010000 	stcls	0, cr0, [r1], {-0}
     ab4:	000009f8 	strdeq	r0, [r0], -r8
     ab8:	00047025 	andeq	r7, r4, r5, lsr #32
     abc:	0009c308 	andeq	ip, r9, r8, lsl #6
     ac0:	561c0000 	ldrpl	r0, [ip], -r0
     ac4:	01000000 	mrseq	r0, (UNDEF: 0)
     ac8:	047001bd 	ldrbteq	r0, [r0], #-445	; 0x1bd
     acc:	00240800 	eoreq	r0, r4, r0, lsl #16
     ad0:	9c010000 	stcls	0, cr0, [r1], {-0}
     ad4:	00000a2e 	andeq	r0, r0, lr, lsr #20
     ad8:	0002f932 	andeq	pc, r2, r2, lsr r9	; <UNPREDICTABLE>
     adc:	01be0100 			; <UNDEFINED> instruction: 0x01be0100
     ae0:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     ae4:	33749102 	cmncc	r4, #-2147483648	; 0x80000000
     ae8:	0800048e 	stmdaeq	r0, {r1, r2, r3, r7, sl}
     aec:	00000ceb 	andeq	r0, r0, fp, ror #25
     af0:	02500121 	subseq	r0, r0, #1073741832	; 0x40000008
     af4:	0000047d 	andeq	r0, r0, sp, ror r4
     af8:	0008051c 	andeq	r0, r8, ip, lsl r5
     afc:	01100100 	tsteq	r0, r0, lsl #2
     b00:	08000494 	stmdaeq	r0, {r2, r4, r7, sl}
     b04:	00000040 	andeq	r0, r0, r0, asr #32
     b08:	0a609c01 	beq	1827b14 <__Stack_Size+0x1827714>
     b0c:	9a1f0000 	bls	7c0b14 <__Stack_Size+0x7c0714>
     b10:	03080004 	movweq	r0, #32772	; 0x8004
     b14:	1f00000d 	svcne	0x0000000d
     b18:	080004a6 	stmdaeq	r0, {r1, r2, r5, r7, sl}
     b1c:	0000099d 	muleq	r0, sp, r9
     b20:	0004ba1f 	andeq	fp, r4, pc, lsl sl
     b24:	0009f808 	andeq	pc, r9, r8, lsl #16
     b28:	cd1c0000 	ldcgt	0, cr0, [ip, #-0]
     b2c:	01000003 	tsteq	r0, r3
     b30:	04d401c8 	ldrbeq	r0, [r4], #456	; 0x1c8
     b34:	00220800 	eoreq	r0, r2, r0, lsl #16
     b38:	9c010000 	stcls	0, cr0, [r1], {-0}
     b3c:	00000a96 	muleq	r0, r6, sl
     b40:	0002f932 	andeq	pc, r2, r2, lsr r9	; <UNPREDICTABLE>
     b44:	01c90100 	biceq	r0, r9, r0, lsl #2
     b48:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     b4c:	33749102 	cmncc	r4, #-2147483648	; 0x80000000
     b50:	080004f0 	stmdaeq	r0, {r4, r5, r6, r7, sl}
     b54:	00000ceb 	andeq	r0, r0, fp, ror #25
     b58:	02500121 	subseq	r0, r0, #1073741832	; 0x40000008
     b5c:	0000047d 	andeq	r0, r0, sp, ror r4
     b60:	00066834 	andeq	r6, r6, r4, lsr r8
     b64:	01d10100 	bicseq	r0, r1, r0, lsl #2
     b68:	080004f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl}
     b6c:	000000b4 	strheq	r0, [r0], -r4
     b70:	0ae59c01 	beq	ff967b7c <BootRAM+0xe8d831d>
     b74:	40200000 	eormi	r0, r0, r0
     b78:	57080005 	strpl	r0, [r8, -r5]
     b7c:	bf000009 	svclt	0x00000009
     b80:	2100000a 	tstcs	r0, sl
     b84:	30015001 	andcc	r5, r1, r1
     b88:	054e1f00 	strbeq	r1, [lr, #-3840]	; 0xf00
     b8c:	090a0800 	stmdbeq	sl, {fp}
     b90:	82200000 	eorhi	r0, r0, #0
     b94:	57080005 	strpl	r0, [r8, -r5]
     b98:	db000009 	blle	bc4 <__Stack_Size+0x7c4>
     b9c:	2100000a 	tstcs	r0, sl
     ba0:	37015001 	strcc	r5, [r1, -r1]
     ba4:	05942500 	ldreq	r2, [r4, #1280]	; 0x500
     ba8:	0d0a0800 	stceq	8, cr0, [sl, #-0]
     bac:	35000000 	strcc	r0, [r0, #-0]
     bb0:	00000230 	andeq	r0, r0, r0, lsr r2
     bb4:	007f6401 	rsbseq	r6, pc, r1, lsl #8
     bb8:	03050000 	movweq	r0, #20480	; 0x5000
     bbc:	200001c8 	andcs	r0, r0, r8, asr #3
     bc0:	0005e735 	andeq	lr, r5, r5, lsr r7
     bc4:	f96c0100 			; <UNDEFINED> instruction: 0xf96c0100
     bc8:	05000003 	streq	r0, [r0, #-3]
     bcc:	00000003 	andeq	r0, r0, r3
     bd0:	13ee3520 	mvnne	r3, #32, 10	; 0x8000000
     bd4:	7c010000 	stcvc	0, cr0, [r1], {-0}
     bd8:	0000047d 	andeq	r0, r0, sp, ror r4
     bdc:	006c0305 	rsbeq	r0, ip, r5, lsl #6
     be0:	46352000 	ldrtmi	r2, [r5], -r0
     be4:	01000002 	tsteq	r0, r2
     be8:	00022f67 	andeq	r2, r2, r7, ror #30
     bec:	90030500 	andls	r0, r3, r0, lsl #10
     bf0:	36200000 	strtcc	r0, [r0], -r0
     bf4:	0000027c 	andeq	r0, r0, ip, ror r2
     bf8:	0b342207 	bleq	d0941c <__Stack_Size+0xd0901c>
     bfc:	040a0000 	streq	r0, [sl], #-0
     c00:	00000316 	andeq	r0, r0, r6, lsl r3
     c04:	00052f36 	andeq	r2, r5, r6, lsr pc
     c08:	45250700 	strmi	r0, [r5, #-1792]!	; 0x700
     c0c:	0a00000b 	beq	c40 <__Stack_Size+0x840>
     c10:	0003f904 	andeq	pc, r3, r4, lsl #18
     c14:	04c23600 	strbeq	r3, [r2], #1536	; 0x600
     c18:	2d070000 	stccs	0, cr0, [r7, #-0]
     c1c:	0000004c 	andeq	r0, r0, ip, asr #32
     c20:	00099a36 	andeq	r9, r9, r6, lsr sl
     c24:	61230800 	teqvs	r3, r0, lsl #16
     c28:	36000001 	strcc	r0, [r0], -r1
     c2c:	000008aa 	andeq	r0, r0, sl, lsr #17
     c30:	01612408 	cmneq	r1, r8, lsl #8
     c34:	61370000 	teqvs	r7, r0
     c38:	7c000001 	stcvc	0, cr0, [r0], {1}
     c3c:	3800000b 	stmdacc	r0, {r0, r1, r3}
     c40:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
     c44:	1d360006 	ldcne	0, cr0, [r6, #-24]!	; 0xffffffe8
     c48:	08000001 	stmdaeq	r0, {r0}
     c4c:	000b6c25 	andeq	r6, fp, r5, lsr #24
     c50:	06a53600 	strteq	r3, [r5], r0, lsl #12
     c54:	26080000 	strcs	r0, [r8], -r0
     c58:	00000161 	andeq	r0, r0, r1, ror #2
     c5c:	00043835 	andeq	r3, r4, r5, lsr r8
     c60:	a32c0600 	teqge	ip, #0, 12
     c64:	0500000b 	streq	r0, [r0, #-11]
     c68:	0001c403 	andeq	ip, r1, r3, lsl #8
     c6c:	05043920 	streq	r3, [r4, #-2336]	; 0x920
     c70:	00746e69 	rsbseq	r6, r4, r9, ror #28
     c74:	00005e37 	andeq	r5, r0, r7, lsr lr
     c78:	000bb500 	andeq	fp, fp, r0, lsl #10
     c7c:	36003a00 	strcc	r3, [r0], -r0, lsl #20
     c80:	000008a7 	andeq	r0, r0, r7, lsr #17
     c84:	0baa2501 	bleq	fea8a090 <BootRAM+0xd9fa831>
     c88:	a2360000 	eorsge	r0, r6, #0
     c8c:	01000006 	tsteq	r0, r6
     c90:	000baa26 	andeq	sl, fp, r6, lsr #20
     c94:	00493500 	subeq	r3, r9, r0, lsl #10
     c98:	61010000 	mrsvs	r0, (UNDEF: 1)
     c9c:	0000006f 	andeq	r0, r0, pc, rrx
     ca0:	020c0305 	andeq	r0, ip, #335544320	; 0x14000000
     ca4:	70352000 	eorsvc	r2, r5, r0
     ca8:	01000002 	tsteq	r0, r2
     cac:	00008f65 	andeq	r8, r0, r5, ror #30
     cb0:	08030500 	stmdaeq	r3, {r8, sl}
     cb4:	37200002 	strcc	r0, [r0, -r2]!
     cb8:	0000010a 	andeq	r0, r0, sl, lsl #2
     cbc:	00000bfd 	strdeq	r0, [r0], -sp
     cc0:	0000bf38 	andeq	fp, r0, r8, lsr pc
     cc4:	35000600 	strcc	r0, [r0, #-1536]	; 0x600
     cc8:	00000032 	andeq	r0, r0, r2, lsr r0
     ccc:	0bed8801 	bleq	ffb62cd8 <BootRAM+0xead3479>
     cd0:	03050000 	movweq	r0, #20480	; 0x5000
     cd4:	20000034 	andcs	r0, r0, r4, lsr r0
     cd8:	0007df35 	andeq	sp, r7, r5, lsr pc
     cdc:	ed920100 	ldfs	f0, [r2]
     ce0:	0500000b 	streq	r0, [r0, #-11]
     ce4:	00005003 	andeq	r5, r0, r3
     ce8:	071d3520 	ldreq	r3, [sp, -r0, lsr #10]
     cec:	9f010000 	svcls	0x00010000
     cf0:	00000501 	andeq	r0, r0, r1, lsl #10
     cf4:	01ca0305 	biceq	r0, sl, r5, lsl #6
     cf8:	043b2000 	ldrteq	r2, [fp], #-0
     cfc:	09000005 	stmdbeq	r0, {r0, r2}
     d00:	07633c6e 	strbeq	r3, [r3, -lr, ror #24]!
     d04:	460a0000 	strmi	r0, [sl], -r0
     d08:	000c4902 	andeq	r4, ip, r2, lsl #18
     d0c:	005e0f00 	subseq	r0, lr, r0, lsl #30
     d10:	3c000000 	stccc	0, cr0, [r0], {-0}
     d14:	0000078d 	andeq	r0, r0, sp, lsl #15
     d18:	6002570a 	andvs	r5, r2, sl, lsl #14
     d1c:	0f00000c 	svceq	0x0000000c
     d20:	0000005e 	andeq	r0, r0, lr, asr r0
     d24:	00004c0f 	andeq	r4, r0, pc, lsl #24
     d28:	553c0000 	ldrpl	r0, [ip, #-0]!
     d2c:	0a000009 	beq	d58 <__Stack_Size+0x958>
     d30:	0c720240 	lfmeq	f0, 2, [r2], #-256	; 0xffffff00
     d34:	5e0f0000 	cdppl	0, 0, cr0, cr15, cr0, {0}
     d38:	00000000 	andeq	r0, r0, r0
     d3c:	0000213d 	andeq	r2, r0, sp, lsr r1
     d40:	83e90400 	mvnhi	r0, #0, 8
     d44:	0f00000c 	svceq	0x0000000c
     d48:	0000005e 	andeq	r0, r0, lr, asr r0
     d4c:	03253e00 	teqeq	r5, #0, 28
     d50:	6d090000 	stcvs	0, cr0, [r9, #-0]
     d54:	000000b4 	strheq	r0, [r0], -r4
     d58:	0008303f 	andeq	r3, r8, pc, lsr r0
     d5c:	5be50400 	blpl	ff941d64 <BootRAM+0xe8b2505>
     d60:	a8000001 	stmdage	r0, {r0}
     d64:	0f00000c 	svceq	0x0000000c
     d68:	0000004c 	andeq	r0, r0, ip, asr #32
     d6c:	00016c0f 	andeq	r6, r1, pc, lsl #24
     d70:	393b0000 	ldmdbcc	fp!, {}	; <UNPREDICTABLE>
     d74:	07000005 	streq	r0, [r0, -r5]
     d78:	02893f19 	addeq	r3, r9, #25, 30	; 0x64
     d7c:	f3030000 	vhadd.u8	d0, d3, d0
     d80:	000008e6 	andeq	r0, r0, r6, ror #17
     d84:	00000cc4 	andeq	r0, r0, r4, asr #25
     d88:	000ba30f 	andeq	sl, fp, pc, lsl #6
     d8c:	6c3d0000 	ldcvs	0, cr0, [sp], #-0
     d90:	03000005 	movweq	r0, #5
     d94:	000cdff2 	strdeq	sp, [ip], -r2
     d98:	003a0f00 	eorseq	r0, sl, r0, lsl #30
     d9c:	5e0f0000 	cdppl	0, 0, cr0, cr15, cr0, {0}
     da0:	0f000000 	svceq	0x00000000
     da4:	0000005e 	andeq	r0, r0, lr, asr r0
     da8:	02c44000 	sbceq	r4, r4, #0
     dac:	0a030000 	beq	c0db4 <__Stack_Size+0xc09b4>
     db0:	000ba301 	andeq	sl, fp, r1, lsl #6
     db4:	070a3c00 	streq	r3, [sl, -r0, lsl #24]
     db8:	06030000 	streq	r0, [r3], -r0
     dbc:	000cfd01 	andeq	pc, ip, r1, lsl #26
     dc0:	0cfd0f00 	ldcleq	15, cr0, [sp]
     dc4:	0a000000 	beq	dcc <__Stack_Size+0x9cc>
     dc8:	0000ff04 	andeq	pc, r0, r4, lsl #30
     dcc:	00843b00 	addeq	r3, r4, r0, lsl #22
     dd0:	6a090000 	bvs	240dd8 <__Stack_Size+0x2409d8>
     dd4:	00038d3b 	andeq	r8, r3, fp, lsr sp
     dd8:	001a0b00 	andseq	r0, sl, r0, lsl #22
     ddc:	0000021b 	andeq	r0, r0, fp, lsl r2
     de0:	03f10004 	mvnseq	r0, #4
     de4:	01040000 	mrseq	r0, (UNDEF: 4)
     de8:	00000158 	andeq	r0, r0, r8, asr r1
     dec:	0009fc01 	andeq	pc, r9, r1, lsl #24
     df0:	00086200 	andeq	r6, r8, r0, lsl #4
     df4:	0004a400 	andeq	sl, r4, r0, lsl #8
     df8:	05040200 	streq	r0, [r4, #-512]	; 0x200
     dfc:	000001f6 	strdeq	r0, [r0], -r6
     e00:	98050202 	stmdals	r5, {r1, r9}
     e04:	02000006 	andeq	r0, r0, #6
     e08:	06440601 	strbeq	r0, [r4], -r1, lsl #12
     e0c:	04020000 	streq	r0, [r2], #-0
     e10:	00037b07 	andeq	r7, r3, r7, lsl #22
     e14:	31750300 	cmncc	r5, r0, lsl #6
     e18:	28010036 	stmdacs	r1, {r1, r2, r4, r5}
     e1c:	00000044 	andeq	r0, r0, r4, asr #32
     e20:	d7070202 	strle	r0, [r7, -r2, lsl #4]
     e24:	03000003 	movweq	r0, #3
     e28:	01003875 	tsteq	r0, r5, ror r8
     e2c:	00005529 	andeq	r5, r0, r9, lsr #10
     e30:	08010200 	stmdaeq	r1, {r9}
     e34:	00000642 	andeq	r0, r0, r2, asr #12
     e38:	15070402 	strne	r0, [r7, #-1026]	; 0x402
     e3c:	04000005 	streq	r0, [r0], #-5
     e40:	0000008c 	andeq	r0, r0, ip, lsl #1
     e44:	88240208 	stmdahi	r4!, {r3, r9}
     e48:	05000000 	streq	r0, [r0, #-0]
     e4c:	0000013d 	andeq	r0, r0, sp, lsr r1
     e50:	00882602 	addeq	r2, r8, r2, lsl #12
     e54:	05000000 	streq	r0, [r0, #-0]
     e58:	00000593 	muleq	r0, r3, r5
     e5c:	00392702 	eorseq	r2, r9, r2, lsl #14
     e60:	00040000 	andeq	r0, r4, r0
     e64:	004b0406 	subeq	r0, fp, r6, lsl #8
     e68:	d6070000 	strle	r0, [r7], -r0
     e6c:	02000002 	andeq	r0, r0, #2
     e70:	00006329 	andeq	r6, r0, r9, lsr #6
     e74:	04380800 	ldrteq	r0, [r8], #-2048	; 0x800
     e78:	2c030000 	stccs	0, cr0, [r3], {-0}
     e7c:	000000aa 	andeq	r0, r0, sl, lsr #1
     e80:	01c40305 	biceq	r0, r4, r5, lsl #6
     e84:	04092000 	streq	r2, [r9], #-0
     e88:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
     e8c:	099a0800 	ldmibeq	sl, {fp}
     e90:	3c040000 	stccc	0, cr0, [r4], {-0}
     e94:	0000008e 	andeq	r0, r0, lr, lsl #1
     e98:	01440305 	cmpeq	r4, r5, lsl #6
     e9c:	aa082000 	bge	208ea4 <__Stack_Size+0x208aa4>
     ea0:	04000008 	streq	r0, [r0], #-8
     ea4:	00008e7c 	andeq	r8, r0, ip, ror lr
     ea8:	b4030500 	strlt	r0, [r3], #-1280	; 0x500
     eac:	0a200001 	beq	800eb8 <__Stack_Size+0x800ab8>
     eb0:	0000008e 	andeq	r0, r0, lr, lsl #1
     eb4:	000000e3 	andeq	r0, r0, r3, ror #1
     eb8:	00005c0b 	andeq	r5, r0, fp, lsl #24
     ebc:	08000600 	stmdaeq	r0, {r9, sl}
     ec0:	0000011d 	andeq	r0, r0, sp, lsl r1
     ec4:	00d3a404 	sbcseq	sl, r3, r4, lsl #8
     ec8:	03050000 	movweq	r0, #20480	; 0x5000
     ecc:	20000094 	mulcs	r0, r4, r0
     ed0:	0006a508 	andeq	sl, r6, r8, lsl #10
     ed4:	8e4e0400 	cdphi	4, 4, cr0, cr14, cr0, {0}
     ed8:	05000000 	streq	r0, [r0, #-0]
     edc:	0000e003 	andeq	lr, r0, r3
     ee0:	004b0a20 	subeq	r0, fp, r0, lsr #20
     ee4:	01150000 	tsteq	r5, r0
     ee8:	5c0b0000 	stcpl	0, cr0, [fp], {-0}
     eec:	11000000 	mrsne	r0, (UNDEF: 0)
     ef0:	09970800 	ldmibeq	r7, {fp}
     ef4:	25040000 	strcs	r0, [r4, #-0]
     ef8:	00000105 	andeq	r0, r0, r5, lsl #2
     efc:	00cc0305 	sbceq	r0, ip, r5, lsl #6
     f00:	4b0a2000 	blmi	288f08 <__Stack_Size+0x288b08>
     f04:	36000000 	strcc	r0, [r0], -r0
     f08:	0b000001 	bleq	f14 <__Stack_Size+0xb14>
     f0c:	0000005c 	andeq	r0, r0, ip, asr r0
     f10:	a2080008 	andge	r0, r8, #8
     f14:	04000006 	streq	r0, [r0], #-6
     f18:	00012641 	andeq	r2, r1, r1, asr #12
     f1c:	1b030500 	blne	c2324 <__Stack_Size+0xc1f24>
     f20:	0a200001 	beq	800f2c <__Stack_Size+0x800b2c>
     f24:	0000004b 	andeq	r0, r0, fp, asr #32
     f28:	00000157 	andeq	r0, r0, r7, asr r1
     f2c:	00005c0b 	andeq	r5, r0, fp, lsl #24
     f30:	08001a00 	stmdaeq	r0, {r9, fp, ip}
     f34:	000008a7 	andeq	r0, r0, r7, lsr #17
     f38:	01475404 	cmpeq	r7, r4, lsl #8
     f3c:	03050000 	movweq	r0, #20480	; 0x5000
     f40:	200000ec 	andcs	r0, r0, ip, ror #1
     f44:	00004b0a 	andeq	r4, r0, sl, lsl #22
     f48:	00017800 	andeq	r7, r1, r0, lsl #16
     f4c:	005c0b00 	subseq	r0, ip, r0, lsl #22
     f50:	00030000 	andeq	r0, r3, r0
     f54:	0009e908 	andeq	lr, r9, r8, lsl #18
     f58:	68820400 	stmvs	r2, {sl}
     f5c:	05000001 	streq	r0, [r0, #-1]
     f60:	0000e803 	andeq	lr, r0, r3, lsl #16
     f64:	004b0a20 	subeq	r0, fp, r0, lsr #20
     f68:	01990000 	orrseq	r0, r9, r0
     f6c:	5c0b0000 	stcpl	0, cr0, [fp], {-0}
     f70:	1d000000 	stcne	0, cr0, [r0, #-0]
     f74:	096e0800 	stmdbeq	lr!, {fp}^
     f78:	89040000 	stmdbhi	r4, {}	; <UNPREDICTABLE>
     f7c:	00000189 	andeq	r0, r0, r9, lsl #3
     f80:	01240305 	teqeq	r4, r5, lsl #6
     f84:	4b0a2000 	blmi	288f8c <__Stack_Size+0x288b8c>
     f88:	ba000000 	blt	f90 <__Stack_Size+0xb90>
     f8c:	0b000001 	bleq	f98 <__Stack_Size+0xb98>
     f90:	0000005c 	andeq	r0, r0, ip, asr r0
     f94:	d5080015 	strle	r0, [r8, #-21]
     f98:	04000009 	streq	r0, [r0], #-9
     f9c:	0001aa8f 	andeq	sl, r1, pc, lsl #21
     fa0:	4c030500 	cfstr32mi	mvfx0, [r3], {-0}
     fa4:	0a200001 	beq	800fb0 <__Stack_Size+0x800bb0>
     fa8:	0000004b 	andeq	r0, r0, fp, asr #32
     fac:	000001db 	ldrdeq	r0, [r0], -fp
     fb0:	00005c0b 	andeq	r5, r0, fp, lsl #24
     fb4:	08001300 	stmdaeq	r0, {r8, r9, ip}
     fb8:	000009b1 			; <UNDEFINED> instruction: 0x000009b1
     fbc:	01cb9504 	biceq	r9, fp, r4, lsl #10
     fc0:	03050000 	movweq	r0, #20480	; 0x5000
     fc4:	20000107 	andcs	r0, r0, r7, lsl #2
     fc8:	00004b0a 	andeq	r4, r0, sl, lsl #22
     fcc:	0001fc00 	andeq	pc, r1, r0, lsl #24
     fd0:	005c0b00 	subseq	r0, ip, r0, lsl #22
     fd4:	004f0000 	subeq	r0, pc, r0
     fd8:	0009c408 	andeq	ip, r9, r8, lsl #8
     fdc:	ec9c0400 	cfldrs	mvf0, [ip], {0}
     fe0:	05000001 	streq	r0, [r0, #-1]
     fe4:	00016203 	andeq	r6, r1, r3, lsl #4
     fe8:	09810820 	stmibeq	r1, {r5, fp}
     fec:	a2040000 	andge	r0, r4, #0
     ff0:	0000004b 	andeq	r0, r0, fp, asr #32
     ff4:	00000305 	andeq	r0, r0, r5, lsl #6
     ff8:	85000000 	strhi	r0, [r0, #-0]
     ffc:	04000002 	streq	r0, [r0], #-2
    1000:	00047b00 	andeq	r7, r4, r0, lsl #22
    1004:	58010400 	stmdapl	r1, {sl}
    1008:	01000001 	tsteq	r0, r1
    100c:	00000af9 	strdeq	r0, [r0], -r9
    1010:	00000862 	andeq	r0, r0, r2, ror #16
    1014:	00000128 	andeq	r0, r0, r8, lsr #2
    1018:	00000000 	andeq	r0, r0, r0
    101c:	00000516 	andeq	r0, r0, r6, lsl r5
    1020:	f6050402 			; <UNDEFINED> instruction: 0xf6050402
    1024:	02000001 	andeq	r0, r0, #1
    1028:	06980502 	ldreq	r0, [r8], r2, lsl #10
    102c:	01020000 	mrseq	r0, (UNDEF: 2)
    1030:	00064406 	andeq	r4, r6, r6, lsl #8
    1034:	33750300 	cmncc	r5, #0, 6
    1038:	27060032 	smladxcs	r6, r2, r0, r0
    103c:	00000045 	andeq	r0, r0, r5, asr #32
    1040:	7b070402 	blvc	1c2050 <__Stack_Size+0x1c1c50>
    1044:	02000003 	andeq	r0, r0, #3
    1048:	03d70702 	bicseq	r0, r7, #524288	; 0x80000
    104c:	01020000 	mrseq	r0, (UNDEF: 2)
    1050:	00064208 	andeq	r4, r6, r8, lsl #4
    1054:	06010400 	streq	r0, [r1], -r0, lsl #8
    1058:	00006f37 	andeq	r6, r0, r7, lsr pc
    105c:	05cf0500 	strbeq	r0, [pc, #1280]	; 1564 <__Stack_Size+0x1164>
    1060:	05000000 	streq	r0, [r0, #-0]
    1064:	0000073d 	andeq	r0, r0, sp, lsr r7
    1068:	33060001 	movwcc	r0, #24577	; 0x6001
    106c:	06000004 	streq	r0, [r0], -r4
    1070:	00005a37 	andeq	r5, r0, r7, lsr sl
    1074:	07040200 	streq	r0, [r4, -r0, lsl #4]
    1078:	00000515 	andeq	r0, r0, r5, lsl r5
    107c:	000a7907 	andeq	r7, sl, r7, lsl #18
    1080:	0b021000 	bleq	85088 <__Stack_Size+0x84c88>
    1084:	000000be 	strheq	r0, [r0], -lr
    1088:	000ad908 	andeq	sp, sl, r8, lsl #18
    108c:	3a0d0200 	bcc	341894 <__Stack_Size+0x341494>
    1090:	00000000 	andeq	r0, r0, r0
    1094:	000a8908 	andeq	r8, sl, r8, lsl #18
    1098:	3a0e0200 	bcc	3818a0 <__Stack_Size+0x3814a0>
    109c:	04000000 	streq	r0, [r0], #-0
    10a0:	000b0008 	andeq	r0, fp, r8
    10a4:	3a0f0200 	bcc	3c18ac <__Stack_Size+0x3c14ac>
    10a8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    10ac:	000a3408 	andeq	r3, sl, r8, lsl #8
    10b0:	3a100200 	bcc	4018b8 <__Stack_Size+0x4014b8>
    10b4:	0c000000 	stceq	0, cr0, [r0], {-0}
    10b8:	0ad40900 	beq	ff5034c0 <BootRAM+0xe473c61>
    10bc:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    10c0:	000001ca 	andeq	r0, r0, sl, asr #3
    10c4:	080005ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl}
    10c8:	0000005c 	andeq	r0, r0, ip, asr r0
    10cc:	01ca9c01 	biceq	r9, sl, r1, lsl #24
    10d0:	ec0a0000 	stc	0, cr0, [sl], {-0}
    10d4:	0100000a 	tsteq	r0, sl
    10d8:	00006f2a 	andeq	r6, r0, sl, lsr #30
    10dc:	6f0b0000 	svcvs	0x000b0000
    10e0:	0100000a 	tsteq	r0, sl
    10e4:	00006f2b 	andeq	r6, r0, fp, lsr #30
    10e8:	00024600 	andeq	r4, r2, r0, lsl #12
    10ec:	05ce0c00 	strbeq	r0, [lr, #3072]	; 0xc00
    10f0:	000e0800 	andeq	r0, lr, r0, lsl #16
    10f4:	01310000 	teqeq	r1, r0
    10f8:	b00d0000 	andlt	r0, sp, r0
    10fc:	0100000a 	tsteq	r0, sl
    1100:	0001ca48 	andeq	ip, r1, r8, asr #20
    1104:	00011000 	andeq	r1, r1, r0
    1108:	0f000e00 	svceq	0x00000e00
    110c:	080005d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl}
    1110:	000001f8 	strdeq	r0, [r0], -r8
    1114:	00000127 	andeq	r0, r0, r7, lsr #2
    1118:	05500110 	ldrbeq	r0, [r0, #-272]	; 0x110
    111c:	0020000c 	eoreq	r0, r0, ip
    1120:	da110008 	ble	441148 <__Stack_Size+0x440d48>
    1124:	0d080005 	stceq	0, cr0, [r8, #-20]	; 0xffffffec
    1128:	00000002 	andeq	r0, r0, r2
    112c:	0005dc0c 	andeq	sp, r5, ip, lsl #24
    1130:	00000e08 	andeq	r0, r0, r8, lsl #28
    1134:	00015c00 	andeq	r5, r1, r0, lsl #24
    1138:	0b1f1200 	bleq	7c5940 <__Stack_Size+0x7c5540>
    113c:	54010000 	strpl	r0, [r1], #-0
    1140:	000001ca 	andeq	r0, r0, sl, asr #3
    1144:	0005e011 	andeq	lr, r5, r1, lsl r0
    1148:	00021e08 	andeq	r1, r2, r8, lsl #28
    114c:	05e81100 	strbeq	r1, [r8, #256]!	; 0x100
    1150:	022f0800 	eoreq	r0, pc, #0, 16
    1154:	11000000 	mrsne	r0, (UNDEF: 0)
    1158:	080005b2 	stmdaeq	r0, {r1, r4, r5, r7, r8, sl}
    115c:	0000023c 	andeq	r0, r0, ip, lsr r2
    1160:	0005b611 	andeq	fp, r5, r1, lsl r6
    1164:	00024308 	andeq	r4, r2, r8, lsl #6
    1168:	05ba1100 	ldreq	r1, [sl, #256]!	; 0x100
    116c:	024a0800 	subeq	r0, sl, #0, 16
    1170:	be110000 	cdplt	0, 1, cr0, cr1, cr0, {0}
    1174:	51080005 	tstpl	r8, r5
    1178:	11000002 	tstne	r0, r2
    117c:	080005c2 	stmdaeq	r0, {r1, r6, r7, r8, sl}
    1180:	00000258 	andeq	r0, r0, r8, asr r2
    1184:	0005c611 	andeq	ip, r5, r1, lsl r6
    1188:	00025f08 	andeq	r5, r2, r8, lsl #30
    118c:	05f00f00 	ldrbeq	r0, [r0, #3840]!	; 0xf00
    1190:	01f80800 	mvnseq	r0, r0, lsl #16
    1194:	01a90000 			; <UNDEFINED> instruction: 0x01a90000
    1198:	01100000 	tsteq	r0, r0
    119c:	000c0550 	andeq	r0, ip, r0, asr r5
    11a0:	00080020 	andeq	r0, r8, r0, lsr #32
    11a4:	0005f80f 	andeq	pc, r5, pc, lsl #16
    11a8:	00027008 	andeq	r7, r2, r8
    11ac:	0001c000 	andeq	ip, r1, r0
    11b0:	50011000 	andpl	r1, r1, r0
    11b4:	20000c05 	andcs	r0, r0, r5, lsl #24
    11b8:	11000800 	tstne	r0, r0, lsl #16
    11bc:	080005fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, sl}
    11c0:	00000281 	andeq	r0, r0, r1, lsl #5
    11c4:	05041300 	streq	r1, [r4, #-768]	; 0x300
    11c8:	00746e69 	rsbseq	r6, r4, r9, ror #28
    11cc:	00043814 	andeq	r3, r4, r4, lsl r8
    11d0:	ca2c0300 	bgt	b01dd8 <__Stack_Size+0xb019d8>
    11d4:	05000001 	streq	r0, [r0, #-1]
    11d8:	0001c403 	andeq	ip, r1, r3, lsl #8
    11dc:	0a1d1420 	beq	746264 <__Stack_Size+0x745e64>
    11e0:	12020000 	andne	r0, r2, #0
    11e4:	000001f3 	strdeq	r0, [r0], -r3
    11e8:	1e000305 	cdpne	3, 0, cr0, cr0, cr5, {0}
    11ec:	81150800 	tsthi	r5, r0, lsl #16
    11f0:	16000000 	strne	r0, [r0], -r0
    11f4:	00000a96 	muleq	r0, r6, sl
    11f8:	006ffd05 	rsbeq	pc, pc, r5, lsl #26
    11fc:	020d0000 	andeq	r0, sp, #0
    1200:	3a170000 	bcc	5c1208 <__Stack_Size+0x5c0e08>
    1204:	00000000 	andeq	r0, r0, r0
    1208:	000ab00d 	andeq	fp, sl, sp
    120c:	ca480100 	bgt	1201614 <__Stack_Size+0x1201214>
    1210:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
    1214:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    1218:	0b2b0d00 	bleq	ac4620 <__Stack_Size+0xac4220>
    121c:	7c040000 	stcvc	0, cr0, [r4], {-0}
    1220:	0000006f 	andeq	r0, r0, pc, rrx
    1224:	0000022f 	andeq	r0, r0, pc, lsr #4
    1228:	0d18000e 	ldceq	0, cr0, [r8, #-56]	; 0xffffffc8
    122c:	0400000a 	streq	r0, [r0], #-10
    1230:	00023c7d 	andeq	r3, r2, sp, ror ip
    1234:	19000e00 	stmdbne	r0, {r9, sl, fp}
    1238:	00000aa4 	andeq	r0, r0, r4, lsr #21
    123c:	cb19f905 	blgt	67f658 <__Stack_Size+0x67f258>
    1240:	0500000a 	streq	r0, [r0, #-10]
    1244:	0a4119fa 	beq	1047a34 <__Stack_Size+0x1047634>
    1248:	fb050000 	blx	141252 <__Stack_Size+0x140e52>
    124c:	00025319 	andeq	r5, r2, r9, lsl r3
    1250:	19510300 	ldmdbne	r1, {r8, r9}^
    1254:	00000ac0 	andeq	r0, r0, r0, asr #21
    1258:	530dfc05 	movwpl	pc, #56325	; 0xdc05	; <UNPREDICTABLE>
    125c:	0500000a 	streq	r0, [r0, #-10]
    1260:	0001caff 	strdeq	ip, [r1], -pc	; <UNPREDICTABLE>
    1264:	00027000 	andeq	r7, r2, r0
    1268:	1a000e00 	bne	4a70 <__Stack_Size+0x4670>
    126c:	00000a29 	andeq	r0, r0, r9, lsr #20
    1270:	0281fe05 	addeq	pc, r1, #5, 28	; 0x50
    1274:	3a170000 	bcc	5c127c <__Stack_Size+0x5c0e7c>
    1278:	00000000 	andeq	r0, r0, r0
    127c:	000b0f19 	andeq	r0, fp, r9, lsl pc
    1280:	00f80500 	rscseq	r0, r8, r0, lsl #10
    1284:	00000b23 	andeq	r0, r0, r3, lsr #22
    1288:	05e80004 	strbeq	r0, [r8, #4]!
    128c:	01040000 	mrseq	r0, (UNDEF: 4)
    1290:	00000158 	andeq	r0, r0, r8, asr r1
    1294:	000d4101 	andeq	r4, sp, r1, lsl #2
    1298:	00086200 	andeq	r6, r8, r0, lsl #4
    129c:	00015000 	andeq	r5, r1, r0
    12a0:	00000000 	andeq	r0, r0, r0
    12a4:	0005b600 	andeq	fp, r5, r0, lsl #12
    12a8:	05040200 	streq	r0, [r4, #-512]	; 0x200
    12ac:	000001f6 	strdeq	r0, [r0], -r6
    12b0:	98050202 	stmdals	r5, {r1, r9}
    12b4:	02000006 	andeq	r0, r0, #6
    12b8:	06440601 	strbeq	r0, [r4], -r1, lsl #12
    12bc:	75030000 	strvc	r0, [r3, #-0]
    12c0:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
    12c4:	00004527 	andeq	r4, r0, r7, lsr #10
    12c8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    12cc:	0000037b 	andeq	r0, r0, fp, ror r3
    12d0:	36317503 	ldrtcc	r7, [r1], -r3, lsl #10
    12d4:	57280200 	strpl	r0, [r8, -r0, lsl #4]!
    12d8:	02000000 	andeq	r0, r0, #0
    12dc:	03d70702 	bicseq	r0, r7, #524288	; 0x80000
    12e0:	75030000 	strvc	r0, [r3, #-0]
    12e4:	29020038 	stmdbcs	r2, {r3, r4, r5}
    12e8:	00000068 	andeq	r0, r0, r8, rrx
    12ec:	42080102 	andmi	r0, r8, #-2147483648	; 0x80000000
    12f0:	04000006 	streq	r0, [r0], #-6
    12f4:	00000446 	andeq	r0, r0, r6, asr #8
    12f8:	007a2f02 	rsbseq	r2, sl, r2, lsl #30
    12fc:	45050000 	strmi	r0, [r5, #-0]
    1300:	04000000 	streq	r0, [r0], #-0
    1304:	00000153 	andeq	r0, r0, r3, asr r1
    1308:	008a3002 	addeq	r3, sl, r2
    130c:	57050000 	strpl	r0, [r5, -r0]
    1310:	04000000 	streq	r0, [r0], #-0
    1314:	00000dee 	andeq	r0, r0, lr, ror #27
    1318:	009a3302 	addseq	r3, sl, r2, lsl #6
    131c:	7a060000 	bvc	181324 <__Stack_Size+0x180f24>
    1320:	07000000 	streq	r0, [r0, -r0]
    1324:	b4370201 	ldrtlt	r0, [r7], #-513	; 0x201
    1328:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    132c:	000005cf 	andeq	r0, r0, pc, asr #11
    1330:	073d0800 	ldreq	r0, [sp, -r0, lsl #16]!
    1334:	00010000 	andeq	r0, r1, r0
    1338:	00043304 	andeq	r3, r4, r4, lsl #6
    133c:	9f370200 	svcls	0x00370200
    1340:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1344:	3f8d0328 	svccc	0x008d0328
    1348:	0a000001 	beq	1354 <__Stack_Size+0xf54>
    134c:	03005243 	movweq	r5, #579	; 0x243
    1350:	00006f8e 	andeq	r6, r0, lr, lsl #31
    1354:	e90b0000 	stmdb	fp, {}	; <UNPREDICTABLE>
    1358:	0300000d 	movweq	r0, #13
    135c:	00006f8f 	andeq	r6, r0, pc, lsl #31
    1360:	430a0400 	movwmi	r0, #41984	; 0xa400
    1364:	03005249 	movweq	r5, #585	; 0x249
    1368:	00006f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
    136c:	ba0b0800 	blt	2c3374 <__Stack_Size+0x2c2f74>
    1370:	0300000b 	movweq	r0, #11
    1374:	00006f91 	muleq	r0, r1, pc	; <UNPREDICTABLE>
    1378:	860b0c00 	strhi	r0, [fp], -r0, lsl #24
    137c:	0300000c 	movweq	r0, #12
    1380:	00006f92 	muleq	r0, r2, pc	; <UNPREDICTABLE>
    1384:	420b1000 	andmi	r1, fp, #0
    1388:	0300000c 	movweq	r0, #12
    138c:	00006f93 	muleq	r0, r3, pc	; <UNPREDICTABLE>
    1390:	100b1400 	andne	r1, fp, r0, lsl #8
    1394:	0300000d 	movweq	r0, #13
    1398:	00006f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
    139c:	590b1800 	stmdbpl	fp, {fp, ip}
    13a0:	0300000d 	movweq	r0, #13
    13a4:	00006f95 	muleq	r0, r5, pc	; <UNPREDICTABLE>
    13a8:	c80b1c00 	stmdagt	fp, {sl, fp, ip}
    13ac:	0300000d 	movweq	r0, #13
    13b0:	00006f96 	muleq	r0, r6, pc	; <UNPREDICTABLE>
    13b4:	430a2000 	movwmi	r2, #40960	; 0xa000
    13b8:	03005253 	movweq	r5, #595	; 0x253
    13bc:	00006f97 	muleq	r0, r7, pc	; <UNPREDICTABLE>
    13c0:	04002400 	streq	r2, [r0], #-1024	; 0x400
    13c4:	00000c17 	andeq	r0, r0, r7, lsl ip
    13c8:	00bf9803 	adcseq	r9, pc, r3, lsl #16
    13cc:	3c0c0000 	stccc	0, cr0, [ip], {-0}
    13d0:	df9b0303 	svcle	0x009b0303
    13d4:	0b000001 	bleq	13e0 <__Stack_Size+0xfe0>
    13d8:	00000cf7 	strdeq	r0, [r0], -r7
    13dc:	01f69c03 	mvnseq	r9, r3, lsl #24
    13e0:	0b000000 	bleq	13e8 <__Stack_Size+0xfe8>
    13e4:	00000ca6 	andeq	r0, r0, r6, lsr #25
    13e8:	01fb9d03 	mvnseq	r9, r3, lsl #26
    13ec:	0b080000 	bleq	2013f4 <__Stack_Size+0x200ff4>
    13f0:	00000c81 	andeq	r0, r0, r1, lsl #25
    13f4:	020b9e03 	andeq	r9, fp, #3, 28	; 0x30
    13f8:	0b800000 	bleq	fe001400 <BootRAM+0xcf71ba1>
    13fc:	00000de0 	andeq	r0, r0, r0, ror #27
    1400:	01fb9f03 	mvnseq	r9, r3, lsl #30
    1404:	0d880000 	stceq	0, cr0, [r8]
    1408:	00000b66 	andeq	r0, r0, r6, ror #22
    140c:	0210a003 	andseq	sl, r0, #3
    1410:	01000000 	mrseq	r0, (UNDEF: 0)
    1414:	000cb50d 	andeq	fp, ip, sp, lsl #10
    1418:	fba10300 	blx	fe842022 <BootRAM+0xd7b27c3>
    141c:	08000001 	stmdaeq	r0, {r0}
    1420:	0b4a0d01 	bleq	128482c <__Stack_Size+0x128442c>
    1424:	a2030000 	andge	r0, r3, #0
    1428:	00000215 	andeq	r0, r0, r5, lsl r2
    142c:	bf0d0180 	svclt	0x000d0180
    1430:	0300000c 	movweq	r0, #12
    1434:	0001fba3 	andeq	pc, r1, r3, lsr #23
    1438:	0d018800 	stceq	8, cr8, [r1, #-0]
    143c:	00000c77 	andeq	r0, r0, r7, ror ip
    1440:	021aa403 	andseq	sl, sl, #50331648	; 0x3000000
    1444:	02000000 	andeq	r0, r0, #0
    1448:	000cc90d 	andeq	ip, ip, sp, lsl #18
    144c:	1fa50300 	svcne	0x00a50300
    1450:	08000002 	stmdaeq	r0, {r1}
    1454:	50490e02 	subpl	r0, r9, r2, lsl #28
    1458:	a6030052 			; <UNDEFINED> instruction: 0xa6030052
    145c:	0000023f 	andeq	r0, r0, pc, lsr r2
    1460:	0f000300 	svceq	0x00000300
    1464:	0000006f 	andeq	r0, r0, pc, rrx
    1468:	000001ef 	andeq	r0, r0, pc, ror #3
    146c:	0001ef10 	andeq	lr, r1, r0, lsl pc
    1470:	02000100 	andeq	r0, r0, #0, 2
    1474:	05150704 	ldreq	r0, [r5, #-1796]	; 0x704
    1478:	df050000 	svcle	0x00050000
    147c:	0f000001 	svceq	0x00000001
    1480:	0000003a 	andeq	r0, r0, sl, lsr r0
    1484:	0000020b 	andeq	r0, r0, fp, lsl #4
    1488:	0001ef10 	andeq	lr, r1, r0, lsl pc
    148c:	05001d00 	streq	r1, [r0, #-3328]	; 0xd00
    1490:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1494:	0001df05 	andeq	sp, r1, r5, lsl #30
    1498:	01df0500 	bicseq	r0, pc, r0, lsl #10
    149c:	df050000 	svcle	0x00050000
    14a0:	0f000001 	svceq	0x00000001
    14a4:	0000003a 	andeq	r0, r0, sl, lsr r0
    14a8:	0000022f 	andeq	r0, r0, pc, lsr #4
    14ac:	0001ef10 	andeq	lr, r1, r0, lsl pc
    14b0:	0f003d00 	svceq	0x00003d00
    14b4:	0000006f 	andeq	r0, r0, pc, rrx
    14b8:	0000023f 	andeq	r0, r0, pc, lsr r2
    14bc:	0001ef10 	andeq	lr, r1, r0, lsl pc
    14c0:	05000e00 	streq	r0, [r0, #-3584]	; 0xe00
    14c4:	0000022f 	andeq	r0, r0, pc, lsr #4
    14c8:	000d4c04 	andeq	r4, sp, r4, lsl #24
    14cc:	4aa70300 	bmi	fe9c20d4 <BootRAM+0xd932875>
    14d0:	09000001 	stmdbeq	r0, {r0}
    14d4:	88a90304 	stmiahi	r9!, {r2, r8, r9}
    14d8:	0b000002 	bleq	14e8 <__Stack_Size+0x10e8>
    14dc:	0000044b 	andeq	r0, r0, fp, asr #8
    14e0:	005eaa03 	subseq	sl, lr, r3, lsl #20
    14e4:	0b000000 	bleq	14ec <__Stack_Size+0x10ec>
    14e8:	0000046e 	andeq	r0, r0, lr, ror #8
    14ec:	005eab03 	subseq	sl, lr, r3, lsl #22
    14f0:	0b010000 	bleq	414f8 <__Stack_Size+0x410f8>
    14f4:	00000350 	andeq	r0, r0, r0, asr r3
    14f8:	005eac03 	subseq	sl, lr, r3, lsl #24
    14fc:	0b020000 	bleq	81504 <__Stack_Size+0x81104>
    1500:	00000000 	andeq	r0, r0, r0
    1504:	00b4ad03 	adcseq	sl, r4, r3, lsl #26
    1508:	00030000 	andeq	r0, r3, r0
    150c:	00049004 	andeq	r9, r4, r4
    1510:	4fae0300 	svcmi	0x00ae0300
    1514:	09000002 	stmdbeq	r0, {r1}
    1518:	44b00340 	ldrtmi	r0, [r0], #832	; 0x340
    151c:	0b000003 	bleq	1530 <__Stack_Size+0x1130>
    1520:	00000c9b 	muleq	r0, fp, ip
    1524:	008fb103 	addeq	fp, pc, r3, lsl #2
    1528:	0b000000 	bleq	1530 <__Stack_Size+0x1130>
    152c:	00000c35 	andeq	r0, r0, r5, lsr ip
    1530:	006fb203 	rsbeq	fp, pc, r3, lsl #4
    1534:	0b040000 	bleq	10153c <__Stack_Size+0x10113c>
    1538:	00000c09 	andeq	r0, r0, r9, lsl #24
    153c:	006fb303 	rsbeq	fp, pc, r3, lsl #6
    1540:	0b080000 	bleq	201548 <__Stack_Size+0x201148>
    1544:	00000c49 	andeq	r0, r0, r9, asr #24
    1548:	006fb403 	rsbeq	fp, pc, r3, lsl #8
    154c:	0a0c0000 	beq	301554 <__Stack_Size+0x301154>
    1550:	00524353 	subseq	r4, r2, r3, asr r3
    1554:	006fb503 	rsbeq	fp, pc, r3, lsl #10
    1558:	0a100000 	beq	401560 <__Stack_Size+0x401160>
    155c:	00524343 	subseq	r4, r2, r3, asr #6
    1560:	006fb603 	rsbeq	fp, pc, r3, lsl #12
    1564:	0b140000 	bleq	50156c <__Stack_Size+0x50116c>
    1568:	00000d7a 	andeq	r0, r0, sl, ror sp
    156c:	0354b703 	cmpeq	r4, #786432	; 0xc0000
    1570:	0b180000 	bleq	601578 <__Stack_Size+0x601178>
    1574:	00000cf1 	strdeq	r0, [r0], -r1
    1578:	006fb803 	rsbeq	fp, pc, r3, lsl #16
    157c:	0b240000 	bleq	901584 <__Stack_Size+0x901184>
    1580:	00000c72 	andeq	r0, r0, r2, ror ip
    1584:	006fb903 	rsbeq	fp, pc, r3, lsl #18
    1588:	0b280000 	bleq	a01590 <__Stack_Size+0xa01190>
    158c:	00000e00 	andeq	r0, r0, r0, lsl #28
    1590:	006fba03 	rsbeq	fp, pc, r3, lsl #20
    1594:	0b2c0000 	bleq	b0159c <__Stack_Size+0xb0119c>
    1598:	00000cb0 			; <UNDEFINED> instruction: 0x00000cb0
    159c:	006fbb03 	rsbeq	fp, pc, r3, lsl #22
    15a0:	0b300000 	bleq	c015a8 <__Stack_Size+0xc011a8>
    15a4:	00000c4f 	andeq	r0, r0, pc, asr #24
    15a8:	006fbc03 	rsbeq	fp, pc, r3, lsl #24
    15ac:	0b340000 	bleq	d015b4 <__Stack_Size+0xd011b4>
    15b0:	00000be2 	andeq	r0, r0, r2, ror #23
    15b4:	006fbd03 	rsbeq	fp, pc, r3, lsl #26
    15b8:	0b380000 	bleq	e015c0 <__Stack_Size+0xe011c0>
    15bc:	00000d32 	andeq	r0, r0, r2, lsr sp
    15c0:	006fbe03 	rsbeq	fp, pc, r3, lsl #28
    15c4:	003c0000 	eorseq	r0, ip, r0
    15c8:	00006f0f 	andeq	r6, r0, pc, lsl #30
    15cc:	00035400 	andeq	r5, r3, r0, lsl #8
    15d0:	01ef1000 	mvneq	r1, r0
    15d4:	00020000 	andeq	r0, r2, r0
    15d8:	00034405 	andeq	r4, r3, r5, lsl #8
    15dc:	0df40400 	cfldrdeq	mvd0, [r4]
    15e0:	bf030000 	svclt	0x00030000
    15e4:	00000293 	muleq	r0, r3, r2
    15e8:	000c6611 	andeq	r6, ip, r1, lsl r6
    15ec:	c3030800 	movwgt	r0, #14336	; 0x3800
    15f0:	00000388 	andeq	r0, r0, r8, lsl #7
    15f4:	0052430a 	subseq	r4, r2, sl, lsl #6
    15f8:	006fc403 	rsbeq	ip, pc, r3, lsl #8
    15fc:	0a000000 	beq	1604 <__Stack_Size+0x1204>
    1600:	00525343 	subseq	r5, r2, r3, asr #6
    1604:	006fc503 	rsbeq	ip, pc, r3, lsl #10
    1608:	00040000 	andeq	r0, r4, r0
    160c:	000c8f11 	andeq	r8, ip, r1, lsl pc
    1610:	d0033800 	andle	r3, r3, r0, lsl #16
    1614:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
    1618:	000d200b 	andeq	r2, sp, fp
    161c:	b4d10300 	ldrblt	r0, [r1], #768	; 0x300
    1620:	00000004 	andeq	r0, r0, r4
    1624:	3152440a 	cmpcc	r2, sl, lsl #8
    1628:	7fd20300 	svcvc	0x00d20300
    162c:	04000000 	streq	r0, [r0], #-0
    1630:	000cb50b 	andeq	fp, ip, fp, lsl #10
    1634:	b9d30300 	ldmiblt	r3, {r8, r9}^
    1638:	06000004 	streq	r0, [r0], -r4
    163c:	3252440a 	subscc	r4, r2, #167772160	; 0xa000000
    1640:	7fd40300 	svcvc	0x00d40300
    1644:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1648:	000cbf0b 	andeq	fp, ip, fp, lsl #30
    164c:	b9d50300 	ldmiblt	r5, {r8, r9}^
    1650:	0a000004 	beq	1668 <__Stack_Size+0x1268>
    1654:	3352440a 	cmpcc	r2, #167772160	; 0xa000000
    1658:	7fd60300 	svcvc	0x00d60300
    165c:	0c000000 	stceq	0, cr0, [r0], {-0}
    1660:	000cc90b 	andeq	ip, ip, fp, lsl #18
    1664:	b9d70300 	ldmiblt	r7, {r8, r9}^
    1668:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    166c:	3452440a 	ldrbcc	r4, [r2], #-1034	; 0x40a
    1670:	7fd80300 	svcvc	0x00d80300
    1674:	10000000 	andne	r0, r0, r0
    1678:	000cd30b 	andeq	sp, ip, fp, lsl #6
    167c:	b9d90300 	ldmiblt	r9, {r8, r9}^
    1680:	12000004 	andne	r0, r0, #4
    1684:	3552440a 	ldrbcc	r4, [r2, #-1034]	; 0x40a
    1688:	7fda0300 	svcvc	0x00da0300
    168c:	14000000 	strne	r0, [r0], #-0
    1690:	000cdd0b 	andeq	sp, ip, fp, lsl #26
    1694:	b9db0300 	ldmiblt	fp, {r8, r9}^
    1698:	16000004 	strne	r0, [r0], -r4
    169c:	3652440a 	ldrbcc	r4, [r2], -sl, lsl #8
    16a0:	7fdc0300 	svcvc	0x00dc0300
    16a4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    16a8:	000ce70b 	andeq	lr, ip, fp, lsl #14
    16ac:	b9dd0300 	ldmiblt	sp, {r8, r9}^
    16b0:	1a000004 	bne	16c8 <__Stack_Size+0x12c8>
    16b4:	3752440a 	ldrbcc	r4, [r2, -sl, lsl #8]
    16b8:	7fde0300 	svcvc	0x00de0300
    16bc:	1c000000 	stcne	0, cr0, [r0], {-0}
    16c0:	000da40b 	andeq	sl, sp, fp, lsl #8
    16c4:	b9df0300 	ldmiblt	pc, {r8, r9}^	; <UNPREDICTABLE>
    16c8:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
    16cc:	3852440a 	ldmdacc	r2, {r1, r3, sl, lr}^
    16d0:	7fe00300 	svcvc	0x00e00300
    16d4:	20000000 	andcs	r0, r0, r0
    16d8:	000d370b 	andeq	r3, sp, fp, lsl #14
    16dc:	b9e10300 	stmiblt	r1!, {r8, r9}^
    16e0:	22000004 	andcs	r0, r0, #4
    16e4:	3952440a 	ldmdbcc	r2, {r1, r3, sl, lr}^
    16e8:	7fe20300 	svcvc	0x00e20300
    16ec:	24000000 	strcs	r0, [r0], #-0
    16f0:	000b970b 	andeq	r9, fp, fp, lsl #14
    16f4:	b9e30300 	stmiblt	r3!, {r8, r9}^
    16f8:	26000004 	strcs	r0, [r0], -r4
    16fc:	000d0b0b 	andeq	r0, sp, fp, lsl #22
    1700:	7fe40300 	svcvc	0x00e40300
    1704:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    1708:	000ba20b 	andeq	sl, fp, fp, lsl #4
    170c:	b9e50300 	stmiblt	r5!, {r8, r9}^
    1710:	2a000004 	bcs	1728 <__Stack_Size+0x1328>
    1714:	000d7f0b 	andeq	r7, sp, fp, lsl #30
    1718:	6fe60300 	svcvs	0x00e60300
    171c:	2c000000 	stccs	0, cr0, [r0], {-0}
    1720:	0052430a 	subseq	r4, r2, sl, lsl #6
    1724:	006fe703 	rsbeq	lr, pc, r3, lsl #14
    1728:	0a300000 	beq	c01730 <__Stack_Size+0xc01330>
    172c:	00525343 	subseq	r5, r2, r3, asr #6
    1730:	006fe803 	rsbeq	lr, pc, r3, lsl #16
    1734:	00340000 	eorseq	r0, r4, r0
    1738:	00003a06 	andeq	r3, r0, r6, lsl #20
    173c:	004c0600 	subeq	r0, ip, r0, lsl #12
    1740:	13120000 	tstne	r2, #0
    1744:	0004be04 	andeq	fp, r4, r4, lsl #28
    1748:	0c5c1400 	cfldrdeq	mvd1, [ip], {-0}
    174c:	7f010000 	svcvc	0x00010000
    1750:	6c150101 	ldfvss	f0, [r5], {1}
    1754:	01000005 	tsteq	r0, r5
    1758:	04fc012d 	ldrbteq	r0, [ip], #301	; 0x12d
    175c:	85160000 	ldrhi	r0, [r6, #-0]
    1760:	0100000d 	tsteq	r0, sp
    1764:	00003a2d 	andeq	r3, r0, sp, lsr #20
    1768:	69701700 	ldmdbvs	r0!, {r8, r9, sl, ip}^
    176c:	2d01006e 	stccs	0, cr0, [r1, #-440]	; 0xfffffe48
    1770:	0000005e 	andeq	r0, r0, lr, asr r0
    1774:	6c617617 	stclvs	6, cr7, [r1], #-92	; 0xffffffa4
    1778:	5e2d0100 	sufple	f0, f5, f0
    177c:	00000000 	andeq	r0, r0, r0
    1780:	0004ce18 	andeq	ip, r4, r8, lsl lr
    1784:	00060800 	andeq	r0, r6, r0, lsl #16
    1788:	00001608 	andeq	r1, r0, r8, lsl #12
    178c:	299c0100 	ldmibcs	ip, {r8}
    1790:	19000005 	stmdbne	r0, {r0, r2}
    1794:	000004da 	ldrdeq	r0, [r0], -sl
    1798:	e51a5001 	ldr	r5, [sl, #-1]
    179c:	72000004 	andvc	r0, r0, #4
    17a0:	1a000002 	bne	17b0 <__Stack_Size+0x13b0>
    17a4:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    17a8:	00000293 	muleq	r0, r3, r2
    17ac:	0b6b1b00 	bleq	1ac83b4 <__Stack_Size+0x1ac7fb4>
    17b0:	32010000 	andcc	r0, r1, #0
    17b4:	000000b4 	strheq	r0, [r0], -r4
    17b8:	00000000 	andeq	r0, r0, r0
    17bc:	00000012 	andeq	r0, r0, r2, lsl r0
    17c0:	05619c01 	strbeq	r9, [r1, #-3073]!	; 0xc01
    17c4:	851c0000 	ldrhi	r0, [ip, #-0]
    17c8:	0100000d 	tsteq	r0, sp
    17cc:	00003a32 	andeq	r3, r0, r2, lsr sl
    17d0:	0002c900 	andeq	ip, r2, r0, lsl #18
    17d4:	69701d00 	ldmdbvs	r0!, {r8, sl, fp, ip}^
    17d8:	3201006e 	andcc	r0, r1, #110	; 0x6e
    17dc:	0000005e 	andeq	r0, r0, lr, asr r0
    17e0:	000002ea 	andeq	r0, r0, sl, ror #5
    17e4:	0ab01e00 	beq	fec08fec <BootRAM+0xdb7978d>
    17e8:	3b010000 	blcc	417f0 <__Stack_Size+0x413f0>
    17ec:	000000b4 	strheq	r0, [r0], -r4
    17f0:	08000620 	stmdaeq	r0, {r5, r9, sl}
    17f4:	00000010 	andeq	r0, r0, r0, lsl r0
    17f8:	058a9c01 	streq	r9, [sl, #3073]	; 0xc01
    17fc:	b41f0000 	ldrlt	r0, [pc], #-0	; 1804 <__Stack_Size+0x1404>
    1800:	0100000b 	tsteq	r0, fp
    1804:	0000b43d 	andeq	fp, r0, sp, lsr r4
    1808:	00030b00 	andeq	r0, r3, r0, lsl #22
    180c:	88200000 	stmdahi	r0!, {}	; <UNPREDICTABLE>
    1810:	0100000b 	tsteq	r0, fp
    1814:	0000004c 	andeq	r0, r0, ip, asr #32
    1818:	00005000 	andeq	r5, r0, r0
    181c:	539c0100 	orrspl	r0, ip, #0, 2
    1820:	1c000006 	stcne	0, cr0, [r0], {6}
    1824:	00000d85 	andeq	r0, r0, r5, lsl #27
    1828:	003a4c01 	eorseq	r4, sl, r1, lsl #24
    182c:	03310000 	teqeq	r1, #0
    1830:	701d0000 	andsvc	r0, sp, r0
    1834:	01006e69 	tsteq	r0, r9, ror #28
    1838:	00005e4c 	andeq	r5, r0, ip, asr #28
    183c:	00034f00 	andeq	r4, r3, r0, lsl #30
    1840:	0b251c00 	bleq	948848 <__Stack_Size+0x948448>
    1844:	4c010000 	stcmi	0, cr0, [r1], {-0}
    1848:	0000005e 	andeq	r0, r0, lr, asr r0
    184c:	00000370 	andeq	r0, r0, r0, ror r3
    1850:	000b831c 	andeq	r8, fp, ip, lsl r3
    1854:	3a4c0100 	bcc	1301c5c <__Stack_Size+0x130185c>
    1858:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    185c:	21000003 	tstcs	r0, r3
    1860:	00000ab8 			; <UNDEFINED> instruction: 0x00000ab8
    1864:	005e4c01 	subseq	r4, lr, r1, lsl #24
    1868:	91020000 	mrsls	r0, (UNDEF: 2)
    186c:	00632200 	rsbeq	r2, r3, r0, lsl #4
    1870:	003a5001 	eorseq	r5, sl, r1
    1874:	03d60000 	bicseq	r0, r6, #0
    1878:	00230000 	eoreq	r0, r3, r0
    187c:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
    1880:	16000004 	strne	r0, [r0], -r4
    1884:	24000006 	strcs	r0, [r0], #-6
    1888:	77025201 	strvc	r5, [r2, -r1, lsl #4]
    188c:	51012400 	tstpl	r1, r0, lsl #8
    1890:	24007902 	strcs	r7, [r0], #-2306	; 0x902
    1894:	78025001 	stmdavc	r2, {r0, ip, lr}
    1898:	00230000 	eoreq	r0, r3, r0
    189c:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
    18a0:	36000004 	strcc	r0, [r0], -r4
    18a4:	24000006 	strcs	r0, [r0], #-6
    18a8:	7a025201 	bvc	960b4 <__Stack_Size+0x95cb4>
    18ac:	51012400 	tstpl	r1, r0, lsl #8
    18b0:	24007902 	strcs	r7, [r0], #-2306	; 0x902
    18b4:	78025001 	stmdavc	r2, {r0, ip, lr}
    18b8:	00250000 	eoreq	r0, r5, r0
    18bc:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
    18c0:	24000004 	strcs	r0, [r0], #-4
    18c4:	77025201 	strvc	r5, [r2, -r1, lsl #4]
    18c8:	51012400 	tstpl	r1, r0, lsl #8
    18cc:	24007902 	strcs	r7, [r0], #-2306	; 0x902
    18d0:	78025001 	stmdavc	r2, {r0, ip, lr}
    18d4:	26000000 	strcs	r0, [r0], -r0
    18d8:	00000aa4 	andeq	r0, r0, r4, lsr #21
    18dc:	06306201 	ldrteq	r6, [r0], -r1, lsl #4
    18e0:	00480800 	subeq	r0, r8, r0, lsl #16
    18e4:	9c010000 	stcls	0, cr0, [r1], {-0}
    18e8:	000acb20 	andeq	ip, sl, r0, lsr #22
    18ec:	786c0100 	stmdavc	ip!, {r8}^
    18f0:	60080006 	andvs	r0, r8, r6
    18f4:	01000000 	mrseq	r0, (UNDEF: 0)
    18f8:	0006869c 	muleq	r6, ip, r6
    18fc:	0cfc2700 	ldcleq	7, cr2, [ip]
    1900:	6d010000 	stcvs	0, cr0, [r1, #-0]
    1904:	00000686 	andeq	r0, r0, r6, lsl #13
    1908:	04020000 	streq	r0, [r2], #-0
    190c:	00038007 	andeq	r8, r3, r7
    1910:	02892800 	addeq	r2, r9, #0, 16
    1914:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    1918:	00068601 	andeq	r8, r6, r1, lsl #12
    191c:	06b70100 	ldrteq	r0, [r7], r0, lsl #2
    1920:	70290000 	eorvc	r0, r9, r0
    1924:	01006e69 	tsteq	r0, r9, ror #28
    1928:	06b7018e 	ldrteq	r0, [r7], lr, lsl #3
    192c:	3d2a0000 	stccc	0, cr0, [sl, #-0]
    1930:	0100000c 	tsteq	r0, ip
    1934:	06860190 	pkhbteq	r0, r6, r0, lsl #3
    1938:	2b000000 	blcs	1940 <__Stack_Size+0x1540>
    193c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1940:	41200074 	teqmi	r0, r4, ror r0
    1944:	0100000a 	tsteq	r0, sl
    1948:	0006d897 	muleq	r6, r7, r8
    194c:	00001808 	andeq	r1, r0, r8, lsl #16
    1950:	f99c0100 			; <UNDEFINED> instruction: 0xf99c0100
    1954:	2c000006 	stccs	0, cr0, [r0], {6}
    1958:	000004ce 	andeq	r0, r0, lr, asr #9
    195c:	080006de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r9, sl}
    1960:	00000012 	andeq	r0, r0, r2, lsl r0
    1964:	f02d9d01 			; <UNDEFINED> instruction: 0xf02d9d01
    1968:	01000004 	tsteq	r0, r4
    196c:	0004e52d 	andeq	lr, r4, sp, lsr #10
    1970:	da2e0700 	ble	b83578 <__Stack_Size+0xb83178>
    1974:	00000004 	andeq	r0, r0, r4
    1978:	0040010c 	subeq	r0, r0, ip, lsl #2
    197c:	0ac02000 	beq	ff009984 <BootRAM+0xdf7a125>
    1980:	a4010000 	strge	r0, [r1], #-0
    1984:	080006f0 	stmdaeq	r0, {r4, r5, r6, r7, r9, sl}
    1988:	0000001c 	andeq	r0, r0, ip, lsl r0
    198c:	07289c01 	streq	r9, [r8, -r1, lsl #24]!
    1990:	f82f0000 			; <UNDEFINED> instruction: 0xf82f0000
    1994:	08080006 	stmdaeq	r8, {r1, r2}
    1998:	1f000000 	svcne	0x00000000
    199c:	00000b5f 	andeq	r0, r0, pc, asr fp
    19a0:	003aa701 	eorseq	sl, sl, r1, lsl #14
    19a4:	03ff0000 	mvnseq	r0, #0
    19a8:	00000000 	andeq	r0, r0, r0
    19ac:	000a961b 	andeq	r9, sl, fp, lsl r6
    19b0:	b4b10100 	ldrtlt	r0, [r1], #256	; 0x100
    19b4:	0c000000 	stceq	0, cr0, [r0], {-0}
    19b8:	14080007 	strne	r0, [r8], #-7
    19bc:	01000000 	mrseq	r0, (UNDEF: 0)
    19c0:	00075f9c 	muleq	r7, ip, pc	; <UNPREDICTABLE>
    19c4:	0d9c1c00 	ldceq	12, cr1, [ip]
    19c8:	b1010000 	mrslt	r0, (UNDEF: 1)
    19cc:	0000003a 	andeq	r0, r0, sl, lsr r0
    19d0:	00000412 	andeq	r0, r0, r2, lsl r4
    19d4:	00707322 	rsbseq	r7, r0, r2, lsr #6
    19d8:	003ab201 	eorseq	fp, sl, r1, lsl #4
    19dc:	04330000 	ldrteq	r0, [r3], #-0
    19e0:	30000000 	andcc	r0, r0, r0
    19e4:	00000b3c 	andeq	r0, r0, ip, lsr fp
    19e8:	0720bb01 	streq	fp, [r0, -r1, lsl #22]!
    19ec:	00180800 	andseq	r0, r8, r0, lsl #16
    19f0:	9c010000 	stcls	0, cr0, [r1], {-0}
    19f4:	000007ad 	andeq	r0, r0, sp, lsr #15
    19f8:	000d9c1c 	andeq	r9, sp, ip, lsl ip
    19fc:	3abb0100 	bcc	feec1e04 <BootRAM+0xde325a5>
    1a00:	46000000 	strmi	r0, [r0], -r0
    1a04:	04000004 	streq	r0, [r0], #-4
    1a08:	00000d94 	muleq	r0, r4, sp
    1a0c:	04bfbf01 	ldrteq	fp, [pc], #3841	; 1a14 <__Stack_Size+0x1614>
    1a10:	0e1f0000 	cdpeq	0, 1, cr0, cr15, cr0, {0}
    1a14:	0100000c 	tsteq	r0, ip
    1a18:	00003ac0 	andeq	r3, r0, r0, asr #21
    1a1c:	00046700 	andeq	r6, r4, r0, lsl #14
    1a20:	0d2a1f00 	stceq	15, cr1, [sl, #-0]
    1a24:	c2010000 	andgt	r0, r1, #0
    1a28:	00000783 	andeq	r0, r0, r3, lsl #15
    1a2c:	00000467 	andeq	r0, r0, r7, ror #8
    1a30:	0dbd2000 	ldceq	0, cr2, [sp]
    1a34:	df010000 	svcle	0x00010000
    1a38:	08000738 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl}
    1a3c:	0000002c 	andeq	r0, r0, ip, lsr #32
    1a40:	07d09c01 	ldrbeq	r9, [r0, r1, lsl #24]
    1a44:	03210000 	teqeq	r1, #0
    1a48:	0100000c 	tsteq	r0, ip
    1a4c:	00004cdf 	ldrdeq	r4, [r0], -pc	; <UNPREDICTABLE>
    1a50:	00500100 	subseq	r0, r0, r0, lsl #2
    1a54:	000a531e 	andeq	r5, sl, lr, lsl r3
    1a58:	b7f10100 	ldrblt	r0, [r1, r0, lsl #2]!
    1a5c:	64000006 	strvs	r0, [r0], #-6
    1a60:	48080007 	stmdami	r8, {r0, r1, r2}
    1a64:	01000000 	mrseq	r0, (UNDEF: 0)
    1a68:	0008089c 	muleq	r8, ip, r8
    1a6c:	0d181f00 	ldceq	15, cr1, [r8, #-0]
    1a70:	f3010000 	vhadd.u8	d0, d1, d0
    1a74:	000000b4 	strheq	r0, [r0], -r4
    1a78:	0000047a 	andeq	r0, r0, sl, ror r4
    1a7c:	00079825 	andeq	r9, r7, r5, lsr #16
    1a80:	0007ad08 	andeq	sl, r7, r8, lsl #26
    1a84:	50012400 	andpl	r2, r1, r0, lsl #8
    1a88:	00003001 	andeq	r3, r0, r1
    1a8c:	00070a31 	andeq	r0, r7, r1, lsr sl
    1a90:	01100100 	tsteq	r0, r0, lsl #2
    1a94:	080007ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl}
    1a98:	0000006c 	andeq	r0, r0, ip, rrx
    1a9c:	089f9c01 	ldmeq	pc, {r0, sl, fp, ip, pc}	; <UNPREDICTABLE>
    1aa0:	25320000 	ldrcs	r0, [r2, #-0]!
    1aa4:	0100000c 	tsteq	r0, ip
    1aa8:	089f0110 	ldmeq	pc, {r4, r8}	; <UNPREDICTABLE>
    1aac:	50010000 	andpl	r0, r1, r0
    1ab0:	000dcd33 	andeq	ip, sp, r3, lsr sp
    1ab4:	01110100 	tsteq	r1, r0, lsl #2
    1ab8:	0000003a 	andeq	r0, r0, sl, lsr r0
    1abc:	00000499 	muleq	r0, r9, r4
    1ac0:	000bad33 	andeq	sl, fp, r3, lsr sp
    1ac4:	01120100 	tsteq	r2, r0, lsl #2
    1ac8:	0000003a 	andeq	r0, r0, sl, lsr r0
    1acc:	00000505 	andeq	r0, r0, r5, lsl #10
    1ad0:	000c3a33 	andeq	r3, ip, r3, lsr sl
    1ad4:	01130100 	tsteq	r3, r0, lsl #2
    1ad8:	0000003a 	andeq	r0, r0, sl, lsr r0
    1adc:	0000053a 	andeq	r0, r0, sl, lsr r5
    1ae0:	000bc333 	andeq	ip, fp, r3, lsr r3
    1ae4:	01140100 	tsteq	r4, r0, lsl #2
    1ae8:	0000003a 	andeq	r0, r0, sl, lsr r0
    1aec:	00000572 	andeq	r0, r0, r2, ror r5
    1af0:	000b5833 	andeq	r5, fp, r3, lsr r8
    1af4:	01150100 	tsteq	r5, r0, lsl #2
    1af8:	0000003a 	andeq	r0, r0, sl, lsr r0
    1afc:	000005af 	andeq	r0, r0, pc, lsr #11
    1b00:	000ca134 	andeq	sl, ip, r4, lsr r1
    1b04:	01170100 	tsteq	r7, r0, lsl #2
    1b08:	000008a5 	andeq	r0, r0, r5, lsr #17
    1b0c:	8083da80 	addhi	sp, r3, r0, lsl #21
    1b10:	0be7347e 	bleq	ff9ced10 <BootRAM+0xe93f4b1>
    1b14:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    1b18:	0008ab01 	andeq	sl, r8, r1, lsl #22
    1b1c:	83c28000 	bichi	r8, r2, #0
    1b20:	13007e80 	movwne	r7, #3712	; 0xe80
    1b24:	00028804 	andeq	r8, r2, r4, lsl #16
    1b28:	59041300 	stmdbpl	r4, {r8, r9, ip}
    1b2c:	13000003 	movwne	r0, #3
    1b30:	00024404 	andeq	r4, r2, r4, lsl #8
    1b34:	0bed3100 	bleq	ffb4df3c <BootRAM+0xeabe6dd>
    1b38:	33010000 	movwcc	r0, #4096	; 0x1000
    1b3c:	00081801 	andeq	r1, r8, r1, lsl #16
    1b40:	00002408 	andeq	r2, r0, r8, lsl #8
    1b44:	d99c0100 	ldmible	ip, {r8}
    1b48:	34000008 	strcc	r0, [r0], #-8
    1b4c:	00000be7 	andeq	r0, r0, r7, ror #23
    1b50:	ab013401 	blge	4eb5c <__Stack_Size+0x4e75c>
    1b54:	80000008 	andhi	r0, r0, r8
    1b58:	7e8083c2 	cdpvc	3, 8, cr8, cr0, cr2, {6}
    1b5c:	0a292000 	beq	a49b64 <__Stack_Size+0xa49764>
    1b60:	cc010000 	stcgt	0, cr0, [r1], {-0}
    1b64:	0800083c 	stmdaeq	r0, {r2, r3, r4, r5, fp}
    1b68:	00000028 	andeq	r0, r0, r8, lsr #32
    1b6c:	09429c01 	stmdbeq	r2, {r0, sl, fp, ip, pc}^
    1b70:	9c1c0000 	ldcls	0, cr0, [ip], {-0}
    1b74:	0100000d 	tsteq	r0, sp
    1b78:	00003acc 	andeq	r3, r0, ip, asr #21
    1b7c:	0005dd00 	andeq	sp, r5, r0, lsl #26
    1b80:	04c53500 	strbeq	r3, [r5], #1280	; 0x500
    1b84:	083e0000 	ldmdaeq	lr!, {}	; <UNPREDICTABLE>
    1b88:	01380800 	teqeq	r8, r0, lsl #16
    1b8c:	d1010000 	mrsle	r0, (UNDEF: 1)
    1b90:	00084a36 	andeq	r4, r8, r6, lsr sl
    1b94:	000b1808 	andeq	r1, fp, r8, lsl #16
    1b98:	084e3600 	stmdaeq	lr, {r9, sl, ip, sp}^
    1b9c:	08b10800 	ldmeq	r1!, {fp}
    1ba0:	52360000 	eorspl	r0, r6, #0
    1ba4:	1f080008 	svcne	0x00080008
    1ba8:	3600000b 	strcc	r0, [r0], -fp
    1bac:	08000856 	stmdaeq	r0, {r1, r2, r4, r6, fp}
    1bb0:	00000653 	andeq	r0, r0, r3, asr r6
    1bb4:	00086037 	andeq	r6, r8, r7, lsr r0
    1bb8:	00075f08 	andeq	r5, r7, r8, lsl #30
    1bbc:	50012400 	andpl	r2, r1, r0, lsl #8
    1bc0:	5001f303 	andpl	pc, r1, r3, lsl #6
    1bc4:	0f310000 	svceq	0x00310000
    1bc8:	0100000b 	tsteq	r0, fp
    1bcc:	0864013d 	stmdaeq	r4!, {r0, r2, r3, r4, r5, r8}^
    1bd0:	00140800 	andseq	r0, r4, r0, lsl #16
    1bd4:	9c010000 	stcls	0, cr0, [r1], {-0}
    1bd8:	0000096a 	andeq	r0, r0, sl, ror #18
    1bdc:	000ca134 	andeq	sl, ip, r4, lsr r1
    1be0:	013e0100 	teqeq	lr, r0, lsl #2
    1be4:	000008a5 	andeq	r0, r0, r5, lsr #17
    1be8:	8083da80 	addhi	sp, r3, r0, lsl #21
    1bec:	ae38007e 	mrcge	0, 1, r0, cr8, cr14, {3}
    1bf0:	0100000d 	tsteq	r0, sp
    1bf4:	00b40149 	adcseq	r0, r4, r9, asr #2
    1bf8:	08780000 	ldmdaeq	r8!, {}^	; <UNPREDICTABLE>
    1bfc:	00340800 	eorseq	r0, r4, r0, lsl #16
    1c00:	9c010000 	stcls	0, cr0, [r1], {-0}
    1c04:	000009a5 	andeq	r0, r0, r5, lsr #19
    1c08:	000b4f39 	andeq	r4, fp, r9, lsr pc
    1c0c:	01490100 	mrseq	r0, (UNDEF: 89)
    1c10:	0000003a 	andeq	r0, r0, sl, lsr r0
    1c14:	00000614 	andeq	r0, r0, r4, lsl r6
    1c18:	000b5f33 	andeq	r5, fp, r3, lsr pc
    1c1c:	014a0100 	mrseq	r0, (UNDEF: 90)
    1c20:	0000003a 	andeq	r0, r0, sl, lsr r0
    1c24:	00000635 	andeq	r0, r0, r5, lsr r6
    1c28:	0b733800 	bleq	1ccfc30 <__Stack_Size+0x1ccf830>
    1c2c:	5a010000 	bpl	41c34 <__Stack_Size+0x41834>
    1c30:	0000b401 	andeq	fp, r0, r1, lsl #8
    1c34:	00000000 	andeq	r0, r0, r0
    1c38:	00003000 	andeq	r3, r0, r0
    1c3c:	e79c0100 	ldr	r0, [ip, r0, lsl #2]
    1c40:	39000009 	stmdbcc	r0, {r0, r3}
    1c44:	00000b4f 	andeq	r0, r0, pc, asr #22
    1c48:	3a015a01 	bcc	58454 <__Stack_Size+0x58054>
    1c4c:	55000000 	strpl	r0, [r0, #-0]
    1c50:	3a000006 	bcc	1c70 <__Stack_Size+0x1870>
    1c54:	5a01006e 	bpl	41e14 <__Stack_Size+0x41a14>
    1c58:	00004c01 	andeq	r4, r0, r1, lsl #24
    1c5c:	00068100 	andeq	r8, r6, r0, lsl #2
    1c60:	00003600 	andeq	r3, r0, r0, lsl #12
    1c64:	096a0000 	stmdbeq	sl!, {}^	; <UNPREDICTABLE>
    1c68:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    1c6c:	00000d61 	andeq	r0, r0, r1, ror #26
    1c70:	b4016401 	strlt	r6, [r1], #-1025	; 0x401
    1c74:	ac000000 	stcge	0, cr0, [r0], {-0}
    1c78:	4c080008 	stcmi	0, cr0, [r8], {8}
    1c7c:	01000000 	mrseq	r0, (UNDEF: 0)
    1c80:	000a5e9c 	muleq	sl, ip, lr
    1c84:	0b923900 	bleq	fe49008c <BootRAM+0xd40082d>
    1c88:	64010000 	strvs	r0, [r1], #-0
    1c8c:	00003a01 	andeq	r3, r0, r1, lsl #20
    1c90:	0006c500 	andeq	ip, r6, r0, lsl #10
    1c94:	0c7c3200 	lfmeq	f3, 2, [ip], #-0
    1c98:	64010000 	strvs	r0, [r1], #-0
    1c9c:	00003a01 	andeq	r3, r0, r1, lsl #20
    1ca0:	33510100 	cmpcc	r1, #0, 2
    1ca4:	00000d8a 	andeq	r0, r0, sl, lsl #27
    1ca8:	5e016501 	cfsh32pl	mvfx6, mvfx1, #1
    1cac:	c500000a 	strgt	r0, [r0, #-10]
    1cb0:	3b000006 	blcc	1cd0 <__Stack_Size+0x18d0>
    1cb4:	00000c55 	andeq	r0, r0, r5, asr ip
    1cb8:	6f016601 	svcvs	0x00016601
    1cbc:	02000000 	andeq	r0, r0, #0
    1cc0:	d93b6891 	ldmdble	fp!, {r0, r4, r7, fp, sp, lr}
    1cc4:	0100000d 	tsteq	r0, sp
    1cc8:	006f0167 	rsbeq	r0, pc, r7, ror #2
    1ccc:	91020000 	mrsls	r0, (UNDEF: 2)
    1cd0:	0b5f336c 	bleq	17cea88 <__Stack_Size+0x17ce688>
    1cd4:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    1cd8:	00003a01 	andeq	r3, r0, r1, lsl #20
    1cdc:	0006e600 	andeq	lr, r6, r0, lsl #12
    1ce0:	04130000 	ldreq	r0, [r3], #-0
    1ce4:	0000007f 	andeq	r0, r0, pc, ror r0
    1ce8:	0004c53c 	andeq	ip, r4, ip, lsr r5
    1cec:	0008f800 	andeq	pc, r8, r0, lsl #16
    1cf0:	00000c08 	andeq	r0, r0, r8, lsl #24
    1cf4:	3d9c0100 	ldfccs	f0, [ip]
    1cf8:	00000bca 	andeq	r0, r0, sl, asr #23
    1cfc:	04018601 	streq	r8, [r1], #-1537	; 0x601
    1d00:	18080009 	stmdane	r8, {r0, r3}
    1d04:	01000000 	mrseq	r0, (UNDEF: 0)
    1d08:	068d189c 	pkhbteq	r1, sp, ip, lsl #17
    1d0c:	091c0000 	ldmdbeq	ip, {}	; <UNPREDICTABLE>
    1d10:	00120800 	andseq	r0, r2, r0, lsl #16
    1d14:	9c010000 	stcls	0, cr0, [r1], {-0}
    1d18:	00000aab 	andeq	r0, r0, fp, lsr #21
    1d1c:	00069e1a 	andeq	r9, r6, sl, lsl lr
    1d20:	00070400 	andeq	r0, r7, r0, lsl #8
    1d24:	06aa3e00 	strteq	r3, [sl], r0, lsl #28
    1d28:	07220000 	streq	r0, [r2, -r0]!
    1d2c:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    1d30:	00000bd6 	ldrdeq	r0, [r0], -r6
    1d34:	b7019a01 	strlt	r9, [r1, -r1, lsl #20]
    1d38:	30000006 	andcc	r0, r0, r6
    1d3c:	10080009 	andne	r0, r8, r9
    1d40:	01000000 	mrseq	r0, (UNDEF: 0)
    1d44:	000ad69c 	muleq	sl, ip, r6
    1d48:	0d703f00 	ldcleq	15, cr3, [r0, #-0]
    1d4c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1d50:	000ad601 	andeq	sp, sl, r1, lsl #12
    1d54:	fff7e000 			; <UNDEFINED> instruction: 0xfff7e000
    1d58:	0413001f 	ldreq	r0, [r3], #-31
    1d5c:	00000057 	andeq	r0, r0, r7, asr r0
    1d60:	0002c438 	andeq	ip, r2, r8, lsr r4
    1d64:	01a00100 	lsleq	r0, r0, #2
    1d68:	000006b7 			; <UNDEFINED> instruction: 0x000006b7
    1d6c:	08000940 	stmdaeq	r0, {r6, r8, fp}
    1d70:	00000018 	andeq	r0, r0, r8, lsl r0
    1d74:	0b079c01 	bleq	1e8d80 <__Stack_Size+0x1e8980>
    1d78:	703f0000 	eorsvc	r0, pc, r0
    1d7c:	0100000d 	tsteq	r0, sp
    1d80:	0ad601a3 	beq	ff582414 <BootRAM+0xe4f2bb5>
    1d84:	f7e00000 			; <UNDEFINED> instruction: 0xf7e00000
    1d88:	40001fff 	strdmi	r1, [r0], -pc	; <UNPREDICTABLE>
    1d8c:	00000438 	andeq	r0, r0, r8, lsr r4
    1d90:	06b72c04 	ldrteq	r2, [r7], r4, lsl #24
    1d94:	03050000 	movweq	r0, #20480	; 0x5000
    1d98:	200001c4 	andcs	r0, r0, r4, asr #3
    1d9c:	0003cd41 	andeq	ip, r3, r1, asr #26
    1da0:	41800400 	orrmi	r0, r0, r0, lsl #8
    1da4:	000007d5 	ldrdeq	r0, [r0], -r5
    1da8:	50005204 	andpl	r5, r0, r4, lsl #4
    1dac:	04000006 	streq	r0, [r0], #-6
    1db0:	0009ac00 	andeq	sl, r9, r0, lsl #24
    1db4:	58010400 	stmdapl	r1, {sl}
    1db8:	01000001 	tsteq	r0, r1
    1dbc:	00000e18 	andeq	r0, r0, r8, lsl lr
    1dc0:	00000862 	andeq	r0, r0, r2, ror #16
    1dc4:	00000218 	andeq	r0, r0, r8, lsl r2
    1dc8:	00000000 	andeq	r0, r0, r0
    1dcc:	0000089a 	muleq	r0, sl, r8
    1dd0:	f6050402 			; <UNDEFINED> instruction: 0xf6050402
    1dd4:	02000001 	andeq	r0, r0, #1
    1dd8:	06980502 	ldreq	r0, [r8], r2, lsl #10
    1ddc:	01020000 	mrseq	r0, (UNDEF: 2)
    1de0:	00064406 	andeq	r4, r6, r6, lsl #8
    1de4:	33750300 	cmncc	r5, #0, 6
    1de8:	27020032 	smladxcs	r2, r2, r0, r0
    1dec:	00000045 	andeq	r0, r0, r5, asr #32
    1df0:	7b070402 	blvc	1c2e00 <__Stack_Size+0x1c2a00>
    1df4:	03000003 	movweq	r0, #3
    1df8:	00363175 	eorseq	r3, r6, r5, ror r1
    1dfc:	00572802 	subseq	r2, r7, r2, lsl #16
    1e00:	02020000 	andeq	r0, r2, #0
    1e04:	0003d707 	andeq	sp, r3, r7, lsl #14
    1e08:	38750300 	ldmdacc	r5!, {r8, r9}^
    1e0c:	68290200 	stmdavs	r9!, {r9}
    1e10:	02000000 	andeq	r0, r0, #0
    1e14:	06420801 	strbeq	r0, [r2], -r1, lsl #16
    1e18:	01040000 	mrseq	r0, (UNDEF: 4)
    1e1c:	00843702 	addeq	r3, r4, r2, lsl #14
    1e20:	cf050000 	svcgt	0x00050000
    1e24:	00000005 	andeq	r0, r0, r5
    1e28:	00073d05 	andeq	r3, r7, r5, lsl #26
    1e2c:	06000100 	streq	r0, [r0], -r0, lsl #2
    1e30:	00000433 	andeq	r0, r0, r3, lsr r4
    1e34:	006f3702 	rsbeq	r3, pc, r2, lsl #14
    1e38:	04070000 	streq	r0, [r7], #-0
    1e3c:	0000005e 	andeq	r0, r0, lr, asr r0
    1e40:	00090e08 	andeq	r0, r9, r8, lsl #28
    1e44:	38030c00 	stmdacc	r3, {sl, fp}
    1e48:	000000d2 	ldrdeq	r0, [r0], -r2
    1e4c:	00029009 	andeq	r9, r2, r9
    1e50:	4c500300 	mrrcmi	3, 0, r0, r0, cr0	; <UNPREDICTABLE>
    1e54:	00000000 	andeq	r0, r0, r0
    1e58:	00031909 	andeq	r1, r3, r9, lsl #18
    1e5c:	4c510300 	mrrcmi	3, 0, r0, r1, cr0
    1e60:	02000000 	andeq	r0, r0, #0
    1e64:	0015a609 	andseq	sl, r5, r9, lsl #12
    1e68:	4c520300 	mrrcmi	3, 0, r0, r2, cr0
    1e6c:	04000000 	streq	r0, [r0], #-0
    1e70:	0000e309 	andeq	lr, r0, r9, lsl #6
    1e74:	e1530300 	cmp	r3, r0, lsl #6
    1e78:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1e7c:	008f0a00 	addeq	r0, pc, r0, lsl #20
    1e80:	00e10000 	rsceq	r0, r1, r0
    1e84:	4c0b0000 	stcmi	0, cr0, [fp], {-0}
    1e88:	00000000 	andeq	r0, r0, r0
    1e8c:	00d20407 	sbcseq	r0, r2, r7, lsl #8
    1e90:	0f060000 	svceq	0x00060000
    1e94:	03000009 	movweq	r0, #9
    1e98:	00009554 	andeq	r9, r0, r4, asr r5
    1e9c:	57420c00 	strbpl	r0, [r2, -r0, lsl #24]
    1ea0:	62030200 	andvs	r0, r3, #0, 4
    1ea4:	00000116 	andeq	r0, r0, r6, lsl r1
    1ea8:	3062620d 	rsbcc	r6, r2, sp, lsl #4
    1eac:	5e650300 	cdppl	3, 6, cr0, cr5, cr0, {0}
    1eb0:	00000000 	andeq	r0, r0, r0
    1eb4:	3162620d 	cmncc	r2, sp, lsl #4
    1eb8:	5e660300 	cdppl	3, 6, cr0, cr6, cr0, {0}
    1ebc:	01000000 	mrseq	r0, (UNDEF: 0)
    1ec0:	03020e00 	movweq	r0, #11776	; 0x2e00
    1ec4:	0001325f 	andeq	r3, r1, pc, asr r2
    1ec8:	00770f00 	rsbseq	r0, r7, r0, lsl #30
    1ecc:	004c6103 	subeq	r6, ip, r3, lsl #2
    1ed0:	620f0000 	andvs	r0, pc, #0
    1ed4:	68030077 	stmdavs	r3, {r0, r1, r2, r4, r5, r6}
    1ed8:	000000f2 	strdeq	r0, [r0], -r2
    1edc:	03ff0600 	mvnseq	r0, #0, 12
    1ee0:	69030000 	stmdbvs	r3, {}	; <UNPREDICTABLE>
    1ee4:	00000116 	andeq	r0, r0, r6, lsl r1
    1ee8:	00003c08 	andeq	r3, r0, r8, lsl #24
    1eec:	6b031c00 	blvs	c8ef4 <__Stack_Size+0xc8af4>
    1ef0:	000001ce 	andeq	r0, r0, lr, asr #3
    1ef4:	00055009 	andeq	r5, r5, r9
    1ef8:	5e6d0300 	cdppl	3, 6, cr0, cr13, cr0, {0}
    1efc:	00000000 	andeq	r0, r0, r0
    1f00:	00021609 	andeq	r1, r2, r9, lsl #12
    1f04:	5e6e0300 	cdppl	3, 6, cr0, cr14, cr0, {0}
    1f08:	01000000 	mrseq	r0, (UNDEF: 0)
    1f0c:	00041809 	andeq	r1, r4, r9, lsl #16
    1f10:	326f0300 	rsbcc	r0, pc, #0, 6
    1f14:	02000001 	andeq	r0, r0, #1
    1f18:	00014809 	andeq	r4, r1, r9, lsl #16
    1f1c:	32700300 	rsbscc	r0, r0, #0, 6
    1f20:	04000001 	streq	r0, [r0], #-1
    1f24:	00080d09 	andeq	r0, r8, r9, lsl #26
    1f28:	32710300 	rsbscc	r0, r1, #0, 6
    1f2c:	06000001 	streq	r0, [r0], -r1
    1f30:	00093c09 	andeq	r3, r9, r9, lsl #24
    1f34:	5e730300 	cdppl	3, 7, cr0, cr3, cr0, {0}
    1f38:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1f3c:	0003a009 	andeq	sl, r3, r9
    1f40:	5e740300 	cdppl	3, 7, cr0, cr4, cr0, {0}
    1f44:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1f48:	0004a109 	andeq	sl, r4, r9, lsl #2
    1f4c:	5e750300 	cdppl	3, 7, cr0, cr5, cr0, {0}
    1f50:	0a000000 	beq	1f58 <__Stack_Size+0x1b58>
    1f54:	00088509 	andeq	r8, r8, r9, lsl #10
    1f58:	5e760300 	cdppl	3, 7, cr0, cr6, cr0, {0}
    1f5c:	0b000000 	bleq	1f64 <__Stack_Size+0x1b64>
    1f60:	00061c09 	andeq	r1, r6, r9, lsl #24
    1f64:	5e770300 	cdppl	3, 7, cr0, cr7, cr0, {0}
    1f68:	0c000000 	stceq	0, cr0, [r0], {-0}
    1f6c:	00071309 	andeq	r1, r7, r9, lsl #6
    1f70:	e77a0300 	ldrb	r0, [sl, -r0, lsl #6]!
    1f74:	10000000 	andne	r0, r0, r0
    1f78:	003d0600 	eorseq	r0, sp, r0, lsl #12
    1f7c:	7b030000 	blvc	c1f84 <__Stack_Size+0xc1b84>
    1f80:	0000013d 	andeq	r0, r0, sp, lsr r1
    1f84:	15070402 	strne	r0, [r7, #-1026]	; 0x402
    1f88:	04000005 	streq	r0, [r0], #-5
    1f8c:	f5230401 			; <UNDEFINED> instruction: 0xf5230401
    1f90:	05000001 	streq	r0, [r0, #-1]
    1f94:	00000e79 	andeq	r0, r0, r9, ror lr
    1f98:	0e240500 	cfsh64eq	mvdx0, mvdx4, #0
    1f9c:	00010000 	andeq	r0, r1, r0
    1fa0:	000f0e06 	andeq	r0, pc, r6, lsl #28
    1fa4:	e0230400 	eor	r0, r3, r0, lsl #8
    1fa8:	08000001 	stmdaeq	r0, {r0}
    1fac:	00000e35 	andeq	r0, r0, r5, lsr lr
    1fb0:	55290406 	strpl	r0, [r9, #-1030]!	; 0x406
    1fb4:	09000002 	stmdbeq	r0, {r1}
    1fb8:	00000f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
    1fbc:	005e2a04 	subseq	r2, lr, r4, lsl #20
    1fc0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1fc4:	00000e4c 	andeq	r0, r0, ip, asr #28
    1fc8:	005e2b04 	subseq	r2, lr, r4, lsl #22
    1fcc:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    1fd0:	00000e5b 	andeq	r0, r0, fp, asr lr
    1fd4:	005e2c04 	subseq	r2, lr, r4, lsl #24
    1fd8:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    1fdc:	00000e6a 	andeq	r0, r0, sl, ror #28
    1fe0:	005e2d04 	subseq	r2, lr, r4, lsl #26
    1fe4:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    1fe8:	00000f60 	andeq	r0, r0, r0, ror #30
    1fec:	005e2e04 	subseq	r2, lr, r4, lsl #28
    1ff0:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    1ff4:	00000e05 	andeq	r0, r0, r5, lsl #28
    1ff8:	005e2f04 	subseq	r2, lr, r4, lsl #30
    1ffc:	00050000 	andeq	r0, r5, r0
    2000:	000e3606 	andeq	r3, lr, r6, lsl #12
    2004:	00300400 	eorseq	r0, r0, r0, lsl #8
    2008:	10000002 	andne	r0, r0, r2
    200c:	00000e1e 	andeq	r0, r0, lr, lsl lr
    2010:	85320401 	ldrhi	r0, [r2, #-1025]!	; 0x401
    2014:	05000002 	streq	r0, [r0, #-2]
    2018:	00000f79 	andeq	r0, r0, r9, ror pc
    201c:	0fac0500 	svceq	0x00ac0500
    2020:	11010000 	mrsne	r0, (UNDEF: 1)
    2024:	00444e45 	subeq	r4, r4, r5, asr #28
    2028:	00670502 	rsbeq	r0, r7, r2, lsl #10
    202c:	00030000 	andeq	r0, r3, r0
    2030:	000e1f06 	andeq	r1, lr, r6, lsl #30
    2034:	60370400 	eorsvs	r0, r7, r0, lsl #8
    2038:	12000002 	andne	r0, r0, #2
    203c:	00000084 	andeq	r0, r0, r4, lsl #1
    2040:	09583801 	ldmdbeq	r8, {r0, fp, ip, sp}^
    2044:	005c0800 	subseq	r0, ip, r0, lsl #16
    2048:	9c010000 	stcls	0, cr0, [r1], {-0}
    204c:	00050413 	andeq	r0, r5, r3, lsl r4
    2050:	013f0100 	teqeq	pc, r0, lsl #2
    2054:	080009b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, fp}
    2058:	00000044 	andeq	r0, r0, r4, asr #32
    205c:	02e39c01 	rsceq	r9, r3, #256	; 0x100
    2060:	6e140000 	cdpvs	0, 1, cr0, cr4, cr0, {0}
    2064:	0100000f 	tsteq	r0, pc
    2068:	005e0140 	subseq	r0, lr, r0, asr #2
    206c:	07540000 	ldrbeq	r0, [r4, -r0]
    2070:	d0150000 	andsle	r0, r5, r0
    2074:	d8080009 	stmdale	r8, {r0, r3}
    2078:	16000005 	strne	r0, [r0], -r5
    207c:	080009d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, fp}
    2080:	000005e0 	andeq	r0, r0, r0, ror #11
    2084:	0009ec16 	andeq	lr, r9, r6, lsl ip
    2088:	0005e708 	andeq	lr, r5, r8, lsl #14
    208c:	f2170000 	vhadd.s16	d0, d7, d0
    2090:	0100000e 	tsteq	r0, lr
    2094:	00000157 	andeq	r0, r0, r7, asr r1
    2098:	00020000 	andeq	r0, r2, r0
    209c:	9c010000 	stcls	0, cr0, [r1], {-0}
    20a0:	000ed718 	andeq	sp, lr, r8, lsl r7
    20a4:	015a0100 	cmpeq	sl, r0, lsl #2
    20a8:	0000008f 	andeq	r0, r0, pc, lsl #1
    20ac:	080009f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, fp}
    20b0:	00000018 	andeq	r0, r0, r8, lsl r0
    20b4:	03209c01 	teqeq	r0, #256	; 0x100
    20b8:	67190000 	ldrvs	r0, [r9, -r0]
    20bc:	0100000f 	tsteq	r0, pc
    20c0:	004c015a 	subeq	r0, ip, sl, asr r1
    20c4:	077d0000 	ldrbeq	r0, [sp, -r0]!
    20c8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    20cc:	00000eba 			; <UNDEFINED> instruction: 0x00000eba
    20d0:	8f016301 	svchi	0x00016301
    20d4:	10000000 	andne	r0, r0, r0
    20d8:	1808000a 	stmdane	r8, {r1, r3}
    20dc:	01000000 	mrseq	r0, (UNDEF: 0)
    20e0:	00034b9c 	muleq	r3, ip, fp
    20e4:	0f671900 	svceq	0x00671900
    20e8:	63010000 	movwvs	r0, #4096	; 0x1000
    20ec:	00004c01 	andeq	r4, r0, r1, lsl #24
    20f0:	00079e00 	andeq	r9, r7, r0, lsl #28
    20f4:	e4180000 	ldr	r0, [r8], #-0
    20f8:	0100000e 	tsteq	r0, lr
    20fc:	008f016d 	addeq	r0, pc, sp, ror #2
    2100:	0a280000 	beq	a02108 <__Stack_Size+0xa01d08>
    2104:	00280800 	eoreq	r0, r8, r0, lsl #16
    2108:	9c010000 	stcls	0, cr0, [r1], {-0}
    210c:	00000376 	andeq	r0, r0, r6, ror r3
    2110:	000f6719 	andeq	r6, pc, r9, lsl r7	; <UNPREDICTABLE>
    2114:	016d0100 	cmneq	sp, r0, lsl #2
    2118:	0000004c 	andeq	r0, r0, ip, asr #32
    211c:	000007bf 			; <UNDEFINED> instruction: 0x000007bf
    2120:	0e891800 	cdpeq	8, 8, cr1, cr9, cr0, {0}
    2124:	77010000 	strvc	r0, [r1, -r0]
    2128:	00008f01 	andeq	r8, r0, r1, lsl #30
    212c:	000a5000 	andeq	r5, sl, r0
    2130:	00003408 	andeq	r3, r0, r8, lsl #8
    2134:	a19c0100 	orrsge	r0, ip, r0, lsl #2
    2138:	19000003 	stmdbne	r0, {r0, r1}
    213c:	00000f67 	andeq	r0, r0, r7, ror #30
    2140:	4c017701 	stcmi	7, cr7, [r1], {1}
    2144:	e0000000 	and	r0, r0, r0
    2148:	00000007 	andeq	r0, r0, r7
    214c:	000ea613 	andeq	sl, lr, r3, lsl r6
    2150:	01800100 	orreq	r0, r0, r0, lsl #2
    2154:	08000a84 	stmdaeq	r0, {r2, r7, r9, fp}
    2158:	0000004c 	andeq	r0, r0, ip, asr #32
    215c:	03fd9c01 	mvnseq	r9, #256	; 0x100
    2160:	691a0000 	ldmdbvs	sl, {}	; <UNPREDICTABLE>
    2164:	01810100 	orreq	r0, r1, r0, lsl #2
    2168:	000003fd 	strdeq	r0, [r0], -sp
    216c:	00000801 	andeq	r0, r0, r1, lsl #16
    2170:	000f8314 	andeq	r8, pc, r4, lsl r3	; <UNPREDICTABLE>
    2174:	01820100 	orreq	r0, r2, r0, lsl #2
    2178:	00000404 	andeq	r0, r0, r4, lsl #8
    217c:	00000814 	andeq	r0, r0, r4, lsl r8
    2180:	000a9a1b 	andeq	r9, sl, fp, lsl sl
    2184:	0005ee08 	andeq	lr, r5, r8, lsl #28
    2188:	0003e900 	andeq	lr, r3, r0, lsl #18
    218c:	50011c00 	andpl	r1, r1, r0, lsl #24
    2190:	00007502 	andeq	r7, r0, r2, lsl #10
    2194:	000aae1d 	andeq	sl, sl, sp, lsl lr
    2198:	00060408 	andeq	r0, r6, r8, lsl #8
    219c:	50011c00 	andpl	r1, r1, r0, lsl #24
    21a0:	74007505 	strvc	r7, [r0], #-1285	; 0x505
    21a4:	00002200 	andeq	r2, r0, r0, lsl #4
    21a8:	6905041e 	stmdbvs	r5, {r1, r2, r3, r4, sl}
    21ac:	0700746e 	streq	r7, [r0, -lr, ror #8]
    21b0:	00003a04 	andeq	r3, r0, r4, lsl #20
    21b4:	03251f00 	teqeq	r5, #0, 30
    21b8:	4b010000 	blmi	421c0 <__Stack_Size+0x41dc0>
    21bc:	00000084 	andeq	r0, r0, r4, lsl #1
    21c0:	08000ad0 	stmdaeq	r0, {r4, r6, r7, r9, fp}
    21c4:	0000020c 	andeq	r0, r0, ip, lsl #4
    21c8:	04759c01 	ldrbteq	r9, [r5], #-3073	; 0xc01
    21cc:	6e200000 	cdpvs	0, 2, cr0, cr0, cr0, {0}
    21d0:	0100000f 	tsteq	r0, pc
    21d4:	00005e52 	andeq	r5, r0, r2, asr lr
    21d8:	00082700 	andeq	r2, r8, r0, lsl #14
    21dc:	0b161500 	bleq	5875e4 <__Stack_Size+0x5871e4>
    21e0:	061f0800 	ldreq	r0, [pc], -r0, lsl #16
    21e4:	1a150000 	bne	5421ec <__Stack_Size+0x541dec>
    21e8:	2608000b 	strcs	r0, [r8], -fp
    21ec:	1b000006 	blne	220c <__Stack_Size+0x1e0c>
    21f0:	08000b22 	stmdaeq	r0, {r1, r5, r8, r9, fp}
    21f4:	0000062e 	andeq	r0, r0, lr, lsr #12
    21f8:	00000459 	andeq	r0, r0, r9, asr r4
    21fc:	0350011c 	cmpeq	r0, #28, 2
    2200:	00424d0a 	subeq	r4, r2, sl, lsl #26
    2204:	000b5a15 	andeq	r5, fp, r5, lsl sl
    2208:	00063f08 	andeq	r3, r6, r8, lsl #30
    220c:	0b881500 	bleq	fe207614 <BootRAM+0xd177db5>
    2210:	03a10800 			; <UNDEFINED> instruction: 0x03a10800
    2214:	c2150000 	andsgt	r0, r5, #0
    2218:	4b08000b 	blmi	20224c <__Stack_Size+0x201e4c>
    221c:	00000006 	andeq	r0, r0, r6
    2220:	000fb321 	andeq	fp, pc, r1, lsr #6
    2224:	01a10100 			; <UNDEFINED> instruction: 0x01a10100
    2228:	0000005e 	andeq	r0, r0, lr, asr r0
    222c:	00000000 	andeq	r0, r0, r0
    2230:	0000000c 	andeq	r0, r0, ip
    2234:	a0139c01 	andsge	r9, r3, r1, lsl #24
    2238:	0100000f 	tsteq	r0, pc
    223c:	000001a5 	andeq	r0, r0, r5, lsr #3
    2240:	000c0000 	andeq	r0, ip, r0
    2244:	9c010000 	stcls	0, cr0, [r1], {-0}
    2248:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
    224c:	000f0522 	andeq	r0, pc, r2, lsr #10
    2250:	01a50100 			; <UNDEFINED> instruction: 0x01a50100
    2254:	0000005e 	andeq	r0, r0, lr, asr r0
    2258:	23005001 	movwcs	r5, #1
    225c:	00000b2b 	andeq	r0, r0, fp, lsr #22
    2260:	8401a901 	strhi	sl, [r1], #-2305	; 0x901
    2264:	dc000000 	stcle	0, cr0, [r0], {-0}
    2268:	0c08000c 	stceq	0, cr0, [r8], {12}
    226c:	01000000 	mrseq	r0, (UNDEF: 0)
    2270:	0a0d249c 	beq	34b4e8 <__Stack_Size+0x34b0e8>
    2274:	ad010000 	stcge	0, cr0, [r1, #-0]
    2278:	000ce801 	andeq	lr, ip, r1, lsl #16
    227c:	00000408 	andeq	r0, r0, r8, lsl #8
    2280:	259c0100 	ldrcs	r0, [ip, #256]	; 0x100
    2284:	00000e40 	andeq	r0, r0, r0, asr #28
    2288:	04e92601 	strbteq	r2, [r9], #1537	; 0x601
    228c:	03050000 	movweq	r0, #20480	; 0x5000
    2290:	200001c0 	andcs	r0, r0, r0, asr #3
    2294:	00003a26 	andeq	r3, r0, r6, lsr #20
    2298:	0f8d2500 	svceq	0x008d2500
    229c:	27010000 	strcs	r0, [r1, -r0]
    22a0:	000004e9 	andeq	r0, r0, r9, ror #9
    22a4:	01bc0305 			; <UNDEFINED> instruction: 0x01bc0305
    22a8:	1f252000 	svcne	0x00252000
    22ac:	0100000f 	tsteq	r0, pc
    22b0:	00051028 	andeq	r1, r5, r8, lsr #32
    22b4:	19030500 	stmdbne	r3, {r8, sl}
    22b8:	2620000a 	strtcs	r0, [r0], -sl
    22bc:	00000255 	andeq	r0, r0, r5, asr r2
    22c0:	00005e27 	andeq	r5, r0, r7, lsr #28
    22c4:	00052600 	andeq	r2, r5, r0, lsl #12
    22c8:	01d92800 	bicseq	r2, r9, r0, lsl #16
    22cc:	07ff0000 	ldrbeq	r0, [pc, r0]!
    22d0:	0e0d2500 	cfsh32eq	mvfx2, mvfx13, #0
    22d4:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    22d8:	00000537 	andeq	r0, r0, r7, lsr r5
    22dc:	02100305 	andseq	r0, r0, #335544320	; 0x14000000
    22e0:	15262000 	strne	r2, [r6, #-0]!
    22e4:	25000005 	strcs	r0, [r0, #-5]
    22e8:	00000f48 	andeq	r0, r0, r8, asr #30
    22ec:	04e93001 	strbteq	r3, [r9], #1
    22f0:	03050000 	movweq	r0, #20480	; 0x5000
    22f4:	20000a14 	andcs	r0, r0, r4, lsl sl
    22f8:	000f3b25 	andeq	r3, pc, r5, lsr #22
    22fc:	5e310100 	rsfpls	f0, f1, f0
    2300:	05000005 	streq	r0, [r0, #-5]
    2304:	000a1203 	andeq	r1, sl, r3, lsl #4
    2308:	004c2620 	subeq	r2, ip, r0, lsr #12
    230c:	2c250000 	stccs	0, cr0, [r5], #-0
    2310:	0100000f 	tsteq	r0, pc
    2314:	00055e32 	andeq	r5, r5, r2, lsr lr
    2318:	10030500 	andne	r0, r3, r0, lsl #10
    231c:	2920000a 	stmdbcs	r0!, {r1, r3}
    2320:	0000027c 	andeq	r0, r0, ip, ror r2
    2324:	057f2205 	ldrbeq	r2, [pc, #-517]!	; 2127 <__Stack_Size+0x1d27>
    2328:	04070000 	streq	r0, [r7], #-0
    232c:	000001ce 	andeq	r0, r0, lr, asr #3
    2330:	0004382a 	andeq	r3, r4, sl, lsr #16
    2334:	fd2c0600 	stc2	6, cr0, [ip, #-0]
    2338:	05000003 	streq	r0, [r0, #-3]
    233c:	0001c403 	andeq	ip, r1, r3, lsl #8
    2340:	0f582a20 	svceq	0x00582a20
    2344:	2a010000 	bcs	4234c <__Stack_Size+0x41f4c>
    2348:	000005a7 	andeq	r0, r0, r7, lsr #11
    234c:	0a1f0305 	beq	7c2f68 <__Stack_Size+0x7c2b68>
    2350:	84262000 	strthi	r2, [r6], #-0
    2354:	2a000000 	bcs	235c <__Stack_Size+0x1f5c>
    2358:	00000e97 	muleq	r0, r7, lr
    235c:	05bd2901 	ldreq	r2, [sp, #2305]!	; 0x901
    2360:	03050000 	movweq	r0, #20480	; 0x5000
    2364:	20000a18 	andcs	r0, r0, r8, lsl sl
    2368:	0001f526 	andeq	pc, r1, r6, lsr #10
    236c:	0ec82a00 	vdiveq.f32	s5, s16, s0
    2370:	35010000 	strcc	r0, [r1, #-0]
    2374:	000005d3 	ldrdeq	r0, [r0], -r3
    2378:	01cc0305 	biceq	r0, ip, r5, lsl #6
    237c:	85262000 	strhi	r2, [r6, #-0]!
    2380:	2b000002 	blcs	2390 <__Stack_Size+0x1f90>
    2384:	00000bed 	andeq	r0, r0, sp, ror #23
    2388:	2c010707 	stccs	7, cr0, [r1], {7}
    238c:	00000056 	andeq	r0, r0, r6, asr r0
    2390:	0f2c8106 	svceq	0x002c8106
    2394:	0700000b 	streq	r0, [r0, -fp]
    2398:	0dae2df8 	stceq	13, cr2, [lr, #992]!	; 0x3e0
    239c:	02070000 	andeq	r0, r7, #0
    23a0:	00008401 	andeq	r8, r0, r1, lsl #8
    23a4:	00060400 	andeq	r0, r6, r0, lsl #8
    23a8:	003a0b00 	eorseq	r0, sl, r0, lsl #22
    23ac:	2d000000 	stccs	0, cr0, [r0, #-0]
    23b0:	00000d61 	andeq	r0, r0, r1, ror #26
    23b4:	84010107 	strhi	r0, [r1], #-263	; 0x107
    23b8:	1f000000 	svcne	0x00000000
    23bc:	0b000006 	bleq	23dc <__Stack_Size+0x1fdc>
    23c0:	0000003a 	andeq	r0, r0, sl, lsr r0
    23c4:	00003a0b 	andeq	r3, r0, fp, lsl #20
    23c8:	c02c0000 	eorgt	r0, ip, r0
    23cc:	0700000a 	streq	r0, [r0, -sl]
    23d0:	0bca2bfc 	bleq	ff28d3c8 <BootRAM+0xe1fdb69>
    23d4:	05070000 	streq	r0, [r7, #-0]
    23d8:	0dbd2e01 	ldceq	14, cr2, [sp, #4]!
    23dc:	ee070000 	cdp	0, 0, cr0, cr7, cr0, {0}
    23e0:	0000063f 	andeq	r0, r0, pc, lsr r6
    23e4:	00004c0b 	andeq	r4, r0, fp, lsl #24
    23e8:	d62f0000 	strtle	r0, [pc], -r0
    23ec:	0700000b 	streq	r0, [r0, -fp]
    23f0:	03fd0109 	mvnseq	r0, #1073741826	; 0x40000002
    23f4:	5c2b0000 	stcpl	0, cr0, [fp], #-0
    23f8:	0700000c 	streq	r0, [r0, -ip]
    23fc:	88000104 	stmdahi	r0, {r2, r8}
    2400:	0400000c 	streq	r0, [r0], #-12
    2404:	000c8800 	andeq	r8, ip, r0, lsl #16
    2408:	58010400 	stmdapl	r1, {sl}
    240c:	01000001 	tsteq	r0, r1
    2410:	0000112b 	andeq	r1, r0, fp, lsr #2
    2414:	00000862 	andeq	r0, r0, r2, ror #16
    2418:	00000338 	andeq	r0, r0, r8, lsr r3
    241c:	00000000 	andeq	r0, r0, r0
    2420:	00000ab9 			; <UNDEFINED> instruction: 0x00000ab9
    2424:	f6050402 			; <UNDEFINED> instruction: 0xf6050402
    2428:	02000001 	andeq	r0, r0, #1
    242c:	06980502 	ldreq	r0, [r8], r2, lsl #10
    2430:	01020000 	mrseq	r0, (UNDEF: 2)
    2434:	00064406 	andeq	r4, r6, r6, lsl #8
    2438:	33750300 	cmncc	r5, #0, 6
    243c:	24020032 	strcs	r0, [r2], #-50	; 0x32
    2440:	00000045 	andeq	r0, r0, r5, asr #32
    2444:	7b070402 	blvc	1c3454 <__Stack_Size+0x1c3054>
    2448:	03000003 	movweq	r0, #3
    244c:	00363175 	eorseq	r3, r6, r5, ror r1
    2450:	00572502 	subseq	r2, r7, r2, lsl #10
    2454:	02020000 	andeq	r0, r2, #0
    2458:	0003d707 	andeq	sp, r3, r7, lsl #14
    245c:	38750300 	ldmdacc	r5!, {r8, r9}^
    2460:	68260200 	stmdavs	r6!, {r9}
    2464:	02000000 	andeq	r0, r0, #0
    2468:	06420801 	strbeq	r0, [r2], -r1, lsl #16
    246c:	47040000 	strmi	r0, [r4, -r0]
    2470:	01000010 	tsteq	r0, r0, lsl r0
    2474:	008e1603 	addeq	r1, lr, r3, lsl #12
    2478:	3e050000 	cdpcc	0, 0, cr0, cr5, cr0, {0}
    247c:	00000011 	andeq	r0, r0, r1, lsl r0
    2480:	00101205 	andseq	r1, r0, r5, lsl #4
    2484:	e5050100 	str	r0, [r5, #-256]	; 0x100
    2488:	02000010 	andeq	r0, r0, #16
    248c:	10480600 	subne	r0, r8, r0, lsl #12
    2490:	1c030000 	stcne	0, cr0, [r3], {-0}
    2494:	0000006f 	andeq	r0, r0, pc, rrx
    2498:	00121a07 	andseq	r1, r2, r7, lsl #20
    249c:	4c9b0100 	ldfmis	f0, [fp], {0}
    24a0:	01000000 	mrseq	r0, (UNDEF: 0)
    24a4:	000000b5 	strheq	r0, [r0], -r5
    24a8:	00133908 	andseq	r3, r3, r8, lsl #18
    24ac:	5e9b0100 	fmlple	f0, f3, f0
    24b0:	00000000 	andeq	r0, r0, r0
    24b4:	00127a09 	andseq	r7, r2, r9, lsl #20
    24b8:	00220100 	eoreq	r0, r2, r0, lsl #2
    24bc:	0c000000 	stceq	0, cr0, [r0], {-0}
    24c0:	01000000 	mrseq	r0, (UNDEF: 0)
    24c4:	0000d89c 	muleq	r0, ip, r8
    24c8:	12100a00 	andsne	r0, r0, #0, 20
    24cc:	22010000 	andcs	r0, r1, #0
    24d0:	0000004c 	andeq	r0, r0, ip, asr #32
    24d4:	0b005001 	bleq	164e0 <__Stack_Size+0x160e0>
    24d8:	00001078 	andeq	r1, r0, r8, ror r0
    24dc:	004c2e01 	subeq	r2, ip, r1, lsl #28
    24e0:	00000000 	andeq	r0, r0, r0
    24e4:	000c0000 	andeq	r0, ip, r0
    24e8:	9c010000 	stcls	0, cr0, [r1], {-0}
    24ec:	00105a09 	andseq	r5, r0, r9, lsl #20
    24f0:	003a0100 	eorseq	r0, sl, r0, lsl #2
    24f4:	0c000000 	stceq	0, cr0, [r0], {-0}
    24f8:	01000000 	mrseq	r0, (UNDEF: 0)
    24fc:	0001109c 	muleq	r1, ip, r0
    2500:	12100a00 	andsne	r0, r0, #0, 20
    2504:	3a010000 	bcc	4250c <__Stack_Size+0x4210c>
    2508:	0000004c 	andeq	r0, r0, ip, asr #32
    250c:	0b005001 	bleq	16518 <__Stack_Size+0x16118>
    2510:	00001208 	andeq	r1, r0, r8, lsl #4
    2514:	004c4601 	subeq	r4, ip, r1, lsl #12
    2518:	00000000 	andeq	r0, r0, r0
    251c:	000c0000 	andeq	r0, ip, r0
    2520:	9c010000 	stcls	0, cr0, [r1], {-0}
    2524:	0012e50b 	andseq	lr, r2, fp, lsl #10
    2528:	4c520100 	ldfmie	f0, [r2], {-0}
    252c:	00000000 	andeq	r0, r0, r0
    2530:	0c000000 	stceq	0, cr0, [r0], {-0}
    2534:	01000000 	mrseq	r0, (UNDEF: 0)
    2538:	123e099c 	eorsne	r0, lr, #156, 18	; 0x270000
    253c:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    2540:	00000000 	andeq	r0, r0, r0
    2544:	0000000c 	andeq	r0, r0, ip
    2548:	015d9c01 	cmpeq	sp, r1, lsl #24
    254c:	100a0000 	andne	r0, sl, r0
    2550:	01000012 	tsteq	r0, r2, lsl r0
    2554:	00004c5e 	andeq	r4, r0, lr, asr ip
    2558:	00500100 	subseq	r0, r0, r0, lsl #2
    255c:	0010910b 	andseq	r9, r0, fp, lsl #2
    2560:	4c6a0100 	stfmie	f0, [sl], #-0
    2564:	00000000 	andeq	r0, r0, r0
    2568:	0c000000 	stceq	0, cr0, [r0], {-0}
    256c:	01000000 	mrseq	r0, (UNDEF: 0)
    2570:	1282099c 	addne	r0, r2, #156, 18	; 0x270000
    2574:	76010000 	strvc	r0, [r1], -r0
    2578:	00000000 	andeq	r0, r0, r0
    257c:	00000010 	andeq	r0, r0, r0, lsl r0
    2580:	01959c01 	orrseq	r9, r5, r1, lsl #24
    2584:	100a0000 	andne	r0, sl, r0
    2588:	01000012 	tsteq	r0, r2, lsl r0
    258c:	00004c76 	andeq	r4, r0, r6, ror ip
    2590:	00500100 	subseq	r0, r0, r0, lsl #2
    2594:	0011fe0b 	andseq	pc, r1, fp, lsl #28
    2598:	4c820100 	stfmis	f0, [r2], {0}
    259c:	00000000 	andeq	r0, r0, r0
    25a0:	0c000000 	stceq	0, cr0, [r0], {-0}
    25a4:	01000000 	mrseq	r0, (UNDEF: 0)
    25a8:	1340099c 	movtne	r0, #2460	; 0x99c
    25ac:	8f010000 	svchi	0x00010000
    25b0:	00000000 	andeq	r0, r0, r0
    25b4:	0000000e 	andeq	r0, r0, lr
    25b8:	01dc9c01 	bicseq	r9, ip, r1, lsl #24
    25bc:	390c0000 	stmdbcc	ip, {}	; <UNPREDICTABLE>
    25c0:	01000013 	tsteq	r0, r3, lsl r0
    25c4:	00005e8f 	andeq	r5, r0, pc, lsl #29
    25c8:	00088700 	andeq	r8, r8, r0, lsl #14
    25cc:	12100a00 	andsne	r0, r0, #0, 20
    25d0:	8f010000 	svchi	0x00010000
    25d4:	0000004c 	andeq	r0, r0, ip, asr #32
    25d8:	0d005101 	stfeqs	f5, [r0, #-4]
    25dc:	00000099 	muleq	r0, r9, r0
    25e0:	00000000 	andeq	r0, r0, r0
    25e4:	00000010 	andeq	r0, r0, r0, lsl r0
    25e8:	01f99c01 	mvnseq	r9, r1, lsl #24
    25ec:	a90e0000 	stmdbge	lr, {}	; <UNPREDICTABLE>
    25f0:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    25f4:	00000008 	andeq	r0, r0, r8
    25f8:	0010db09 	andseq	sp, r0, r9, lsl #22
    25fc:	00a80100 	adceq	r0, r8, r0, lsl #2
    2600:	1c000000 	stcne	0, cr0, [r0], {-0}
    2604:	01000000 	mrseq	r0, (UNDEF: 0)
    2608:	00022d9c 	muleq	r2, ip, sp
    260c:	13390c00 	teqne	r9, #0, 24
    2610:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    2614:	0000005e 	andeq	r0, r0, lr, asr r0
    2618:	000008c9 	andeq	r0, r0, r9, asr #17
    261c:	0011250c 	andseq	r2, r1, ip, lsl #10
    2620:	4ca80100 	stfmis	f0, [r8]
    2624:	ea000000 	b	262c <__Stack_Size+0x222c>
    2628:	00000008 	andeq	r0, r0, r8
    262c:	0011ae0f 	andseq	sl, r1, pc, lsl #28
    2630:	4cb40100 	ldfmis	f0, [r4]
    2634:	00000000 	andeq	r0, r0, r0
    2638:	12000000 	andne	r0, r0, #0
    263c:	01000000 	mrseq	r0, (UNDEF: 0)
    2640:	0002569c 	muleq	r2, ip, r6
    2644:	13390c00 	teqne	r9, #0, 24
    2648:	b4010000 	strlt	r0, [r1], #-0
    264c:	0000005e 	andeq	r0, r0, lr, asr r0
    2650:	0000090b 	andeq	r0, r0, fp, lsl #18
    2654:	132b0900 	teqne	fp, #0, 18
    2658:	c1010000 	mrsgt	r0, (UNDEF: 1)
    265c:	08000cec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, fp}
    2660:	0000002a 	andeq	r0, r0, sl, lsr #32
    2664:	029f9c01 	addseq	r9, pc, #256	; 0x100
    2668:	390c0000 	stmdbcc	ip, {}	; <UNPREDICTABLE>
    266c:	01000013 	tsteq	r0, r3, lsl r0
    2670:	00005ec1 	andeq	r5, r0, r1, asr #29
    2674:	00092c00 	andeq	r2, r9, r0, lsl #24
    2678:	0f070a00 	svceq	0x00070a00
    267c:	c1010000 	mrsgt	r0, (UNDEF: 1)
    2680:	0000004c 	andeq	r0, r0, ip, asr #32
    2684:	ec105101 	ldfs	f5, [r0], {1}
    2688:	2a08000c 	bcs	2026c0 <__Stack_Size+0x2022c0>
    268c:	11000000 	mrsne	r0, (UNDEF: 0)
    2690:	0000045b 	andeq	r0, r0, fp, asr r4
    2694:	004cc301 	subeq	ip, ip, r1, lsl #6
    2698:	53010000 	movwpl	r0, #4096	; 0x1000
    269c:	ae090000 	cdpge	0, 0, cr0, cr9, cr0, {0}
    26a0:	01000010 	tsteq	r0, r0, lsl r0
    26a4:	000000ce 	andeq	r0, r0, lr, asr #1
    26a8:	00002a00 	andeq	r2, r0, r0, lsl #20
    26ac:	e89c0100 	ldm	ip, {r8}
    26b0:	0c000002 	stceq	0, cr0, [r0], {2}
    26b4:	00001339 	andeq	r1, r0, r9, lsr r3
    26b8:	005ece01 	subseq	ip, lr, r1, lsl #28
    26bc:	094d0000 	stmdbeq	sp, {}^	; <UNPREDICTABLE>
    26c0:	070a0000 	streq	r0, [sl, -r0]
    26c4:	0100000f 	tsteq	r0, pc
    26c8:	00004cce 	andeq	r4, r0, lr, asr #25
    26cc:	10510100 	subsne	r0, r1, r0, lsl #2
    26d0:	00000000 	andeq	r0, r0, r0
    26d4:	0000002a 	andeq	r0, r0, sl, lsr #32
    26d8:	00045b11 	andeq	r5, r4, r1, lsl fp
    26dc:	4cd00100 	ldfmie	f0, [r0], {0}
    26e0:	01000000 	mrseq	r0, (UNDEF: 0)
    26e4:	09000053 	stmdbeq	r0, {r0, r1, r4, r6}
    26e8:	00000ffd 	strdeq	r0, [r0], -sp
    26ec:	0000db01 	andeq	sp, r0, r1, lsl #22
    26f0:	00240000 	eoreq	r0, r4, r0
    26f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    26f8:	0000033e 	andeq	r0, r0, lr, lsr r3
    26fc:	0013390c 	andseq	r3, r3, ip, lsl #18
    2700:	5edb0100 	cdppl	1, 13, cr0, cr11, cr0, {0}
    2704:	6e000000 	cdpvs	0, 0, cr0, cr0, cr0, {0}
    2708:	0a000009 	beq	2734 <__Stack_Size+0x2334>
    270c:	00001120 	andeq	r1, r0, r0, lsr #2
    2710:	005edb01 	subseq	sp, lr, r1, lsl #22
    2714:	51010000 	mrspl	r0, (UNDEF: 1)
    2718:	0012fd12 	andseq	pc, r2, r2, lsl sp	; <UNPREDICTABLE>
    271c:	4cdd0100 	ldfmie	f0, [sp], {0}
    2720:	13000000 	movwne	r0, #0
    2724:	00000099 	muleq	r0, r9, r0
    2728:	00000000 	andeq	r0, r0, r0
    272c:	00000288 	andeq	r0, r0, r8, lsl #5
    2730:	a90ede01 	stmdbge	lr, {r0, r9, sl, fp, ip, lr, pc}
    2734:	6e000000 	cdpvs	0, 0, cr0, cr0, cr0, {0}
    2738:	00000009 	andeq	r0, r0, r9
    273c:	11120f00 	tstne	r2, r0, lsl #30
    2740:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    2744:	0000004c 	andeq	r0, r0, ip, asr #32
    2748:	00000000 	andeq	r0, r0, r0
    274c:	00000012 	andeq	r0, r0, r2, lsl r0
    2750:	03679c01 	cmneq	r7, #256	; 0x100
    2754:	390c0000 	stmdbcc	ip, {}	; <UNPREDICTABLE>
    2758:	01000013 	tsteq	r0, r3, lsl r0
    275c:	00005ef0 	strdeq	r5, [r0], -r0
    2760:	00098f00 	andeq	r8, r9, r0, lsl #30
    2764:	1e0f0000 	cdpne	0, 0, cr0, cr15, cr0, {0}
    2768:	01000010 	tsteq	r0, r0, lsl r0
    276c:	00004cfc 	strdeq	r4, [r0], -ip
    2770:	00000000 	andeq	r0, r0, r0
    2774:	00001200 	andeq	r1, r0, r0, lsl #4
    2778:	909c0100 	addsls	r0, ip, r0, lsl #2
    277c:	0c000003 	stceq	0, cr0, [r0], {3}
    2780:	00001339 	andeq	r1, r0, r9, lsr r3
    2784:	005efc01 	subseq	pc, lr, r1, lsl #24
    2788:	09b00000 	ldmibeq	r0!, {}	; <UNPREDICTABLE>
    278c:	14000000 	strne	r0, [r0], #-0
    2790:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2794:	00010801 	andeq	r0, r1, r1, lsl #16
    2798:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    279c:	01000000 	mrseq	r0, (UNDEF: 0)
    27a0:	0003d19c 	muleq	r3, ip, r1
    27a4:	13391500 	teqne	r9, #0, 10
    27a8:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    27ac:	00005e01 	andeq	r5, r0, r1, lsl #28
    27b0:	0009d100 	andeq	sp, r9, r0, lsl #2
    27b4:	00001000 	andeq	r1, r0, r0
    27b8:	001e0000 	andseq	r0, lr, r0
    27bc:	5b160000 	blpl	5827c4 <__Stack_Size+0x5823c4>
    27c0:	01000004 	tsteq	r0, r4
    27c4:	004c010a 	subeq	r0, ip, sl, lsl #2
    27c8:	09f20000 	ldmibeq	r2!, {}^	; <UNPREDICTABLE>
    27cc:	00000000 	andeq	r0, r0, r0
    27d0:	00095514 	andeq	r5, r9, r4, lsl r5
    27d4:	01140100 	tsteq	r4, r0, lsl #2
    27d8:	08000d16 	stmdaeq	r0, {r1, r2, r4, r8, sl, fp}
    27dc:	0000001e 	andeq	r0, r0, lr, lsl r0
    27e0:	04129c01 	ldreq	r9, [r2], #-3073	; 0xc01
    27e4:	39150000 	ldmdbcc	r5, {}	; <UNPREDICTABLE>
    27e8:	01000013 	tsteq	r0, r3, lsl r0
    27ec:	005e0114 	subseq	r0, lr, r4, lsl r1
    27f0:	0a1d0000 	beq	7427f8 <__Stack_Size+0x7423f8>
    27f4:	16100000 	ldrne	r0, [r0], -r0
    27f8:	1e08000d 	cdpne	0, 0, cr0, cr8, cr13, {0}
    27fc:	16000000 	strne	r0, [r0], -r0
    2800:	0000045b 	andeq	r0, r0, fp, asr r4
    2804:	4c011601 	stcmi	6, cr1, [r1], {1}
    2808:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    280c:	0000000a 	andeq	r0, r0, sl
    2810:	11d91400 	bicsne	r1, r9, r0, lsl #8
    2814:	20010000 	andcs	r0, r1, r0
    2818:	00000001 	andeq	r0, r0, r1
    281c:	00001e00 	andeq	r1, r0, r0, lsl #28
    2820:	399c0100 	ldmibcc	ip, {r8}
    2824:	15000004 	strne	r0, [r0, #-4]
    2828:	00001339 	andeq	r1, r0, r9, lsr r3
    282c:	5e012001 	cdppl	0, 0, cr2, cr1, cr1, {0}
    2830:	6c000000 	stcvs	0, cr0, [r0], {-0}
    2834:	0000000a 	andeq	r0, r0, sl
    2838:	0011f114 	andseq	pc, r1, r4, lsl r1	; <UNPREDICTABLE>
    283c:	012c0100 	teqeq	ip, r0, lsl #2
    2840:	00000000 	andeq	r0, r0, r0
    2844:	0000001c 	andeq	r0, r0, ip, lsl r0
    2848:	04609c01 	strbteq	r9, [r0], #-3073	; 0xc01
    284c:	39150000 	ldmdbcc	r5, {}	; <UNPREDICTABLE>
    2850:	01000013 	tsteq	r0, r3, lsl r0
    2854:	005e012c 	subseq	r0, lr, ip, lsr #2
    2858:	0a8d0000 	beq	fe342860 <BootRAM+0xd2b3001>
    285c:	14000000 	strne	r0, [r0], #-0
    2860:	00000763 	andeq	r0, r0, r3, ror #14
    2864:	34013701 	strcc	r3, [r1], #-1793	; 0x701
    2868:	1c08000d 	stcne	0, cr0, [r8], {13}
    286c:	01000000 	mrseq	r0, (UNDEF: 0)
    2870:	0004879c 	muleq	r4, ip, r7
    2874:	13391500 	teqne	r9, #0, 10
    2878:	37010000 	strcc	r0, [r1, -r0]
    287c:	00005e01 	andeq	r5, r0, r1, lsl #28
    2880:	000aae00 	andeq	sl, sl, r0, lsl #28
    2884:	d6140000 	ldrle	r0, [r4], -r0
    2888:	01000012 	tsteq	r0, r2, lsl r0
    288c:	00000142 	andeq	r0, r0, r2, asr #2
    2890:	001e0000 	andseq	r0, lr, r0
    2894:	9c010000 	stcls	0, cr0, [r1], {-0}
    2898:	000004ae 	andeq	r0, r0, lr, lsr #9
    289c:	00133915 	andseq	r3, r3, r5, lsl r9
    28a0:	01420100 	mrseq	r0, (UNDEF: 82)
    28a4:	0000005e 	andeq	r0, r0, lr, asr r0
    28a8:	00000acf 	andeq	r0, r0, pc, asr #21
    28ac:	11681400 	cmnne	r8, r0, lsl #8
    28b0:	4d010000 	stcmi	0, cr0, [r1, #-0]
    28b4:	00000001 	andeq	r0, r0, r1
    28b8:	00001e00 	andeq	r1, r0, r0, lsl #28
    28bc:	d59c0100 	ldrle	r0, [ip, #256]	; 0x100
    28c0:	15000004 	strne	r0, [r0, #-4]
    28c4:	00001339 	andeq	r1, r0, r9, lsr r3
    28c8:	5e014d01 	cdppl	13, 0, cr4, cr1, cr1, {0}
    28cc:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    28d0:	0000000a 	andeq	r0, r0, sl
    28d4:	00118b14 	andseq	r8, r1, r4, lsl fp
    28d8:	01580100 	cmpeq	r8, r0, lsl #2
    28dc:	00000000 	andeq	r0, r0, r0
    28e0:	0000001c 	andeq	r0, r0, ip, lsl r0
    28e4:	04fc9c01 	ldrbteq	r9, [ip], #3073	; 0xc01
    28e8:	39150000 	ldmdbcc	r5, {}	; <UNPREDICTABLE>
    28ec:	01000013 	tsteq	r0, r3, lsl r0
    28f0:	005e0158 	subseq	r0, lr, r8, asr r1
    28f4:	0b110000 	bleq	4428fc <__Stack_Size+0x4424fc>
    28f8:	17000000 	strne	r0, [r0, -r0]
    28fc:	00000fce 	andeq	r0, r0, lr, asr #31
    2900:	4c016301 	stcmi	3, cr6, [r1], {1}
    2904:	00000000 	andeq	r0, r0, r0
    2908:	1a000000 	bne	2910 <__Stack_Size+0x2510>
    290c:	01000000 	mrseq	r0, (UNDEF: 0)
    2910:	0005279c 	muleq	r5, ip, r7
    2914:	13391500 	teqne	r9, #0, 10
    2918:	63010000 	movwvs	r0, #4096	; 0x1000
    291c:	00005e01 	andeq	r5, r0, r1, lsl #28
    2920:	000b3200 	andeq	r3, fp, r0, lsl #4
    2924:	80170000 	andshi	r0, r7, r0
    2928:	01000010 	tsteq	r0, r0, lsl r0
    292c:	004c016e 	subeq	r0, ip, lr, ror #2
    2930:	00000000 	andeq	r0, r0, r0
    2934:	001a0000 	andseq	r0, sl, r0
    2938:	9c010000 	stcls	0, cr0, [r1], {-0}
    293c:	00000552 	andeq	r0, r0, r2, asr r5
    2940:	00133915 	andseq	r3, r3, r5, lsl r9
    2944:	016e0100 	cmneq	lr, r0, lsl #2
    2948:	0000005e 	andeq	r0, r0, lr, asr r0
    294c:	00000b53 	andeq	r0, r0, r3, asr fp
    2950:	11b81400 			; <UNDEFINED> instruction: 0x11b81400
    2954:	79010000 	stmdbvc	r1, {}	; <UNPREDICTABLE>
    2958:	00000001 	andeq	r0, r0, r1
    295c:	00001800 	andeq	r1, r0, r0, lsl #16
    2960:	799c0100 	ldmibvc	ip, {r8}
    2964:	15000005 	strne	r0, [r0, #-5]
    2968:	00001339 	andeq	r1, r0, r9, lsr r3
    296c:	5e017901 	cdppl	9, 0, cr7, cr1, cr1, {0}
    2970:	74000000 	strvc	r0, [r0], #-0
    2974:	0000000b 	andeq	r0, r0, fp
    2978:	00129914 	andseq	r9, r2, r4, lsl r9
    297c:	01840100 	orreq	r0, r4, r0, lsl #2
    2980:	00000000 	andeq	r0, r0, r0
    2984:	0000001c 	andeq	r0, r0, ip, lsl r0
    2988:	05a09c01 	streq	r9, [r0, #3073]!	; 0xc01
    298c:	39150000 	ldmdbcc	r5, {}	; <UNPREDICTABLE>
    2990:	01000013 	tsteq	r0, r3, lsl r0
    2994:	005e0184 	subseq	r0, lr, r4, lsl #3
    2998:	0b950000 	bleq	fe5429a0 <BootRAM+0xd4b3141>
    299c:	14000000 	strne	r0, [r0], #-0
    29a0:	000010bc 	strheq	r1, [r0], -ip
    29a4:	00018f01 	andeq	r8, r1, r1, lsl #30
    29a8:	20000000 	andcs	r0, r0, r0
    29ac:	01000000 	mrseq	r0, (UNDEF: 0)
    29b0:	0005c79c 	muleq	r5, ip, r7
    29b4:	13391500 	teqne	r9, #0, 10
    29b8:	8f010000 	svchi	0x00010000
    29bc:	00005e01 	andeq	r5, r0, r1, lsl #28
    29c0:	000bb600 	andeq	fp, fp, r0, lsl #12
    29c4:	2c140000 	ldccs	0, cr0, [r4], {-0}
    29c8:	01000010 	tsteq	r0, r0, lsl r0
    29cc:	0000019a 	muleq	r0, sl, r1
    29d0:	00200000 	eoreq	r0, r0, r0
    29d4:	9c010000 	stcls	0, cr0, [r1], {-0}
    29d8:	000005ee 	andeq	r0, r0, lr, ror #11
    29dc:	00133915 	andseq	r3, r3, r5, lsl r9
    29e0:	019a0100 	orrseq	r0, sl, r0, lsl #2
    29e4:	0000005e 	andeq	r0, r0, lr, asr r0
    29e8:	00000bd7 	ldrdeq	r0, [r0], -r7
    29ec:	106b1400 	rsbne	r1, fp, r0, lsl #8
    29f0:	a5010000 	strge	r0, [r1, #-0]
    29f4:	000d5001 	andeq	r5, sp, r1
    29f8:	00002008 	andeq	r2, r0, r8
    29fc:	159c0100 	ldrne	r0, [ip, #256]	; 0x100
    2a00:	15000006 	strne	r0, [r0, #-6]
    2a04:	00001339 	andeq	r1, r0, r9, lsr r3
    2a08:	5e01a501 	cfsh32pl	mvfx10, mvfx1, #1
    2a0c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    2a10:	0000000b 	andeq	r0, r0, fp
    2a14:	00131e14 	andseq	r1, r3, r4, lsl lr
    2a18:	01b00100 	lslseq	r0, r0, #2
    2a1c:	08000d70 	stmdaeq	r0, {r4, r5, r6, r8, sl, fp}
    2a20:	00000020 	andeq	r0, r0, r0, lsr #32
    2a24:	063c9c01 	ldrteq	r9, [ip], -r1, lsl #24
    2a28:	39150000 	ldmdbcc	r5, {}	; <UNPREDICTABLE>
    2a2c:	01000013 	tsteq	r0, r3, lsl r0
    2a30:	005e01b0 	ldrheq	r0, [lr], #-16
    2a34:	0c190000 	ldceq	0, cr0, [r9], {-0}
    2a38:	14000000 	strne	r0, [r0], #-0
    2a3c:	000010a1 	andeq	r1, r0, r1, lsr #1
    2a40:	0001bc01 	andeq	fp, r1, r1, lsl #24
    2a44:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    2a48:	01000000 	mrseq	r0, (UNDEF: 0)
    2a4c:	0006739c 	muleq	r6, ip, r3
    2a50:	13391500 	teqne	r9, #0, 10
    2a54:	bc010000 	stclt	0, cr0, [r1], {-0}
    2a58:	00005e01 	andeq	r5, r0, r1, lsl #28
    2a5c:	000c3a00 	andeq	r3, ip, r0, lsl #20
    2a60:	10541500 	subsne	r1, r4, r0, lsl #10
    2a64:	bc010000 	stclt	0, cr0, [r1], {-0}
    2a68:	00005e01 	andeq	r5, r0, r1, lsl #28
    2a6c:	000c5b00 	andeq	r5, ip, r0, lsl #22
    2a70:	3a170000 	bcc	5c2a78 <__Stack_Size+0x5c2678>
    2a74:	01000010 	tsteq	r0, r0, lsl r0
    2a78:	005e01c7 	subseq	r0, lr, r7, asr #3
    2a7c:	00000000 	andeq	r0, r0, r0
    2a80:	00120000 	andseq	r0, r2, r0
    2a84:	9c010000 	stcls	0, cr0, [r1], {-0}
    2a88:	0000069e 	muleq	r0, lr, r6
    2a8c:	00133915 	andseq	r3, r3, r5, lsl r9
    2a90:	01c70100 	biceq	r0, r7, r0, lsl #2
    2a94:	0000005e 	andeq	r0, r0, lr, asr r0
    2a98:	00000c7c 	andeq	r0, r0, ip, ror ip
    2a9c:	117f1400 	cmnne	pc, r0, lsl #8
    2aa0:	d3010000 	movwle	r0, #4096	; 0x1000
    2aa4:	00000001 	andeq	r0, r0, r1
    2aa8:	00002000 	andeq	r2, r0, r0
    2aac:	d59c0100 	ldrle	r0, [ip, #256]	; 0x100
    2ab0:	15000006 	strne	r0, [r0, #-6]
    2ab4:	00001339 	andeq	r1, r0, r9, lsr r3
    2ab8:	5e01d301 	cdppl	3, 0, cr13, cr1, cr1, {0}
    2abc:	9d000000 	stcls	0, cr0, [r0, #-0]
    2ac0:	1500000c 	strne	r0, [r0, #-12]
    2ac4:	00001226 	andeq	r1, r0, r6, lsr #4
    2ac8:	4c01d301 	stcmi	3, cr13, [r1], {1}
    2acc:	be000000 	cdplt	0, 0, cr0, cr0, cr0, {0}
    2ad0:	0000000c 	andeq	r0, r0, ip
    2ad4:	00134c14 	andseq	r4, r3, r4, lsl ip
    2ad8:	01df0100 	bicseq	r0, pc, r0, lsl #2
    2adc:	00000000 	andeq	r0, r0, r0
    2ae0:	00000020 	andeq	r0, r0, r0, lsr #32
    2ae4:	070c9c01 	streq	r9, [ip, -r1, lsl #24]
    2ae8:	39150000 	ldmdbcc	r5, {}	; <UNPREDICTABLE>
    2aec:	01000013 	tsteq	r0, r3, lsl r0
    2af0:	005e01df 	ldrsbeq	r0, [lr], #-31	; 0xffffffe1
    2af4:	0cdf0000 	ldcleq	0, cr0, [pc], {0}
    2af8:	26150000 	ldrcs	r0, [r5], -r0
    2afc:	01000012 	tsteq	r0, r2, lsl r0
    2b00:	004c01df 	ldrdeq	r0, [ip], #-31	; 0xffffffe1
    2b04:	0d000000 	stceq	0, cr0, [r0, #-0]
    2b08:	17000000 	strne	r0, [r0, -r0]
    2b0c:	00001312 	andeq	r1, r0, r2, lsl r3
    2b10:	4c01ea01 	stcmi	10, cr14, [r1], {1}
    2b14:	90000000 	andls	r0, r0, r0
    2b18:	1c08000d 	stcne	0, cr0, [r8], {13}
    2b1c:	01000000 	mrseq	r0, (UNDEF: 0)
    2b20:	0007379c 	muleq	r7, ip, r7
    2b24:	13391500 	teqne	r9, #0, 10
    2b28:	ea010000 	b	42b30 <__Stack_Size+0x42730>
    2b2c:	00005e01 	andeq	r5, r0, r1, lsl #28
    2b30:	000d2100 	andeq	r2, sp, r0, lsl #2
    2b34:	f5170000 			; <UNDEFINED> instruction: 0xf5170000
    2b38:	01000010 	tsteq	r0, r0, lsl r0
    2b3c:	004c01f5 	strdeq	r0, [ip], #-21	; 0xffffffeb
    2b40:	0dac0000 	stceq	0, cr0, [ip]
    2b44:	001c0800 	andseq	r0, ip, r0, lsl #16
    2b48:	9c010000 	stcls	0, cr0, [r1], {-0}
    2b4c:	00000762 	andeq	r0, r0, r2, ror #14
    2b50:	00133915 	andseq	r3, r3, r5, lsl r9
    2b54:	01f50100 	mvnseq	r0, r0, lsl #2
    2b58:	0000005e 	andeq	r0, r0, lr, asr r0
    2b5c:	00000d42 	andeq	r0, r0, r2, asr #26
    2b60:	11e41400 	mvnne	r1, r0, lsl #8
    2b64:	01010000 	mrseq	r0, (UNDEF: 1)
    2b68:	000dc802 	andeq	ip, sp, r2, lsl #16
    2b6c:	00001c08 	andeq	r1, r0, r8, lsl #24
    2b70:	979c0100 	ldrls	r0, [ip, r0, lsl #2]
    2b74:	15000007 	strne	r0, [r0, #-7]
    2b78:	00001339 	andeq	r1, r0, r9, lsr r3
    2b7c:	5e020101 	adfpls	f0, f2, f1
    2b80:	63000000 	movwvs	r0, #0
    2b84:	1800000d 	stmdane	r0, {r0, r2, r3}
    2b88:	0000109a 	muleq	r0, sl, r0
    2b8c:	4c020101 	stfmis	f0, [r2], {1}
    2b90:	01000000 	mrseq	r0, (UNDEF: 0)
    2b94:	57140051 			; <UNDEFINED> instruction: 0x57140051
    2b98:	01000012 	tsteq	r0, r2, lsl r0
    2b9c:	0000020d 	andeq	r0, r0, sp, lsl #4
    2ba0:	00260000 	eoreq	r0, r6, r0
    2ba4:	9c010000 	stcls	0, cr0, [r1], {-0}
    2ba8:	000007e6 	andeq	r0, r0, r6, ror #15
    2bac:	00124718 	andseq	r4, r2, r8, lsl r7
    2bb0:	020d0100 	andeq	r0, sp, #0, 2
    2bb4:	000007e6 	andeq	r0, r0, r6, ror #15
    2bb8:	9a155001 	bls	556bc4 <__Stack_Size+0x5567c4>
    2bbc:	01000010 	tsteq	r0, r0, lsl r0
    2bc0:	004c020d 	subeq	r0, ip, sp, lsl #4
    2bc4:	0d840000 	stceq	0, cr0, [r4]
    2bc8:	00100000 	andseq	r0, r0, r0
    2bcc:	26000000 	strcs	r0, [r0], -r0
    2bd0:	16000000 	strne	r0, [r0], -r0
    2bd4:	00001062 	andeq	r1, r0, r2, rrx
    2bd8:	4c020f01 	stcmi	15, cr0, [r2], {1}
    2bdc:	be000000 	cdplt	0, 0, cr0, cr0, cr0, {0}
    2be0:	0000000d 	andeq	r0, r0, sp
    2be4:	3a041900 	bcc	108fec <__Stack_Size+0x108bec>
    2be8:	14000000 	strne	r0, [r0], #-0
    2bec:	0000078d 	andeq	r0, r0, sp, lsl #15
    2bf0:	e4021901 	str	r1, [r2], #-2305	; 0x901
    2bf4:	4008000d 	andmi	r0, r8, sp
    2bf8:	01000000 	mrseq	r0, (UNDEF: 0)
    2bfc:	0008519c 	muleq	r8, ip, r1
    2c00:	13391500 	teqne	r9, #0, 10
    2c04:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    2c08:	00005e02 	andeq	r5, r0, r2, lsl #28
    2c0c:	000de700 	andeq	lr, sp, r0, lsl #14
    2c10:	109a1500 	addsne	r1, sl, r0, lsl #10
    2c14:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    2c18:	00004c02 	andeq	r4, r0, r2, lsl #24
    2c1c:	000e0800 	andeq	r0, lr, r0, lsl #16
    2c20:	0de41000 	stcleq	0, cr1, [r4]
    2c24:	00400800 	subeq	r0, r0, r0, lsl #16
    2c28:	471a0000 	ldrmi	r0, [sl, -r0]
    2c2c:	01000012 	tsteq	r0, r2, lsl r0
    2c30:	07e6021b 			; <UNDEFINED> instruction: 0x07e6021b
    2c34:	52010000 	andpl	r0, r1, #0
    2c38:	0002a01b 	andeq	sl, r2, fp, lsl r0
    2c3c:	10621600 	rsbne	r1, r2, r0, lsl #12
    2c40:	1b010000 	blne	42c48 <__Stack_Size+0x42848>
    2c44:	00004c02 	andeq	r4, r0, r2, lsl #24
    2c48:	000e2900 	andeq	r2, lr, r0, lsl #18
    2c4c:	00000000 	andeq	r0, r0, r0
    2c50:	00128c17 	andseq	r8, r2, r7, lsl ip
    2c54:	02240100 	eoreq	r0, r4, #0, 2
    2c58:	0000004c 	andeq	r0, r0, ip, asr #32
    2c5c:	00000000 	andeq	r0, r0, r0
    2c60:	00000020 	andeq	r0, r0, r0, lsr #32
    2c64:	087c9c01 	ldmdaeq	ip!, {r0, sl, fp, ip, pc}^
    2c68:	39150000 	ldmdbcc	r5, {}	; <UNPREDICTABLE>
    2c6c:	01000013 	tsteq	r0, r3, lsl r0
    2c70:	005e0224 	subseq	r0, lr, r4, lsr #4
    2c74:	0e610000 	cdpeq	0, 6, cr0, cr1, cr0, {0}
    2c78:	17000000 	strne	r0, [r0, -r0]
    2c7c:	00001267 	andeq	r1, r0, r7, ror #4
    2c80:	4c022f01 	stcmi	15, cr2, [r2], {1}
    2c84:	00000000 	andeq	r0, r0, r0
    2c88:	20000000 	andcs	r0, r0, r0
    2c8c:	01000000 	mrseq	r0, (UNDEF: 0)
    2c90:	0008a79c 	muleq	r8, ip, r7
    2c94:	13391500 	teqne	r9, #0, 10
    2c98:	2f010000 	svccs	0x00010000
    2c9c:	00005e02 	andeq	r5, r0, r2, lsl #28
    2ca0:	000e8200 	andeq	r8, lr, r0, lsl #4
    2ca4:	ca140000 	bgt	502cac <__Stack_Size+0x5028ac>
    2ca8:	01000010 	tsteq	r0, r0, lsl r0
    2cac:	0000023c 	andeq	r0, r0, ip, lsr r2
    2cb0:	00380000 	eorseq	r0, r8, r0
    2cb4:	9c010000 	stcls	0, cr0, [r1], {-0}
    2cb8:	000008ee 	andeq	r0, r0, lr, ror #17
    2cbc:	00133915 	andseq	r3, r3, r5, lsl r9
    2cc0:	023c0100 	eorseq	r0, ip, #0, 2
    2cc4:	0000005e 	andeq	r0, r0, lr, asr r0
    2cc8:	00000ea3 	andeq	r0, r0, r3, lsr #29
    2ccc:	0012cc15 	andseq	ip, r2, r5, lsl ip
    2cd0:	023c0100 	eorseq	r0, ip, #0, 2
    2cd4:	0000004c 	andeq	r0, r0, ip, asr #32
    2cd8:	00000ec4 	andeq	r0, r0, r4, asr #29
    2cdc:	00115915 	andseq	r5, r1, r5, lsl r9
    2ce0:	023c0100 	eorseq	r0, ip, #0, 2
    2ce4:	0000004c 	andeq	r0, r0, ip, asr #32
    2ce8:	00000ee5 	andeq	r0, r0, r5, ror #29
    2cec:	11011400 	tstne	r1, r0, lsl #8
    2cf0:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
    2cf4:	00000002 	andeq	r0, r0, r2
    2cf8:	00002000 	andeq	r2, r0, r0
    2cfc:	259c0100 	ldrcs	r0, [ip, #256]	; 0x100
    2d00:	15000009 	strne	r0, [r0, #-9]
    2d04:	00001339 	andeq	r1, r0, r9, lsr r3
    2d08:	5e024801 	cdppl	8, 0, cr4, cr2, cr1, {0}
    2d0c:	06000000 	streq	r0, [r0], -r0
    2d10:	1500000f 	strne	r0, [r0, #-15]
    2d14:	000012cc 	andeq	r1, r0, ip, asr #5
    2d18:	4c024801 	stcmi	8, cr4, [r2], {1}
    2d1c:	27000000 	strcs	r0, [r0, -r0]
    2d20:	0000000f 	andeq	r0, r0, pc
    2d24:	000fdf14 	andeq	sp, pc, r4, lsl pc	; <UNPREDICTABLE>
    2d28:	02540100 	subseq	r0, r4, #0, 2
    2d2c:	00000000 	andeq	r0, r0, r0
    2d30:	00000020 	andeq	r0, r0, r0, lsr #32
    2d34:	095c9c01 	ldmdbeq	ip, {r0, sl, fp, ip, pc}^
    2d38:	39150000 	ldmdbcc	r5, {}	; <UNPREDICTABLE>
    2d3c:	01000013 	tsteq	r0, r3, lsl r0
    2d40:	005e0254 	subseq	r0, lr, r4, asr r2
    2d44:	0f480000 	svceq	0x00480000
    2d48:	59150000 	ldmdbpl	r5, {}	; <UNPREDICTABLE>
    2d4c:	01000011 	tsteq	r0, r1, lsl r0
    2d50:	004c0254 	subeq	r0, ip, r4, asr r2
    2d54:	0f690000 	svceq	0x00690000
    2d58:	17000000 	strne	r0, [r0, -r0]
    2d5c:	000012ec 	andeq	r1, r0, ip, ror #5
    2d60:	4c025f01 	stcmi	15, cr5, [r2], {1}
    2d64:	00000000 	andeq	r0, r0, r0
    2d68:	1c000000 	stcne	0, cr0, [r0], {-0}
    2d6c:	01000000 	mrseq	r0, (UNDEF: 0)
    2d70:	0009879c 	muleq	r9, ip, r7
    2d74:	13391500 	teqne	r9, #0, 10
    2d78:	5f010000 	svcpl	0x00010000
    2d7c:	00005e02 	andeq	r5, r0, r2, lsl #28
    2d80:	000f8a00 	andeq	r8, pc, r0, lsl #20
    2d84:	9d170000 	ldcls	0, cr0, [r7, #-0]
    2d88:	01000011 	tsteq	r0, r1, lsl r0
    2d8c:	004c026a 	subeq	r0, ip, sl, ror #4
    2d90:	00000000 	andeq	r0, r0, r0
    2d94:	001c0000 	andseq	r0, ip, r0
    2d98:	9c010000 	stcls	0, cr0, [r1], {-0}
    2d9c:	000009b2 			; <UNDEFINED> instruction: 0x000009b2
    2da0:	00133915 	andseq	r3, r3, r5, lsl r9
    2da4:	026a0100 	rsbeq	r0, sl, #0, 2
    2da8:	0000005e 	andeq	r0, r0, lr, asr r0
    2dac:	00000fab 	andeq	r0, r0, fp, lsr #31
    2db0:	11c71400 	bicne	r1, r7, r0, lsl #8
    2db4:	76010000 	strvc	r0, [r1], -r0
    2db8:	00000002 	andeq	r0, r0, r2
    2dbc:	0000a800 	andeq	sl, r0, r0, lsl #16
    2dc0:	599c0100 	ldmibpl	ip, {r8}
    2dc4:	1500000a 	strne	r0, [r0, #-10]
    2dc8:	00001339 	andeq	r1, r0, r9, lsr r3
    2dcc:	5e027601 	cfmadd32pl	mvax0, mvfx7, mvfx2, mvfx1
    2dd0:	cc000000 	stcgt	0, cr0, [r0], {-0}
    2dd4:	1500000f 	strne	r0, [r0, #-15]
    2dd8:	00001120 	andeq	r1, r0, r0, lsr #2
    2ddc:	5e027601 	cfmadd32pl	mvax0, mvfx7, mvfx2, mvfx1
    2de0:	11000000 	mrsne	r0, (UNDEF: 0)
    2de4:	15000010 	strne	r0, [r0, #-16]
    2de8:	0000109a 	muleq	r0, sl, r0
    2dec:	4c027601 	stcmi	6, cr7, [r2], {1}
    2df0:	56000000 	strpl	r0, [r0], -r0
    2df4:	1c000010 	stcne	0, cr0, [r0], {16}
    2df8:	00000000 	andeq	r0, r0, r0
    2dfc:	0000003a 	andeq	r0, r0, sl, lsr r0
    2e00:	00000a2c 	andeq	r0, r0, ip, lsr #20
    2e04:	00124716 	andseq	r4, r2, r6, lsl r7
    2e08:	02780100 	rsbseq	r0, r8, #0, 2
    2e0c:	000007e6 	andeq	r0, r0, r6, ror #15
    2e10:	00001082 	andeq	r1, r0, r2, lsl #1
    2e14:	0002b81b 	andeq	fp, r2, fp, lsl r8
    2e18:	10621600 	rsbne	r1, r2, r0, lsl #12
    2e1c:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    2e20:	00004c02 	andeq	r4, r0, r2, lsl #24
    2e24:	0010a000 	andseq	sl, r0, r0
    2e28:	1b000000 	blne	2e30 <__Stack_Size+0x2a30>
    2e2c:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2e30:	00124716 	andseq	r4, r2, r6, lsl r7
    2e34:	02780100 	rsbseq	r0, r8, #0, 2
    2e38:	000007e6 	andeq	r0, r0, r6, ror #15
    2e3c:	000010d8 	ldrdeq	r1, [r0], -r8
    2e40:	0002e81b 	andeq	lr, r2, fp, lsl r8
    2e44:	10621600 	rsbne	r1, r2, r0, lsl #12
    2e48:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    2e4c:	00004c02 	andeq	r4, r0, r2, lsl #24
    2e50:	0010f600 	andseq	pc, r0, r0, lsl #12
    2e54:	00000000 	andeq	r0, r0, r0
    2e58:	0012ba14 	andseq	fp, r2, r4, lsl sl
    2e5c:	02820100 	addeq	r0, r2, #0, 2
    2e60:	00000000 	andeq	r0, r0, r0
    2e64:	0000005c 	andeq	r0, r0, ip, asr r0
    2e68:	0ad09c01 	beq	ff429e74 <BootRAM+0xe39a615>
    2e6c:	39150000 	ldmdbcc	r5, {}	; <UNPREDICTABLE>
    2e70:	01000013 	tsteq	r0, r3, lsl r0
    2e74:	005e0282 	subseq	r0, lr, r2, lsl #5
    2e78:	112e0000 	teqne	lr, r0
    2e7c:	20150000 	andscs	r0, r5, r0
    2e80:	01000011 	tsteq	r0, r1, lsl r0
    2e84:	005e0282 	subseq	r0, lr, r2, lsl #5
    2e88:	11680000 	cmnne	r8, r0
    2e8c:	9a150000 	bls	542e94 <__Stack_Size+0x542a94>
    2e90:	01000010 	tsteq	r0, r0, lsl r0
    2e94:	004c0282 	subeq	r0, ip, r2, lsl #5
    2e98:	11940000 	orrsne	r0, r4, r0
    2e9c:	00100000 	andseq	r0, r0, r0
    2ea0:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    2ea4:	16000000 	strne	r0, [r0], -r0
    2ea8:	00001247 	andeq	r1, r0, r7, asr #4
    2eac:	e6028401 	str	r8, [r2], -r1, lsl #8
    2eb0:	c0000007 	andgt	r0, r0, r7
    2eb4:	1b000011 	blne	2f00 <__Stack_Size+0x2b00>
    2eb8:	00000308 	andeq	r0, r0, r8, lsl #6
    2ebc:	00106216 	andseq	r6, r0, r6, lsl r2
    2ec0:	02840100 	addeq	r0, r4, #0, 2
    2ec4:	0000004c 	andeq	r0, r0, ip, asr #32
    2ec8:	000011d3 	ldrdeq	r1, [r0], -r3
    2ecc:	14000000 	strne	r0, [r0], #-0
    2ed0:	00001358 	andeq	r1, r0, r8, asr r3
    2ed4:	00028e01 	andeq	r8, r2, r1, lsl #28
    2ed8:	5c000000 	stcpl	0, cr0, [r0], {-0}
    2edc:	01000000 	mrseq	r0, (UNDEF: 0)
    2ee0:	000b479c 	muleq	fp, ip, r7
    2ee4:	13391500 	teqne	r9, #0, 10
    2ee8:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    2eec:	00005e02 	andeq	r5, r0, r2, lsl #28
    2ef0:	00120b00 	andseq	r0, r2, r0, lsl #22
    2ef4:	11201500 	teqne	r0, r0, lsl #10
    2ef8:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    2efc:	00005e02 	andeq	r5, r0, r2, lsl #28
    2f00:	00124500 	andseq	r4, r2, r0, lsl #10
    2f04:	109a1500 	addsne	r1, sl, r0, lsl #10
    2f08:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    2f0c:	00004c02 	andeq	r4, r0, r2, lsl #24
    2f10:	00127100 	andseq	r7, r2, r0, lsl #2
    2f14:	00001000 	andeq	r1, r0, r0
    2f18:	00380000 	eorseq	r0, r8, r0
    2f1c:	47160000 	ldrmi	r0, [r6, -r0]
    2f20:	01000012 	tsteq	r0, r2, lsl r0
    2f24:	07e60290 			; <UNDEFINED> instruction: 0x07e60290
    2f28:	129d0000 	addsne	r0, sp, #0
    2f2c:	201b0000 	andscs	r0, fp, r0
    2f30:	16000003 	strne	r0, [r0], -r3
    2f34:	00001062 	andeq	r1, r0, r2, rrx
    2f38:	4c029001 	stcmi	0, cr9, [r2], {1}
    2f3c:	b0000000 	andlt	r0, r0, r0
    2f40:	00000012 	andeq	r0, r0, r2, lsl r0
    2f44:	2c170000 	ldccs	0, cr0, [r7], {-0}
    2f48:	01000012 	tsteq	r0, r2, lsl r0
    2f4c:	004c029a 	umaaleq	r0, ip, sl, r2
    2f50:	00000000 	andeq	r0, r0, r0
    2f54:	00200000 	eoreq	r0, r0, r0
    2f58:	9c010000 	stcls	0, cr0, [r1], {-0}
    2f5c:	00000b72 	andeq	r0, r0, r2, ror fp
    2f60:	00133915 	andseq	r3, r3, r5, lsl r9
    2f64:	029a0100 	addseq	r0, sl, #0, 2
    2f68:	0000005e 	andeq	r0, r0, lr, asr r0
    2f6c:	000012e8 	andeq	r1, r0, r8, ror #5
    2f70:	12a81700 	adcne	r1, r8, #0, 14
    2f74:	a6010000 	strge	r0, [r1], -r0
    2f78:	00004c02 	andeq	r4, r0, r2, lsl #24
    2f7c:	00000000 	andeq	r0, r0, r0
    2f80:	00002000 	andeq	r2, r0, r0
    2f84:	9d9c0100 	ldflss	f0, [ip]
    2f88:	1500000b 	strne	r0, [r0, #-11]
    2f8c:	00001339 	andeq	r1, r0, r9, lsr r3
    2f90:	5e02a601 	cfmadd32pl	mvax0, mvfx10, mvfx2, mvfx1
    2f94:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    2f98:	00000013 	andeq	r0, r0, r3, lsl r0
    2f9c:	00114a17 	andseq	r4, r1, r7, lsl sl
    2fa0:	02b20100 	adcseq	r0, r2, #0, 2
    2fa4:	0000008e 	andeq	r0, r0, lr, lsl #1
    2fa8:	00000000 	andeq	r0, r0, r0
    2fac:	00000044 	andeq	r0, r0, r4, asr #32
    2fb0:	0bc89c01 	bleq	ff229fbc <BootRAM+0xe19a75d>
    2fb4:	39150000 	ldmdbcc	r5, {}	; <UNPREDICTABLE>
    2fb8:	01000013 	tsteq	r0, r3, lsl r0
    2fbc:	005e02b2 	ldrheq	r0, [lr], #-34	; 0xffffffde
    2fc0:	132a0000 	teqne	sl, #0
    2fc4:	14000000 	strne	r0, [r0], #-0
    2fc8:	00000fbf 			; <UNDEFINED> instruction: 0x00000fbf
    2fcc:	0002c301 	andeq	ip, r2, r1, lsl #6
    2fd0:	3a000000 	bcc	2fd8 <__Stack_Size+0x2bd8>
    2fd4:	01000000 	mrseq	r0, (UNDEF: 0)
    2fd8:	000bfd9c 	muleq	fp, ip, sp
    2fdc:	13391500 	teqne	r9, #0, 10
    2fe0:	c3010000 	movwgt	r0, #4096	; 0x1000
    2fe4:	00005e02 	andeq	r5, r0, r2, lsl #28
    2fe8:	00134b00 	andseq	r4, r3, r0, lsl #22
    2fec:	11201800 	teqne	r0, r0, lsl #16
    2ff0:	c3010000 	movwgt	r0, #4096	; 0x1000
    2ff4:	00005e02 	andeq	r5, r0, r2, lsl #28
    2ff8:	00510100 	subseq	r0, r1, r0, lsl #2
    2ffc:	00117817 	andseq	r7, r1, r7, lsl r8
    3000:	02d60100 	sbcseq	r0, r6, #0, 2
    3004:	0000004c 	andeq	r0, r0, ip, asr #32
    3008:	00000000 	andeq	r0, r0, r0
    300c:	00000006 	andeq	r0, r0, r6
    3010:	0c449c01 	mcrreq	12, 0, r9, r4, cr1
    3014:	621d0000 	andsvs	r0, sp, #0
    3018:	d6010068 	strle	r0, [r1], -r8, rrx
    301c:	00005e02 	andeq	r5, r0, r2, lsl #28
    3020:	00138500 	andseq	r8, r3, r0, lsl #10
    3024:	6c621e00 	stclvs	14, cr1, [r2], #-0
    3028:	02d60100 	sbcseq	r0, r6, #0, 2
    302c:	0000005e 	andeq	r0, r0, lr, asr r0
    3030:	f0165101 			; <UNDEFINED> instruction: 0xf0165101
    3034:	01000010 	tsteq	r0, r0, lsl r0
    3038:	004c02d8 	ldrdeq	r0, [ip], #-40	; 0xffffffd8
    303c:	13a60000 			; <UNDEFINED> instruction: 0x13a60000
    3040:	1f000000 	svcne	0x00000000
    3044:	0000124e 	andeq	r1, r0, lr, asr #4
    3048:	4c02e301 	stcmi	3, cr14, [r2], {1}
    304c:	00000000 	andeq	r0, r0, r0
    3050:	0a000000 	beq	3058 <__Stack_Size+0x2c58>
    3054:	01000000 	mrseq	r0, (UNDEF: 0)
    3058:	1163159c 			; <UNDEFINED> instruction: 0x1163159c
    305c:	e3010000 	movw	r0, #4096	; 0x1000
    3060:	00004c02 	andeq	r4, r0, r2, lsl #24
    3064:	0013df00 	andseq	sp, r3, r0, lsl #30
    3068:	12741600 	rsbsne	r1, r4, #0, 12
    306c:	e5010000 	str	r0, [r1, #-0]
    3070:	00005e02 	andeq	r5, r0, r2, lsl #28
    3074:	00140000 	andseq	r0, r4, r0
    3078:	10f01600 	rscsne	r1, r0, r0, lsl #12
    307c:	e6010000 	str	r0, [r1], -r0
    3080:	00004c02 	andeq	r4, r0, r2, lsl #24
    3084:	00141300 	andseq	r1, r4, r0, lsl #6
    3088:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    308c:	04000001 	streq	r0, [r0], #-1
    3090:	000e7d00 	andeq	r7, lr, r0, lsl #26
    3094:	58010400 	stmdapl	r1, {sl}
    3098:	01000001 	tsteq	r0, r1
    309c:	0000139d 	muleq	r0, sp, r3
    30a0:	00000862 	andeq	r0, r0, r2, ror #16
    30a4:	00000518 	andeq	r0, r0, r8, lsl r5
    30a8:	00000000 	andeq	r0, r0, r0
    30ac:	00000f84 	andeq	r0, r0, r4, lsl #31
    30b0:	f6050402 			; <UNDEFINED> instruction: 0xf6050402
    30b4:	02000001 	andeq	r0, r0, #1
    30b8:	06980502 	ldreq	r0, [r8], r2, lsl #10
    30bc:	01020000 	mrseq	r0, (UNDEF: 2)
    30c0:	00064406 	andeq	r4, r6, r6, lsl #8
    30c4:	33750300 	cmncc	r5, #0, 6
    30c8:	24020032 	strcs	r0, [r2], #-50	; 0x32
    30cc:	00000045 	andeq	r0, r0, r5, asr #32
    30d0:	7b070402 	blvc	1c40e0 <__Stack_Size+0x1c3ce0>
    30d4:	03000003 	movweq	r0, #3
    30d8:	00363175 	eorseq	r3, r6, r5, ror r1
    30dc:	00572502 	subseq	r2, r7, r2, lsl #10
    30e0:	02020000 	andeq	r0, r2, #0
    30e4:	0003d707 	andeq	sp, r3, r7, lsl #14
    30e8:	38750300 	ldmdacc	r5!, {r8, r9}^
    30ec:	68260200 	stmdavs	r6!, {r9}
    30f0:	02000000 	andeq	r0, r0, #0
    30f4:	06420801 	strbeq	r0, [r2], -r1, lsl #16
    30f8:	05040000 	streq	r0, [r4, #-0]
    30fc:	00006f04 	andeq	r6, r0, r4, lsl #30
    3100:	038d0600 	orreq	r0, sp, #0, 12
    3104:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    3108:	08000e24 	stmdaeq	r0, {r2, r5, r9, sl, fp}
    310c:	00000154 	andeq	r0, r0, r4, asr r1
    3110:	012a9c01 	teqeq	sl, r1, lsl #24
    3114:	96070000 	strls	r0, [r7], -r0
    3118:	01000013 	tsteq	r0, r3, lsl r0
    311c:	00003a2b 	andeq	r3, r0, fp, lsr #20
    3120:	00143200 	andseq	r3, r4, r0, lsl #4
    3124:	0e600800 	cdpeq	8, 6, cr0, cr0, cr0, {0}
    3128:	00120800 	andseq	r0, r2, r0, lsl #16
    312c:	00b70000 	adcseq	r0, r7, r0
    3130:	5b070000 	blpl	1c3138 <__Stack_Size+0x1c2d38>
    3134:	01000004 	tsteq	r0, r4
    3138:	00004c3c 	andeq	r4, r0, ip, lsr ip
    313c:	0014a200 	andseq	sl, r4, r0, lsl #4
    3140:	72080000 	andvc	r0, r8, #0
    3144:	1208000e 	andne	r0, r8, #14
    3148:	d4000000 	strle	r0, [r0], #-0
    314c:	07000000 	streq	r0, [r0, -r0]
    3150:	0000045b 	andeq	r0, r0, fp, asr r4
    3154:	004c3d01 	subeq	r3, ip, r1, lsl #26
    3158:	14e60000 	strbtne	r0, [r6], #0
    315c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3160:	08000ec6 	stmdaeq	r0, {r1, r2, r6, r7, r9, sl, fp}
    3164:	00000022 	andeq	r0, r0, r2, lsr #32
    3168:	000000f1 	strdeq	r0, [r0], -r1
    316c:	00045b07 	andeq	r5, r4, r7, lsl #22
    3170:	4c720100 	ldfmie	f0, [r2], #-0
    3174:	60000000 	andvs	r0, r0, r0
    3178:	00000015 	andeq	r0, r0, r5, lsl r0
    317c:	000ee808 	andeq	lr, lr, r8, lsl #16
    3180:	00002008 	andeq	r2, r0, r8
    3184:	00010e00 	andeq	r0, r1, r0, lsl #28
    3188:	045b0700 	ldrbeq	r0, [fp], #-1792	; 0x700
    318c:	73010000 	movwvc	r0, #4096	; 0x1000
    3190:	0000004c 	andeq	r0, r0, ip, asr #32
    3194:	00001581 	andeq	r1, r0, r1, lsl #11
    3198:	0e9e0900 	cdpeq	9, 9, cr0, cr14, cr0, {0}
    319c:	01ba0800 			; <UNDEFINED> instruction: 0x01ba0800
    31a0:	b2090000 	andlt	r0, r9, #0
    31a4:	c508000e 	strgt	r0, [r8, #-14]
    31a8:	09000001 	stmdbeq	r0, {r0}
    31ac:	08000ec6 	stmdaeq	r0, {r1, r2, r6, r7, r9, sl, fp}
    31b0:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    31b4:	136a0600 	cmnne	sl, #0, 12
    31b8:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    31bc:	00000000 	andeq	r0, r0, r0
    31c0:	00000070 	andeq	r0, r0, r0, ror r0
    31c4:	014f9c01 	cmpeq	pc, r1, lsl #24
    31c8:	96070000 	strls	r0, [r7], -r0
    31cc:	01000013 	tsteq	r0, r3, lsl r0
    31d0:	00003aa0 	andeq	r3, r0, r0, lsr #21
    31d4:	00159400 	andseq	r9, r5, r0, lsl #8
    31d8:	300a0000 	andcc	r0, sl, r0
    31dc:	03000002 	movweq	r0, #2
    31e0:	015b022a 	cmpeq	fp, sl, lsr #4
    31e4:	4c0b0000 	stcmi	0, cr0, [fp], {-0}
    31e8:	0c000000 	stceq	0, cr0, [r0], {-0}
    31ec:	00001380 	andeq	r1, r0, r0, lsl #7
    31f0:	004c1701 	subeq	r1, ip, r1, lsl #14
    31f4:	03050000 	movweq	r0, #20480	; 0x5000
    31f8:	200001ce 	andcs	r0, r0, lr, asr #3
    31fc:	00138b0c 	andseq	r8, r3, ip, lsl #22
    3200:	4c180100 	ldfmis	f0, [r8], {-0}
    3204:	05000000 	streq	r0, [r0, #-0]
    3208:	0001d003 	andeq	sp, r1, r3
    320c:	13c80d20 	bicne	r0, r8, #32, 26	; 0x800
    3210:	1d040000 	stcne	0, cr0, [r4, #-0]
    3214:	0000005e 	andeq	r0, r0, lr, asr r0
    3218:	0000700e 	andeq	r7, r0, lr
    321c:	00019d00 	andeq	r9, r1, r0, lsl #26
    3220:	019d0f00 	orrseq	r0, sp, r0, lsl #30
    3224:	00060000 	andeq	r0, r6, r0
    3228:	15070402 	strne	r0, [r7, #-1026]	; 0x402
    322c:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
    3230:	00000032 	andeq	r0, r0, r2, lsr r0
    3234:	018d1b01 	orreq	r1, sp, r1, lsl #22
    3238:	df0d0000 	svcle	0x000d0000
    323c:	01000007 	tsteq	r0, r7
    3240:	00018d1c 	andeq	r8, r1, ip, lsl sp
    3244:	13af1000 			; <UNDEFINED> instruction: 0x13af1000
    3248:	dc050000 	stcle	0, cr0, [r5], {-0}
    324c:	0000005e 	andeq	r0, r0, lr, asr r0
    3250:	00137110 	andseq	r7, r3, r0, lsl r1
    3254:	5ed90500 	cdppl	5, 13, cr0, cr9, cr0, {0}
    3258:	10000000 	andne	r0, r0, r0
    325c:	000013bb 			; <UNDEFINED> instruction: 0x000013bb
    3260:	005edb05 	subseq	sp, lr, r5, lsl #22
    3264:	f9000000 			; <UNDEFINED> instruction: 0xf9000000
    3268:	04000003 	streq	r0, [r0], #-3
    326c:	000f5700 	andeq	r5, pc, r0, lsl #14
    3270:	58010400 	stmdapl	r1, {sl}
    3274:	01000001 	tsteq	r0, r1
    3278:	000013da 	ldrdeq	r1, [r0], -sl
    327c:	00000862 	andeq	r0, r0, r2, ror #16
    3280:	00000530 	andeq	r0, r0, r0, lsr r5
    3284:	00000000 	andeq	r0, r0, r0
    3288:	0000103c 	andeq	r1, r0, ip, lsr r0
    328c:	f6050402 			; <UNDEFINED> instruction: 0xf6050402
    3290:	02000001 	andeq	r0, r0, #1
    3294:	06980502 	ldreq	r0, [r8], r2, lsl #10
    3298:	01020000 	mrseq	r0, (UNDEF: 2)
    329c:	00064406 	andeq	r4, r6, r6, lsl #8
    32a0:	07040200 	streq	r0, [r4, -r0, lsl #4]
    32a4:	0000037b 	andeq	r0, r0, fp, ror r3
    32a8:	36317503 	ldrtcc	r7, [r1], -r3, lsl #10
    32ac:	4c250200 	sfmmi	f0, 4, [r5], #-0
    32b0:	02000000 	andeq	r0, r0, #0
    32b4:	03d70702 	bicseq	r0, r7, #524288	; 0x80000
    32b8:	75030000 	strvc	r0, [r3, #-0]
    32bc:	26020038 			; <UNDEFINED> instruction: 0x26020038
    32c0:	0000005d 	andeq	r0, r0, sp, asr r0
    32c4:	42080102 	andmi	r0, r8, #-2147483648	; 0x80000000
    32c8:	04000006 	streq	r0, [r0], #-6
    32cc:	00005304 	andeq	r5, r0, r4, lsl #6
    32d0:	07350500 	ldreq	r0, [r5, -r0, lsl #10]!
    32d4:	03010000 	movweq	r0, #4096	; 0x1000
    32d8:	00008f2d 	andeq	r8, r0, sp, lsr #30
    32dc:	08e90600 	stmiaeq	r9!, {r9, sl}^
    32e0:	06000000 	streq	r0, [r0], -r0
    32e4:	000003ea 	andeq	r0, r0, sl, ror #7
    32e8:	07740601 	ldrbeq	r0, [r4, -r1, lsl #12]!
    32ec:	06020000 	streq	r0, [r2], -r0
    32f0:	00000222 	andeq	r0, r0, r2, lsr #4
    32f4:	36070003 	strcc	r0, [r7], -r3
    32f8:	03000007 	movweq	r0, #7
    32fc:	00006a34 	andeq	r6, r0, r4, lsr sl
    3300:	090e0800 	stmdbeq	lr, {fp}
    3304:	030c0000 	movweq	r0, #49152	; 0xc000
    3308:	0000d738 	andeq	sp, r0, r8, lsr r7
    330c:	02900900 	addseq	r0, r0, #0, 18
    3310:	50030000 	andpl	r0, r3, r0
    3314:	00000041 	andeq	r0, r0, r1, asr #32
    3318:	03190900 	tsteq	r9, #0, 18
    331c:	51030000 	mrspl	r0, (UNDEF: 3)
    3320:	00000041 	andeq	r0, r0, r1, asr #32
    3324:	15a60902 	strne	r0, [r6, #2306]!	; 0x902
    3328:	52030000 	andpl	r0, r3, #0
    332c:	00000041 	andeq	r0, r0, r1, asr #32
    3330:	00e30904 	rsceq	r0, r3, r4, lsl #18
    3334:	53030000 	movwpl	r0, #12288	; 0x3000
    3338:	000000e6 	andeq	r0, r0, r6, ror #1
    333c:	640a0008 	strvs	r0, [sl], #-8
    3340:	e6000000 	str	r0, [r0], -r0
    3344:	0b000000 	bleq	334c <__Stack_Size+0x2f4c>
    3348:	00000041 	andeq	r0, r0, r1, asr #32
    334c:	d7040400 	strle	r0, [r4, -r0, lsl #8]
    3350:	07000000 	streq	r0, [r0, -r0]
    3354:	0000090f 	andeq	r0, r0, pc, lsl #18
    3358:	009a5403 	addseq	r5, sl, r3, lsl #8
    335c:	420c0000 	andmi	r0, ip, #0
    3360:	03020057 	movweq	r0, #8279	; 0x2057
    3364:	00011b62 	andeq	r1, r1, r2, ror #22
    3368:	62620d00 	rsbvs	r0, r2, #0, 26
    336c:	65030030 	strvs	r0, [r3, #-48]	; 0x30
    3370:	00000053 	andeq	r0, r0, r3, asr r0
    3374:	62620d00 	rsbvs	r0, r2, #0, 26
    3378:	66030031 			; <UNDEFINED> instruction: 0x66030031
    337c:	00000053 	andeq	r0, r0, r3, asr r0
    3380:	020e0001 	andeq	r0, lr, #1
    3384:	01375f03 	teqeq	r7, r3, lsl #30
    3388:	770f0000 	strvc	r0, [pc, -r0]
    338c:	41610300 	cmnmi	r1, r0, lsl #6
    3390:	0f000000 	svceq	0x00000000
    3394:	03007762 	movweq	r7, #1890	; 0x762
    3398:	0000f768 	andeq	pc, r0, r8, ror #14
    339c:	ff070000 			; <UNDEFINED> instruction: 0xff070000
    33a0:	03000003 	movweq	r0, #3
    33a4:	00011b69 	andeq	r1, r1, r9, ror #22
    33a8:	003c0800 	eorseq	r0, ip, r0, lsl #16
    33ac:	031c0000 	tsteq	ip, #0
    33b0:	0001d36b 	andeq	sp, r1, fp, ror #6
    33b4:	05500900 	ldrbeq	r0, [r0, #-2304]	; 0x900
    33b8:	6d030000 	stcvs	0, cr0, [r3, #-0]
    33bc:	00000053 	andeq	r0, r0, r3, asr r0
    33c0:	02160900 	andseq	r0, r6, #0, 18
    33c4:	6e030000 	cdpvs	0, 0, cr0, cr3, cr0, {0}
    33c8:	00000053 	andeq	r0, r0, r3, asr r0
    33cc:	04180901 	ldreq	r0, [r8], #-2305	; 0x901
    33d0:	6f030000 	svcvs	0x00030000
    33d4:	00000137 	andeq	r0, r0, r7, lsr r1
    33d8:	01480902 	cmpeq	r8, r2, lsl #18
    33dc:	70030000 	andvc	r0, r3, r0
    33e0:	00000137 	andeq	r0, r0, r7, lsr r1
    33e4:	080d0904 	stmdaeq	sp, {r2, r8, fp}
    33e8:	71030000 	mrsvc	r0, (UNDEF: 3)
    33ec:	00000137 	andeq	r0, r0, r7, lsr r1
    33f0:	093c0906 	ldmdbeq	ip!, {r1, r2, r8, fp}
    33f4:	73030000 	movwvc	r0, #12288	; 0x3000
    33f8:	00000053 	andeq	r0, r0, r3, asr r0
    33fc:	03a00908 	moveq	r0, #8, 18	; 0x20000
    3400:	74030000 	strvc	r0, [r3], #-0
    3404:	00000053 	andeq	r0, r0, r3, asr r0
    3408:	04a10909 	strteq	r0, [r1], #2313	; 0x909
    340c:	75030000 	strvc	r0, [r3, #-0]
    3410:	00000053 	andeq	r0, r0, r3, asr r0
    3414:	0885090a 	stmeq	r5, {r1, r3, r8, fp}
    3418:	76030000 	strvc	r0, [r3], -r0
    341c:	00000053 	andeq	r0, r0, r3, asr r0
    3420:	061c090b 	ldreq	r0, [ip], -fp, lsl #18
    3424:	77030000 	strvc	r0, [r3, -r0]
    3428:	00000053 	andeq	r0, r0, r3, asr r0
    342c:	0713090c 	ldreq	r0, [r3, -ip, lsl #18]
    3430:	7a030000 	bvc	c3438 <__Stack_Size+0xc3038>
    3434:	000000ec 	andeq	r0, r0, ip, ror #1
    3438:	3d070010 	stccc	0, cr0, [r7, #-64]	; 0xffffffc0
    343c:	03000000 	movweq	r0, #0
    3440:	0001427b 	andeq	r4, r1, fp, ror r2
    3444:	07420800 	strbeq	r0, [r2, -r0, lsl #16]
    3448:	03340000 	teqeq	r4, #0
    344c:	0002877d 	andeq	r8, r2, sp, ror r7
    3450:	053d0900 	ldreq	r0, [sp, #-2304]!	; 0x900
    3454:	7f030000 	svcvc	0x00030000
    3458:	00000288 	andeq	r0, r0, r8, lsl #5
    345c:	03c70900 	biceq	r0, r7, #0, 18
    3460:	80030000 	andhi	r0, r3, r0
    3464:	00000288 	andeq	r0, r0, r8, lsl #5
    3468:	079a0904 	ldreq	r0, [sl, r4, lsl #18]
    346c:	83030000 	movwhi	r0, #12288	; 0x3000
    3470:	00000288 	andeq	r0, r0, r8, lsl #5
    3474:	07ac0908 	streq	r0, [ip, r8, lsl #18]!
    3478:	84030000 	strhi	r0, [r3], #-0
    347c:	00000288 	andeq	r0, r0, r8, lsl #5
    3480:	051e090c 	ldreq	r0, [lr, #-2316]	; 0x90c
    3484:	96030000 	strls	r0, [r3], -r0
    3488:	0000029d 	muleq	r0, sp, r2
    348c:	06f70910 	usateq	r0, #23, r0, lsl #18
    3490:	a1030000 	mrsge	r0, (UNDEF: 3)
    3494:	0000029d 	muleq	r0, sp, r2
    3498:	04e80914 	strbteq	r0, [r8], #2324	; 0x914
    349c:	ab030000 	blge	c34a4 <__Stack_Size+0xc30a4>
    34a0:	000002b7 			; <UNDEFINED> instruction: 0x000002b7
    34a4:	01340918 	teqeq	r4, r8, lsl r9
    34a8:	ad030000 	stcge	0, cr0, [r3, #-0]
    34ac:	000000e6 	andeq	r0, r0, r6, ror #1
    34b0:	0202091c 	andeq	r0, r2, #28, 18	; 0x70000
    34b4:	ae030000 	cdpge	0, 0, cr0, cr3, cr0, {0}
    34b8:	000000e6 	andeq	r0, r0, r6, ror #1
    34bc:	081c0920 	ldmdaeq	ip, {r5, r8, fp}
    34c0:	af030000 	svcge	0x00030000
    34c4:	000000e6 	andeq	r0, r0, r6, ror #1
    34c8:	06040924 	streq	r0, [r4], -r4, lsr #18
    34cc:	b0030000 	andlt	r0, r3, r0
    34d0:	000000e6 	andeq	r0, r0, r6, ror #1
    34d4:	057b0928 	ldrbeq	r0, [fp, #-2344]!	; 0x928
    34d8:	b2030000 	andlt	r0, r3, #0
    34dc:	00000064 	andeq	r0, r0, r4, rrx
    34e0:	15a3092c 	strne	r0, [r3, #2348]!	; 0x92c
    34e4:	b3030000 	movwlt	r0, #12288	; 0x3000
    34e8:	00000053 	andeq	r0, r0, r3, asr r0
    34ec:	04100030 	ldreq	r0, [r0], #-48	; 0x30
    34f0:	00028704 	andeq	r8, r2, r4, lsl #14
    34f4:	008f0a00 	addeq	r0, pc, r0, lsl #20
    34f8:	029d0000 	addseq	r0, sp, #0
    34fc:	530b0000 	movwpl	r0, #45056	; 0xb000
    3500:	00000000 	andeq	r0, r0, r0
    3504:	028e0404 	addeq	r0, lr, #4, 8	; 0x4000000
    3508:	8f0a0000 	svchi	0x000a0000
    350c:	b7000000 	strlt	r0, [r0, -r0]
    3510:	0b000002 	bleq	3520 <__Stack_Size+0x3120>
    3514:	00000053 	andeq	r0, r0, r3, asr r0
    3518:	0000530b 	andeq	r5, r0, fp, lsl #6
    351c:	04040000 	streq	r0, [r4], #-0
    3520:	000002a3 	andeq	r0, r0, r3, lsr #5
    3524:	00074307 	andeq	r4, r7, r7, lsl #6
    3528:	deb50300 	cdple	3, 11, cr0, cr5, cr0, {0}
    352c:	08000001 	stmdaeq	r0, {r0}
    3530:	00000650 	andeq	r0, r0, r0, asr r6
    3534:	41b70324 			; <UNDEFINED> instruction: 0x41b70324
    3538:	09000003 	stmdbeq	r0, {r0, r1}
    353c:	000006bd 			; <UNDEFINED> instruction: 0x000006bd
    3540:	0288b903 	addeq	fp, r8, #49152	; 0xc000
    3544:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    3548:	000005b9 			; <UNDEFINED> instruction: 0x000005b9
    354c:	0288ba03 	addeq	fp, r8, #12288	; 0x3000
    3550:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    3554:	000005d5 	ldrdeq	r0, [r0], -r5
    3558:	0288bb03 	addeq	fp, r8, #3072	; 0xc00
    355c:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    3560:	000000ec 	andeq	r0, r0, ip, ror #1
    3564:	0288bc03 	addeq	fp, r8, #768	; 0x300
    3568:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
    356c:	00000689 	andeq	r0, r0, r9, lsl #13
    3570:	0288bd03 	addeq	fp, r8, #3, 26	; 0xc0
    3574:	09100000 	ldmdbeq	r0, {}	; <UNPREDICTABLE>
    3578:	00000406 	andeq	r0, r0, r6, lsl #8
    357c:	0288be03 	addeq	fp, r8, #3, 28	; 0x30
    3580:	09140000 	ldmdbeq	r4, {}	; <UNPREDICTABLE>
    3584:	0000006c 	andeq	r0, r0, ip, rrx
    3588:	0288bf03 	addeq	fp, r8, #3, 30
    358c:	09180000 	ldmdbeq	r8, {}	; <UNPREDICTABLE>
    3590:	000005a3 	andeq	r0, r0, r3, lsr #11
    3594:	0288c003 	addeq	ip, r8, #3
    3598:	091c0000 	ldmdbeq	ip, {}	; <UNPREDICTABLE>
    359c:	0000001c 	andeq	r0, r0, ip, lsl r0
    35a0:	0288c103 	addeq	ip, r8, #-1073741824	; 0xc0000000
    35a4:	00200000 	eoreq	r0, r0, r0
    35a8:	00065107 	andeq	r5, r6, r7, lsl #2
    35ac:	c8c30300 	stmiagt	r3, {r8, r9}^
    35b0:	11000002 	tstne	r0, r2
    35b4:	00000539 	andeq	r0, r0, r9, lsr r5
    35b8:	0f783501 	svceq	0x00783501
    35bc:	00380800 	eorseq	r0, r8, r0, lsl #16
    35c0:	9c010000 	stcls	0, cr0, [r1], {-0}
    35c4:	0005e712 	andeq	lr, r5, r2, lsl r7
    35c8:	bdec0300 	stcllt	3, cr0, [ip]
    35cc:	12000002 	andne	r0, r0, #2
    35d0:	000013ee 	andeq	r1, r0, lr, ror #7
    35d4:	0341ed03 	movteq	lr, #7427	; 0x1d03
    35d8:	05130000 	ldreq	r0, [r3, #-0]
    35dc:	01000014 	tsteq	r0, r4, lsl r0
    35e0:	0001d327 	andeq	sp, r1, r7, lsr #6
    35e4:	e0030500 	and	r0, r3, r0, lsl #10
    35e8:	13200001 	teqne	r0, #1
    35ec:	000013c8 	andeq	r1, r0, r8, asr #7
    35f0:	00531801 	subseq	r1, r3, r1, lsl #16
    35f4:	03050000 	movweq	r0, #20480	; 0x5000
    35f8:	200001dc 	ldrdcs	r0, [r0], -ip
    35fc:	00027c13 	andeq	r7, r2, r3, lsl ip
    3600:	a61d0100 	ldrge	r0, [sp], -r0, lsl #2
    3604:	05000003 	streq	r0, [r0, #-3]
    3608:	00020003 	andeq	r0, r2, r3
    360c:	d3040420 	movwle	r0, #17440	; 0x4420
    3610:	13000001 	movwne	r0, #1
    3614:	0000052f 	andeq	r0, r0, pc, lsr #10
    3618:	03bd2001 			; <UNDEFINED> instruction: 0x03bd2001
    361c:	03050000 	movweq	r0, #20480	; 0x5000
    3620:	200001d8 	ldrdcs	r0, [r0], -r8
    3624:	02bd0404 	adcseq	r0, sp, #4, 8	; 0x4000000
    3628:	ed130000 	ldc	0, cr0, [r3, #-0]
    362c:	01000013 	tsteq	r0, r3, lsl r0
    3630:	0003d428 	andeq	sp, r3, r8, lsr #8
    3634:	fc030500 	stc2	5, cr0, [r3], {-0}
    3638:	04200001 	strteq	r0, [r0], #-1
    363c:	00034104 	andeq	r4, r3, r4, lsl #2
    3640:	13d01300 	bicsne	r1, r0, #0, 6
    3644:	25010000 	strcs	r0, [r1, #-0]
    3648:	00000041 	andeq	r0, r0, r1, asr #32
    364c:	01d40305 	bicseq	r0, r4, r5, lsl #6
    3650:	c2132000 	andsgt	r2, r3, #0
    3654:	01000004 	tsteq	r0, r4
    3658:	00004126 	andeq	r4, r0, r6, lsr #2
    365c:	04030500 	streq	r0, [r3], #-1280	; 0x500
    3660:	00200002 	eoreq	r0, r0, r2
    3664:	00000de0 	andeq	r0, r0, r0, ror #27
    3668:	105a0004 	subsne	r0, sl, r4
    366c:	01040000 	mrseq	r0, (UNDEF: 4)
    3670:	00000158 	andeq	r0, r0, r8, asr r1
    3674:	00141101 	andseq	r1, r4, r1, lsl #2
    3678:	00086200 	andeq	r6, r8, r0, lsl #4
    367c:	00057800 	andeq	r7, r5, r0, lsl #16
    3680:	00000000 	andeq	r0, r0, r0
    3684:	0010a300 	andseq	sl, r0, r0, lsl #6
    3688:	05040200 	streq	r0, [r4, #-512]	; 0x200
    368c:	000001f6 	strdeq	r0, [r0], -r6
    3690:	98050202 	stmdals	r5, {r1, r9}
    3694:	02000006 	andeq	r0, r0, #6
    3698:	06440601 	strbeq	r0, [r4], -r1, lsl #12
    369c:	75030000 	strvc	r0, [r3, #-0]
    36a0:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
    36a4:	00004524 	andeq	r4, r0, r4, lsr #10
    36a8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    36ac:	0000037b 	andeq	r0, r0, fp, ror r3
    36b0:	36317503 	ldrtcc	r7, [r1], -r3, lsl #10
    36b4:	57250200 	strpl	r0, [r5, -r0, lsl #4]!
    36b8:	02000000 	andeq	r0, r0, #0
    36bc:	03d70702 	bicseq	r0, r7, #524288	; 0x80000
    36c0:	75030000 	strvc	r0, [r3, #-0]
    36c4:	26020038 			; <UNDEFINED> instruction: 0x26020038
    36c8:	00000068 	andeq	r0, r0, r8, rrx
    36cc:	42080102 	andmi	r0, r8, #-2147483648	; 0x80000000
    36d0:	04000006 	streq	r0, [r0], #-6
    36d4:	00000446 	andeq	r0, r0, r6, asr #8
    36d8:	007a2c02 	rsbseq	r2, sl, r2, lsl #24
    36dc:	45050000 	strmi	r0, [r5, #-0]
    36e0:	06000000 	streq	r0, [r0], -r0
    36e4:	94360201 	ldrtls	r0, [r6], #-513	; 0x201
    36e8:	07000000 	streq	r0, [r0, -r0]
    36ec:	000005cf 	andeq	r0, r0, pc, asr #11
    36f0:	073d0700 	ldreq	r0, [sp, -r0, lsl #14]!
    36f4:	00010000 	andeq	r0, r1, r0
    36f8:	00043304 	andeq	r3, r4, r4, lsl #6
    36fc:	7f390200 	svcvc	0x00390200
    3700:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3704:	0000036b 	andeq	r0, r0, fp, ror #6
    3708:	c4160301 	ldrgt	r0, [r6], #-769	; 0x301
    370c:	07000000 	streq	r0, [r0, -r0]
    3710:	000000fe 	strdeq	r0, [r0], -lr
    3714:	02aa0700 	adceq	r0, sl, #0, 14
    3718:	07010000 	streq	r0, [r1, -r0]
    371c:	000007f2 	strdeq	r0, [r0], -r2
    3720:	04230702 	strteq	r0, [r3], #-1794	; 0x702
    3724:	00030000 	andeq	r0, r3, r0
    3728:	00065508 	andeq	r5, r6, r8, lsl #10
    372c:	1f030100 	svcne	0x00030100
    3730:	00000125 	andeq	r0, r0, r5, lsr #2
    3734:	00158307 	andseq	r8, r5, r7, lsl #6
    3738:	b2070000 	andlt	r0, r7, #0
    373c:	01000017 	tsteq	r0, r7, lsl r0
    3740:	000d2007 	andeq	r2, sp, r7
    3744:	8e070200 	cdphi	2, 0, cr0, cr7, cr0, {0}
    3748:	03000015 	movweq	r0, #21
    374c:	000cb507 	andeq	fp, ip, r7, lsl #10
    3750:	41070400 	tstmi	r7, r0, lsl #8
    3754:	05000017 	streq	r0, [r0, #-23]
    3758:	00177107 	andseq	r7, r7, r7, lsl #2
    375c:	f8070600 			; <UNDEFINED> instruction: 0xf8070600
    3760:	07000015 	smladeq	r0, r5, r0, r0
    3764:	00165707 	andseq	r5, r6, r7, lsl #14
    3768:	a8070800 	stmdage	r7, {fp}
    376c:	09000016 	stmdbeq	r0, {r1, r2, r4}
    3770:	00155907 	andseq	r5, r5, r7, lsl #18
    3774:	07070a00 	streq	r0, [r7, -r0, lsl #20]
    3778:	0b000016 	bleq	37d8 <__Stack_Size+0x33d8>
    377c:	0016ca07 	andseq	ip, r6, r7, lsl #20
    3780:	d6070c00 	strle	r0, [r7], -r0, lsl #24
    3784:	0c000015 	stceq	0, cr0, [r0], {21}
    3788:	16780800 	ldrbtne	r0, [r8], -r0, lsl #16
    378c:	03010000 	movweq	r0, #4096	; 0x1000
    3790:	00015032 	andeq	r5, r1, r2, lsr r0
    3794:	14c30700 	strbne	r0, [r3], #1792	; 0x700
    3798:	07010000 	streq	r0, [r1, -r0]
    379c:	00001722 	andeq	r1, r0, r2, lsr #14
    37a0:	14d50702 	ldrbne	r0, [r5], #1794	; 0x702
    37a4:	07030000 	streq	r0, [r3, -r0]
    37a8:	000016d9 	ldrdeq	r1, [r0], -r9
    37ac:	170e0704 	strne	r0, [lr, -r4, lsl #14]
    37b0:	00050000 	andeq	r0, r5, r0
    37b4:	00161508 	andseq	r1, r6, r8, lsl #10
    37b8:	3c030100 	stfccs	f0, [r3], {-0}
    37bc:	00000169 	andeq	r0, r0, r9, ror #2
    37c0:	00142407 	andseq	r2, r4, r7, lsl #8
    37c4:	82070000 	andhi	r0, r7, #0
    37c8:	01000014 	tsteq	r0, r4, lsl r0
    37cc:	16690800 	strbtne	r0, [r9], -r0, lsl #16
    37d0:	04010000 	streq	r0, [r1], #-0
    37d4:	0001b216 	andeq	fp, r1, r6, lsl r2
    37d8:	178d0700 	strne	r0, [sp, r0, lsl #14]
    37dc:	07000000 	streq	r0, [r0, -r0]
    37e0:	00001689 	andeq	r1, r0, r9, lsl #13
    37e4:	150d0701 	strne	r0, [sp, #-1793]	; 0x701
    37e8:	07020000 	streq	r0, [r2, -r0]
    37ec:	000017c5 	andeq	r1, r0, r5, asr #15
    37f0:	15080703 	strne	r0, [r8, #-1795]	; 0x703
    37f4:	07040000 	streq	r0, [r4, -r0]
    37f8:	000017c0 	andeq	r1, r0, r0, asr #15
    37fc:	17a30705 	strne	r0, [r3, r5, lsl #14]!
    3800:	07060000 	streq	r0, [r6, -r0]
    3804:	000016ba 			; <UNDEFINED> instruction: 0x000016ba
    3808:	14970707 	ldrne	r0, [r7], #1799	; 0x707
    380c:	07080000 	streq	r0, [r8, -r0]
    3810:	00001549 	andeq	r1, r0, r9, asr #10
    3814:	8c090009 	stchi	0, cr0, [r9], {9}
    3818:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    381c:	01d72404 	bicseq	r2, r7, r4, lsl #8
    3820:	3d0a0000 	stccc	0, cr0, [sl, #-0]
    3824:	04000001 	streq	r0, [r0], #-1
    3828:	0001d726 	andeq	sp, r1, r6, lsr #14
    382c:	930a0000 	movwls	r0, #40960	; 0xa000
    3830:	04000005 	streq	r0, [r0], #-5
    3834:	00004c27 	andeq	r4, r0, r7, lsr #24
    3838:	0b000400 	bleq	4840 <__Stack_Size+0x4440>
    383c:	00005e04 	andeq	r5, r0, r4, lsl #28
    3840:	02d60400 	sbcseq	r0, r6, #0, 8
    3844:	29040000 	stmdbcs	r4, {}	; <UNPREDICTABLE>
    3848:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
    384c:	00073508 	andeq	r3, r7, r8, lsl #10
    3850:	2d040100 	stfcss	f0, [r4, #-0]
    3854:	0000020d 	andeq	r0, r0, sp, lsl #4
    3858:	0008e907 	andeq	lr, r8, r7, lsl #18
    385c:	ea070000 	b	1c3864 <__Stack_Size+0x1c3464>
    3860:	01000003 	tsteq	r0, r3
    3864:	00077407 	andeq	r7, r7, r7, lsl #8
    3868:	22070200 	andcs	r0, r7, #0, 4
    386c:	03000002 	movweq	r0, #2
    3870:	07360400 	ldreq	r0, [r6, -r0, lsl #8]!
    3874:	34040000 	strcc	r0, [r4], #-0
    3878:	000001e8 	andeq	r0, r0, r8, ror #3
    387c:	00090e09 	andeq	r0, r9, r9, lsl #28
    3880:	38040c00 	stmdacc	r4, {sl, fp}
    3884:	00000255 	andeq	r0, r0, r5, asr r2
    3888:	0002900a 	andeq	r9, r2, sl
    388c:	4c500400 	cfldrdmi	mvd0, [r0], {-0}
    3890:	00000000 	andeq	r0, r0, r0
    3894:	0003190a 	andeq	r1, r3, sl, lsl #18
    3898:	4c510400 	cfldrdmi	mvd0, [r1], {-0}
    389c:	02000000 	andeq	r0, r0, #0
    38a0:	0015a60a 	andseq	sl, r5, sl, lsl #12
    38a4:	4c520400 	cfldrdmi	mvd0, [r2], {-0}
    38a8:	04000000 	streq	r0, [r0], #-0
    38ac:	0000e30a 	andeq	lr, r0, sl, lsl #6
    38b0:	64530400 	ldrbvs	r0, [r3], #-1024	; 0x400
    38b4:	08000002 	stmdaeq	r0, {r1}
    38b8:	01d70c00 	bicseq	r0, r7, r0, lsl #24
    38bc:	02640000 	rsbeq	r0, r4, #0
    38c0:	4c0d0000 	stcmi	0, cr0, [sp], {-0}
    38c4:	00000000 	andeq	r0, r0, r0
    38c8:	0255040b 	subseq	r0, r5, #184549376	; 0xb000000
    38cc:	0f040000 	svceq	0x00040000
    38d0:	04000009 	streq	r0, [r0], #-9
    38d4:	00021854 	andeq	r1, r2, r4, asr r8
    38d8:	07cd0900 	strbeq	r0, [sp, r0, lsl #18]
    38dc:	04020000 	streq	r0, [r2], #-0
    38e0:	00029a58 	andeq	r9, r2, r8, asr sl
    38e4:	092d0a00 	pusheq	{r9, fp}
    38e8:	5a040000 	bpl	1038f0 <__Stack_Size+0x1034f0>
    38ec:	0000005e 	andeq	r0, r0, lr, asr r0
    38f0:	03b00a00 	movseq	r0, #0, 20
    38f4:	5b040000 	blpl	1038fc <__Stack_Size+0x1034fc>
    38f8:	0000005e 	andeq	r0, r0, lr, asr r0
    38fc:	ce040001 	cdpgt	0, 0, cr0, cr4, cr1, {0}
    3900:	04000007 	streq	r0, [r0], #-7
    3904:	0002755d 	andeq	r7, r2, sp, asr r5
    3908:	57420e00 	strbpl	r0, [r2, -r0, lsl #28]
    390c:	62040200 	andvs	r0, r4, #0, 4
    3910:	000002c9 	andeq	r0, r0, r9, asr #5
    3914:	3062620f 	rsbcc	r6, r2, pc, lsl #4
    3918:	5e650400 	cdppl	4, 6, cr0, cr5, cr0, {0}
    391c:	00000000 	andeq	r0, r0, r0
    3920:	3162620f 	cmncc	r2, pc, lsl #4
    3924:	5e660400 	cdppl	4, 6, cr0, cr6, cr0, {0}
    3928:	01000000 	mrseq	r0, (UNDEF: 0)
    392c:	04021000 	streq	r1, [r2], #-0
    3930:	0002e55f 	andeq	lr, r2, pc, asr r5
    3934:	00771100 	rsbseq	r1, r7, r0, lsl #2
    3938:	004c6104 	subeq	r6, ip, r4, lsl #2
    393c:	62110000 	andsvs	r0, r1, #0
    3940:	68040077 	stmdavs	r4, {r0, r1, r2, r4, r5, r6}
    3944:	000002a5 	andeq	r0, r0, r5, lsr #5
    3948:	03ff0400 	mvnseq	r0, #0, 8
    394c:	69040000 	stmdbvs	r4, {}	; <UNPREDICTABLE>
    3950:	000002c9 	andeq	r0, r0, r9, asr #5
    3954:	00003c09 	andeq	r3, r0, r9, lsl #24
    3958:	6b041c00 	blvs	10a960 <__Stack_Size+0x10a560>
    395c:	00000381 	andeq	r0, r0, r1, lsl #7
    3960:	0005500a 	andeq	r5, r5, sl
    3964:	5e6d0400 	cdppl	4, 6, cr0, cr13, cr0, {0}
    3968:	00000000 	andeq	r0, r0, r0
    396c:	0002160a 	andeq	r1, r2, sl, lsl #12
    3970:	5e6e0400 	cdppl	4, 6, cr0, cr14, cr0, {0}
    3974:	01000000 	mrseq	r0, (UNDEF: 0)
    3978:	0004180a 	andeq	r1, r4, sl, lsl #16
    397c:	e56f0400 	strb	r0, [pc, #-1024]!	; 3584 <__Stack_Size+0x3184>
    3980:	02000002 	andeq	r0, r0, #2
    3984:	0001480a 	andeq	r4, r1, sl, lsl #16
    3988:	e5700400 	ldrb	r0, [r0, #-1024]!	; 0x400
    398c:	04000002 	streq	r0, [r0], #-2
    3990:	00080d0a 	andeq	r0, r8, sl, lsl #26
    3994:	e5710400 	ldrb	r0, [r1, #-1024]!	; 0x400
    3998:	06000002 	streq	r0, [r0], -r2
    399c:	00093c0a 	andeq	r3, r9, sl, lsl #24
    39a0:	5e730400 	cdppl	4, 7, cr0, cr3, cr0, {0}
    39a4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    39a8:	0003a00a 	andeq	sl, r3, sl
    39ac:	5e740400 	cdppl	4, 7, cr0, cr4, cr0, {0}
    39b0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    39b4:	0004a10a 	andeq	sl, r4, sl, lsl #2
    39b8:	5e750400 	cdppl	4, 7, cr0, cr5, cr0, {0}
    39bc:	0a000000 	beq	39c4 <__Stack_Size+0x35c4>
    39c0:	0008850a 	andeq	r8, r8, sl, lsl #10
    39c4:	5e760400 	cdppl	4, 7, cr0, cr6, cr0, {0}
    39c8:	0b000000 	bleq	39d0 <__Stack_Size+0x35d0>
    39cc:	00061c0a 	andeq	r1, r6, sl, lsl #24
    39d0:	5e770400 	cdppl	4, 7, cr0, cr7, cr0, {0}
    39d4:	0c000000 	stceq	0, cr0, [r0], {-0}
    39d8:	0007130a 	andeq	r1, r7, sl, lsl #6
    39dc:	6a7a0400 	bvs	1e849e4 <__Stack_Size+0x1e845e4>
    39e0:	10000002 	andne	r0, r0, r2
    39e4:	003d0400 	eorseq	r0, sp, r0, lsl #8
    39e8:	7b040000 	blvc	1039f0 <__Stack_Size+0x1035f0>
    39ec:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    39f0:	00074209 	andeq	r4, r7, r9, lsl #4
    39f4:	7d043400 	cfstrsvc	mvf3, [r4, #-0]
    39f8:	00000435 	andeq	r0, r0, r5, lsr r4
    39fc:	00053d0a 	andeq	r3, r5, sl, lsl #26
    3a00:	367f0400 	ldrbtcc	r0, [pc], -r0, lsl #8
    3a04:	00000004 	andeq	r0, r0, r4
    3a08:	0003c70a 	andeq	ip, r3, sl, lsl #14
    3a0c:	36800400 	strcc	r0, [r0], r0, lsl #8
    3a10:	04000004 	streq	r0, [r0], #-4
    3a14:	00079a0a 	andeq	r9, r7, sl, lsl #20
    3a18:	36830400 	strcc	r0, [r3], r0, lsl #8
    3a1c:	08000004 	stmdaeq	r0, {r2}
    3a20:	0007ac0a 	andeq	sl, r7, sl, lsl #24
    3a24:	36840400 	strcc	r0, [r4], r0, lsl #8
    3a28:	0c000004 	stceq	0, cr0, [r0], {4}
    3a2c:	00051e0a 	andeq	r1, r5, sl, lsl #28
    3a30:	4b960400 	blmi	fe584a38 <BootRAM+0xd4f51d9>
    3a34:	10000004 	andne	r0, r0, r4
    3a38:	0006f70a 	andeq	pc, r6, sl, lsl #14
    3a3c:	4ba10400 	blmi	fe844a44 <BootRAM+0xd7b51e5>
    3a40:	14000004 	strne	r0, [r0], #-4
    3a44:	0004e80a 	andeq	lr, r4, sl, lsl #16
    3a48:	65ab0400 	strvs	r0, [fp, #1024]!	; 0x400
    3a4c:	18000004 	stmdane	r0, {r2}
    3a50:	0001340a 	andeq	r3, r1, sl, lsl #8
    3a54:	64ad0400 	strtvs	r0, [sp], #1024	; 0x400
    3a58:	1c000002 	stcne	0, cr0, [r0], {2}
    3a5c:	0002020a 	andeq	r0, r2, sl, lsl #4
    3a60:	64ae0400 	strtvs	r0, [lr], #1024	; 0x400
    3a64:	20000002 	andcs	r0, r0, r2
    3a68:	00081c0a 	andeq	r1, r8, sl, lsl #24
    3a6c:	64af0400 	strtvs	r0, [pc], #1024	; 3a74 <__Stack_Size+0x3674>
    3a70:	24000002 	strcs	r0, [r0], #-2
    3a74:	0006040a 	andeq	r0, r6, sl, lsl #8
    3a78:	64b00400 	ldrtvs	r0, [r0], #1024	; 0x400
    3a7c:	28000002 	stmdacs	r0, {r1}
    3a80:	00057b0a 	andeq	r7, r5, sl, lsl #22
    3a84:	d7b20400 	ldrle	r0, [r2, r0, lsl #8]!
    3a88:	2c000001 	stccs	0, cr0, [r0], {1}
    3a8c:	0015a30a 	andseq	sl, r5, sl, lsl #6
    3a90:	5eb30400 	cdppl	4, 11, cr0, cr3, cr0, {0}
    3a94:	30000000 	andcc	r0, r0, r0
    3a98:	040b1200 	streq	r1, [fp], #-512	; 0x200
    3a9c:	00000435 	andeq	r0, r0, r5, lsr r4
    3aa0:	00020d0c 	andeq	r0, r2, ip, lsl #26
    3aa4:	00044b00 	andeq	r4, r4, r0, lsl #22
    3aa8:	005e0d00 	subseq	r0, lr, r0, lsl #26
    3aac:	0b000000 	bleq	3ab4 <__Stack_Size+0x36b4>
    3ab0:	00043c04 	andeq	r3, r4, r4, lsl #24
    3ab4:	020d0c00 	andeq	r0, sp, #0, 24
    3ab8:	04650000 	strbteq	r0, [r5], #-0
    3abc:	5e0d0000 	cdppl	0, 0, cr0, cr13, cr0, {0}
    3ac0:	0d000000 	stceq	0, cr0, [r0, #-0]
    3ac4:	0000005e 	andeq	r0, r0, lr, asr r0
    3ac8:	51040b00 	tstpl	r4, r0, lsl #22
    3acc:	04000004 	streq	r0, [r0], #-4
    3ad0:	00000743 	andeq	r0, r0, r3, asr #14
    3ad4:	038cb504 	orreq	fp, ip, #4, 10	; 0x1000000
    3ad8:	50090000 	andpl	r0, r9, r0
    3adc:	24000006 	strcs	r0, [r0], #-6
    3ae0:	04efb704 	strbteq	fp, [pc], #1796	; 3ae8 <__Stack_Size+0x36e8>
    3ae4:	bd0a0000 	stclt	0, cr0, [sl, #-0]
    3ae8:	04000006 	streq	r0, [r0], #-6
    3aec:	000436b9 			; <UNDEFINED> instruction: 0x000436b9
    3af0:	b90a0000 	stmdblt	sl, {}	; <UNPREDICTABLE>
    3af4:	04000005 	streq	r0, [r0], #-5
    3af8:	000436ba 			; <UNDEFINED> instruction: 0x000436ba
    3afc:	d50a0400 	strle	r0, [sl, #-1024]	; 0x400
    3b00:	04000005 	streq	r0, [r0], #-5
    3b04:	000436bb 			; <UNDEFINED> instruction: 0x000436bb
    3b08:	ec0a0800 	stc	8, cr0, [sl], {-0}
    3b0c:	04000000 	streq	r0, [r0], #-0
    3b10:	000436bc 			; <UNDEFINED> instruction: 0x000436bc
    3b14:	890a0c00 	stmdbhi	sl, {sl, fp}
    3b18:	04000006 	streq	r0, [r0], #-6
    3b1c:	000436bd 			; <UNDEFINED> instruction: 0x000436bd
    3b20:	060a1000 	streq	r1, [sl], -r0
    3b24:	04000004 	streq	r0, [r0], #-4
    3b28:	000436be 			; <UNDEFINED> instruction: 0x000436be
    3b2c:	6c0a1400 	cfstrsvs	mvf1, [sl], {-0}
    3b30:	04000000 	streq	r0, [r0], #-0
    3b34:	000436bf 			; <UNDEFINED> instruction: 0x000436bf
    3b38:	a30a1800 	movwge	r1, #43008	; 0xa800
    3b3c:	04000005 	streq	r0, [r0], #-5
    3b40:	000436c0 	andeq	r3, r4, r0, asr #13
    3b44:	1c0a1c00 	stcne	12, cr1, [sl], {-0}
    3b48:	04000000 	streq	r0, [r0], #-0
    3b4c:	000436c1 	andeq	r3, r4, r1, asr #13
    3b50:	04002000 	streq	r2, [r0], #-0
    3b54:	00000651 	andeq	r0, r0, r1, asr r6
    3b58:	0476c304 	ldrbteq	ip, [r6], #-772	; 0x304
    3b5c:	27130000 	ldrcs	r0, [r3, -r0]
    3b60:	01000016 	tsteq	r0, r6, lsl r0
    3b64:	0001d735 	andeq	sp, r1, r5, lsr r7
    3b68:	000fb000 	andeq	fp, pc, r0
    3b6c:	00002408 	andeq	r2, r0, r8, lsl #8
    3b70:	239c0100 	orrscs	r0, ip, #0, 2
    3b74:	14000005 	strne	r0, [r0], #-5
    3b78:	00001501 	andeq	r1, r0, r1, lsl #10
    3b7c:	004c3501 	subeq	r3, ip, r1, lsl #10
    3b80:	15d60000 	ldrbne	r0, [r6]
    3b84:	13000000 	movwne	r0, #0
    3b88:	000015e2 	andeq	r1, r0, r2, ror #11
    3b8c:	01d76301 	bicseq	r6, r7, r1, lsl #6
    3b90:	0fd40000 	svceq	0x00d40000
    3b94:	00240800 	eoreq	r0, r4, r0, lsl #16
    3b98:	9c010000 	stcls	0, cr0, [r1], {-0}
    3b9c:	0000054c 	andeq	r0, r0, ip, asr #10
    3ba0:	00150114 	andseq	r0, r5, r4, lsl r1
    3ba4:	4c630100 	stfmie	f0, [r3], #-0
    3ba8:	f7000000 			; <UNDEFINED> instruction: 0xf7000000
    3bac:	00000015 	andeq	r0, r0, r5, lsl r0
    3bb0:	0016fb13 	andseq	pc, r6, r3, lsl fp	; <UNPREDICTABLE>
    3bb4:	d79b0100 	ldrle	r0, [fp, r0, lsl #2]
    3bb8:	f8000001 			; <UNDEFINED> instruction: 0xf8000001
    3bbc:	9008000f 	andls	r0, r8, pc
    3bc0:	01000000 	mrseq	r0, (UNDEF: 0)
    3bc4:	0005b69c 	muleq	r5, ip, r6
    3bc8:	15011400 	strne	r1, [r1, #-1024]	; 0x400
    3bcc:	9b010000 	blls	43bd4 <__Stack_Size+0x437d4>
    3bd0:	0000004c 	andeq	r0, r0, ip, asr #32
    3bd4:	00001618 	andeq	r1, r0, r8, lsl r6
    3bd8:	00101815 	andseq	r1, r0, r5, lsl r8
    3bdc:	00001c08 	andeq	r1, r0, r8, lsl #24
    3be0:	00059100 	andeq	r9, r5, r0, lsl #2
    3be4:	03a81600 			; <UNDEFINED> instruction: 0x03a81600
    3be8:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    3bec:	0000005e 	andeq	r0, r0, lr, asr r0
    3bf0:	00001639 	andeq	r1, r0, r9, lsr r6
    3bf4:	103c1700 	eorsne	r1, ip, r0, lsl #14
    3bf8:	00300800 	eorseq	r0, r0, r0, lsl #16
    3bfc:	4d160000 	ldcmi	0, cr0, [r6, #-0]
    3c00:	01000017 	tsteq	r0, r7, lsl r0
    3c04:	00005ec3 	andeq	r5, r0, r3, asr #29
    3c08:	00164d00 	andseq	r4, r6, r0, lsl #26
    3c0c:	17691800 	strbne	r1, [r9, -r0, lsl #16]!
    3c10:	c4010000 	strgt	r0, [r1], #-0
    3c14:	0000005e 	andeq	r0, r0, lr, asr r0
    3c18:	76190000 	ldrvc	r0, [r9], -r0
    3c1c:	01000014 	tsteq	r0, r4, lsl r0
    3c20:	108801e0 	addne	r0, r8, r0, ror #3
    3c24:	00a80800 	adceq	r0, r8, r0, lsl #16
    3c28:	9c010000 	stcls	0, cr0, [r1], {-0}
    3c2c:	0000067b 	andeq	r0, r0, fp, ror r6
    3c30:	0017391a 	andseq	r3, r7, sl, lsl r9
    3c34:	01e20100 	mvneq	r0, r0, lsl #2
    3c38:	0000067b 	andeq	r0, r0, fp, ror r6
    3c3c:	0000167e 	andeq	r1, r0, lr, ror r6
    3c40:	0016ee1a 	andseq	lr, r6, sl, lsl lr
    3c44:	01e30100 	mvneq	r0, r0, lsl #2
    3c48:	0000003a 	andeq	r0, r0, sl, lsr r0
    3c4c:	00001693 	muleq	r0, r3, r6
    3c50:	00093c1a 	andeq	r3, r9, sl, lsl ip
    3c54:	01e40100 	mvneq	r0, r0, lsl #2
    3c58:	0000003a 	andeq	r0, r0, sl, lsr r0
    3c5c:	000016d7 	ldrdeq	r1, [r0], -r7
    3c60:	0014481a 	andseq	r4, r4, sl, lsl r8
    3c64:	01e60100 	mvneq	r0, r0, lsl #2
    3c68:	000001d7 	ldrdeq	r0, [r0], -r7
    3c6c:	00001722 	andeq	r1, r0, r2, lsr #14
    3c70:	0015011a 	andseq	r0, r5, sl, lsl r1
    3c74:	01e70100 	mvneq	r0, r0, lsl #2
    3c78:	0000003a 	andeq	r0, r0, sl, lsr r0
    3c7c:	00001740 	andeq	r1, r0, r0, asr #14
    3c80:	0015371b 	andseq	r3, r5, fp, lsl r7
    3c84:	02100100 	andseq	r0, r0, #0, 2
    3c88:	0800110c 	stmdaeq	r0, {r2, r3, r8, ip}
    3c8c:	0010da1c 	andseq	sp, r0, ip, lsl sl
    3c90:	00063808 	andeq	r3, r6, r8, lsl #16
    3c94:	50011d00 	andpl	r1, r1, r0, lsl #26
    3c98:	00007502 	andeq	r7, r0, r2, lsl #10
    3c9c:	0010e21e 	andseq	lr, r0, lr, lsl r2
    3ca0:	000d1c08 	andeq	r1, sp, r8, lsl #24
    3ca4:	00064b00 	andeq	r4, r6, r0, lsl #22
    3ca8:	50011d00 	andpl	r1, r1, r0, lsl #26
    3cac:	1e003001 	cdpne	0, 0, cr3, cr0, cr1, {0}
    3cb0:	080010ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, ip}
    3cb4:	00000d32 	andeq	r0, r0, r2, lsr sp
    3cb8:	00000665 	andeq	r0, r0, r5, ror #12
    3cbc:	0252011d 	subseq	r0, r2, #1073741831	; 0x40000007
    3cc0:	011d0075 	tsteq	sp, r5, ror r0
    3cc4:	00790250 	rsbseq	r0, r9, r0, asr r2
    3cc8:	10f41f00 	rscsne	r1, r4, r0, lsl #30
    3ccc:	0d4d0800 	stcleq	8, cr0, [sp, #-0]
    3cd0:	011d0000 	tsteq	sp, r0
    3cd4:	00750251 	rsbseq	r0, r5, r1, asr r2
    3cd8:	0150011d 	cmpeq	r0, sp, lsl r1
    3cdc:	0b000030 	bleq	3da4 <__Stack_Size+0x39a4>
    3ce0:	00026a04 	andeq	r6, r2, r4, lsl #20
    3ce4:	145c2000 	ldrbne	r2, [ip], #-0
    3ce8:	4a010000 	bmi	43cf0 <__Stack_Size+0x438f0>
    3cec:	0000020d 	andeq	r0, r0, sp, lsl #4
    3cf0:	08001130 	stmdaeq	r0, {r4, r5, r8, ip}
    3cf4:	00000038 	andeq	r0, r0, r8, lsr r0
    3cf8:	21139c01 	tstcs	r3, r1, lsl #24
    3cfc:	01000015 	tsteq	r0, r5, lsl r0
    3d00:	00020d78 	andeq	r0, r2, r8, ror sp
    3d04:	00116800 	andseq	r6, r1, r0, lsl #16
    3d08:	00004808 	andeq	r4, r0, r8, lsl #16
    3d0c:	be9c0100 	fmllte	f0, f4, f0
    3d10:	21000006 	tstcs	r0, r6
    3d14:	01006552 	tsteq	r0, r2, asr r5
    3d18:	00020d7a 	andeq	r0, r2, sl, ror sp
    3d1c:	00177e00 	andseq	r7, r7, r0, lsl #28
    3d20:	41130000 	tstmi	r3, r0
    3d24:	01000016 	tsteq	r0, r6, lsl r0
    3d28:	00020de9 	andeq	r0, r2, r9, ror #27
    3d2c:	0011b000 	andseq	fp, r1, r0
    3d30:	0000d008 	andeq	sp, r0, r8
    3d34:	969c0100 	ldrls	r0, [ip], r0, lsl #2
    3d38:	16000007 	strne	r0, [r0], -r7
    3d3c:	0000149f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
    3d40:	003aeb01 	eorseq	lr, sl, r1, lsl #22
    3d44:	179c0000 	ldrne	r0, [ip, r0]
    3d48:	39160000 	ldmdbcc	r6, {}	; <UNPREDICTABLE>
    3d4c:	0100000e 	tsteq	r0, lr
    3d50:	00003aec 	andeq	r3, r0, ip, ror #21
    3d54:	0017d400 	andseq	sp, r7, r0, lsl #8
    3d58:	11cc1700 	bicne	r1, ip, r0, lsl #14
    3d5c:	009e0800 	addseq	r0, lr, r0, lsl #16
    3d60:	b1180000 	tstlt	r8, r0
    3d64:	01000015 	tsteq	r0, r5, lsl r0
    3d68:	000796f6 	strdeq	r9, [r7], -r6
    3d6c:	174d1600 	strbne	r1, [sp, -r0, lsl #12]
    3d70:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
    3d74:	0000003a 	andeq	r0, r0, sl, lsr r0
    3d78:	000017fd 	strdeq	r1, [r0], -sp
    3d7c:	00176916 	andseq	r6, r7, r6, lsl r9
    3d80:	3af80100 	bcc	ffe04188 <BootRAM+0xed74929>
    3d84:	26000000 	strcs	r0, [r0], -r0
    3d88:	21000018 	tstcs	r0, r8, lsl r0
    3d8c:	00504572 	subseq	r4, r0, r2, ror r5
    3d90:	003af901 	eorseq	pc, sl, r1, lsl #18
    3d94:	17fd0000 	ldrbne	r0, [sp, r0]!
    3d98:	4c150000 	ldcmi	0, cr0, [r5], {-0}
    3d9c:	12080012 	andne	r0, r8, #18
    3da0:	54000000 	strpl	r0, [r0], #-0
    3da4:	1a000007 	bne	3dc8 <__Stack_Size+0x39c8>
    3da8:	0000045b 	andeq	r0, r0, fp, asr r4
    3dac:	4c012f01 	stcmi	15, cr2, [r1], {1}
    3db0:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    3db4:	00000018 	andeq	r0, r0, r8, lsl r0
    3db8:	0012261e 	andseq	r2, r2, lr, lsl r6
    3dbc:	000d6408 	andeq	r6, sp, r8, lsl #8
    3dc0:	00076800 	andeq	r6, r7, r0, lsl #16
    3dc4:	50011d00 	andpl	r1, r1, r0, lsl #26
    3dc8:	00007402 	andeq	r7, r0, r2, lsl #8
    3dcc:	00122e1e 	andseq	r2, r2, lr, lsl lr
    3dd0:	000d7608 	andeq	r7, sp, r8, lsl #12
    3dd4:	00078200 	andeq	r8, r7, r0, lsl #4
    3dd8:	51011d00 	tstpl	r1, r0, lsl #26
    3ddc:	1d300802 	ldcne	8, cr0, [r0, #-8]!
    3de0:	74025001 	strvc	r5, [r2], #-1
    3de4:	46220000 	strtmi	r0, [r2], -r0
    3de8:	8d080012 	stchi	0, cr0, [r8, #-72]	; 0xffffffb8
    3dec:	2200000d 	andcs	r0, r0, #13
    3df0:	0800124c 	stmdaeq	r0, {r2, r3, r6, r9, ip}
    3df4:	00000da4 	andeq	r0, r0, r4, lsr #27
    3df8:	040b0000 	streq	r0, [fp], #-0
    3dfc:	0000029a 	muleq	r0, sl, r2
    3e00:	00156723 	andseq	r6, r5, r3, lsr #14
    3e04:	01420100 	mrseq	r0, (UNDEF: 82)
    3e08:	0000020d 	andeq	r0, r0, sp, lsl #4
    3e0c:	08001280 	stmdaeq	r0, {r7, r9, ip}
    3e10:	00000084 	andeq	r0, r0, r4, lsl #1
    3e14:	082b9c01 	stmdaeq	fp!, {r0, sl, fp, ip, pc}
    3e18:	691a0000 	ldmdbvs	sl, {}	; <UNPREDICTABLE>
    3e1c:	01000017 	tsteq	r0, r7, lsl r0
    3e20:	003a0144 	eorseq	r0, sl, r4, asr #2
    3e24:	186c0000 	stmdane	ip!, {}^	; <UNPREDICTABLE>
    3e28:	4d1a0000 	ldcmi	0, cr0, [sl, #-0]
    3e2c:	01000017 	tsteq	r0, r7, lsl r0
    3e30:	003a0145 	eorseq	r0, sl, r5, asr #2
    3e34:	18940000 	ldmne	r4, {}	; <UNPREDICTABLE>
    3e38:	72240000 	eorvc	r0, r4, #0
    3e3c:	01005045 	tsteq	r0, r5, asr #32
    3e40:	003a0146 	eorseq	r0, sl, r6, asr #2
    3e44:	18940000 	ldmne	r4, {}	; <UNPREDICTABLE>
    3e48:	391a0000 	ldmdbcc	sl, {}	; <UNPREDICTABLE>
    3e4c:	0100000e 	tsteq	r0, lr
    3e50:	003a0147 	eorseq	r0, sl, r7, asr #2
    3e54:	18c90000 	stmiane	r9, {}^	; <UNPREDICTABLE>
    3e58:	40250000 	eormi	r0, r5, r0
    3e5c:	10000005 	andne	r0, r0, r5
    3e60:	1a000008 	bne	3e88 <__Stack_Size+0x3a88>
    3e64:	0000045b 	andeq	r0, r0, fp, asr r4
    3e68:	4c016301 	stcmi	3, cr6, [r1], {1}
    3e6c:	e7000000 	str	r0, [r0, -r0]
    3e70:	00000018 	andeq	r0, r0, r8, lsl r0
    3e74:	0012d817 	andseq	sp, r2, r7, lsl r8
    3e78:	00001008 	andeq	r1, r0, r8
    3e7c:	045b1a00 	ldrbeq	r1, [fp], #-2560	; 0xa00
    3e80:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    3e84:	00004c01 	andeq	r4, r0, r1, lsl #24
    3e88:	00190f00 	andseq	r0, r9, r0, lsl #30
    3e8c:	26000000 	strcs	r0, [r0], -r0
    3e90:	000015b6 			; <UNDEFINED> instruction: 0x000015b6
    3e94:	0d017801 	stceq	8, cr7, [r1, #-4]
    3e98:	04000002 	streq	r0, [r0], #-2
    3e9c:	24080013 	strcs	r0, [r8], #-19
    3ea0:	01000000 	mrseq	r0, (UNDEF: 0)
    3ea4:	0830279c 	ldmdaeq	r0!, {r2, r3, r4, r7, r8, r9, sl, sp}
    3ea8:	92010000 	andls	r0, r1, #0
    3eac:	0001d701 	andeq	sp, r1, r1, lsl #14
    3eb0:	00132800 	andseq	r2, r3, r0, lsl #16
    3eb4:	00001c08 	andeq	r1, r0, r8, lsl #24
    3eb8:	8c9c0100 	ldfhis	f0, [ip], {0}
    3ebc:	28000008 	stmdacs	r0, {r3}
    3ec0:	00001501 	andeq	r1, r0, r1, lsl #10
    3ec4:	4c019201 	sfmmi	f1, 1, [r1], {1}
    3ec8:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    3ecc:	28000019 	stmdacs	r0, {r0, r3, r4}
    3ed0:	000015d0 	ldrdeq	r1, [r0], -r0
    3ed4:	8c019201 	sfmhi	f1, 1, [r1], {1}
    3ed8:	49000008 	stmdbmi	r0, {r3}
    3edc:	1a000019 	bne	3f48 <__Stack_Size+0x3b48>
    3ee0:	0000031d 	andeq	r0, r0, sp, lsl r3
    3ee4:	3a019401 	bcc	68ef0 <__Stack_Size+0x68af0>
    3ee8:	75000000 	strvc	r0, [r0, #-0]
    3eec:	00000019 	andeq	r0, r0, r9, lsl r0
    3ef0:	01dd040b 	bicseq	r0, sp, fp, lsl #8
    3ef4:	3a270000 	bcc	9c3efc <__Stack_Size+0x9c3afc>
    3ef8:	01000014 	tsteq	r0, r4, lsl r0
    3efc:	005e03c9 	subseq	r0, lr, r9, asr #7
    3f00:	13440000 	movtne	r0, #16384	; 0x4000
    3f04:	00400800 	subeq	r0, r0, r0, lsl #16
    3f08:	9c010000 	stcls	0, cr0, [r1], {-0}
    3f0c:	000008bc 			; <UNDEFINED> instruction: 0x000008bc
    3f10:	0013521f 	andseq	r5, r3, pc, lsl r2
    3f14:	000d8d08 	andeq	r8, sp, r8, lsl #26
    3f18:	50011d00 	andpl	r1, r1, r0, lsl #26
    3f1c:	00003001 	andeq	r3, r0, r1
    3f20:	0014ad29 	andseq	sl, r4, r9, lsr #26
    3f24:	021b0100 	andseq	r0, fp, #0, 2
    3f28:	0008f601 	andeq	pc, r8, r1, lsl #12
    3f2c:	14332a00 	ldrtne	r2, [r3], #-2560	; 0xa00
    3f30:	1d010000 	stcne	0, cr0, [r1, #-0]
    3f34:	00020d02 	andeq	r0, r2, r2, lsl #26
    3f38:	154f2a00 	strbne	r2, [pc, #-2560]	; 3540 <__Stack_Size+0x3140>
    3f3c:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    3f40:	00003a02 	andeq	r3, r0, r2, lsl #20
    3f44:	093c2a00 	ldmdbeq	ip!, {r9, fp, sp}
    3f48:	1f010000 	svcne	0x00010000
    3f4c:	00003a02 	andeq	r3, r0, r2, lsl #20
    3f50:	14a82b00 	strtne	r2, [r8], #2816	; 0xb00
    3f54:	8b010000 	blhi	43f5c <__Stack_Size+0x43b5c>
    3f58:	af290002 	svcge	0x00290002
    3f5c:	01000014 	tsteq	r0, r4, lsl r0
    3f60:	78010297 	stmdavc	r1, {r0, r1, r2, r4, r7, r9}
    3f64:	2a000009 	bcs	3f90 <__Stack_Size+0x3b90>
    3f68:	00000949 	andeq	r0, r0, r9, asr #18
    3f6c:	64029901 	strvs	r9, [r2], #-2305	; 0x901
    3f70:	2a000002 	bcs	3f80 <__Stack_Size+0x3b80>
    3f74:	00001433 	andeq	r1, r0, r3, lsr r4
    3f78:	0d029a01 	vstreq	s18, [r2, #-4]
    3f7c:	2a000002 	bcs	3f8c <__Stack_Size+0x3b8c>
    3f80:	00001798 	muleq	r0, r8, r7
    3f84:	3a029b01 	bcc	aab90 <__Stack_Size+0xaa790>
    3f88:	2a000000 	bcs	3f90 <__Stack_Size+0x3b90>
    3f8c:	0000174d 	andeq	r1, r0, sp, asr #14
    3f90:	3a029d01 	bcc	ab39c <__Stack_Size+0xaaf9c>
    3f94:	2a000000 	bcs	3f9c <__Stack_Size+0x3b9c>
    3f98:	00001453 	andeq	r1, r0, r3, asr r4
    3f9c:	3a029d01 	bcc	ab3a8 <__Stack_Size+0xaafa8>
    3fa0:	2a000000 	bcs	3fa8 <__Stack_Size+0x3ba8>
    3fa4:	0000031d 	andeq	r0, r0, sp, lsl r3
    3fa8:	3a029e01 	bcc	ab7b4 <__Stack_Size+0xab3b4>
    3fac:	2a000000 	bcs	3fb4 <__Stack_Size+0x3bb4>
    3fb0:	00000e39 	andeq	r0, r0, r9, lsr lr
    3fb4:	3a029e01 	bcc	ab7c0 <__Stack_Size+0xab3c0>
    3fb8:	2c000000 	stccs	0, cr0, [r0], {-0}
    3fbc:	00000969 	andeq	r0, r0, r9, ror #18
    3fc0:	0014bb2a 	andseq	fp, r4, sl, lsr #22
    3fc4:	02a90100 	adceq	r0, r9, #0, 2
    3fc8:	0000005e 	andeq	r0, r0, lr, asr r0
    3fcc:	942a2d00 	strtls	r2, [sl], #-3328	; 0xd00
    3fd0:	01000002 	tsteq	r0, r2
    3fd4:	006f0325 	rsbeq	r0, pc, r5, lsr #6
    3fd8:	00000000 	andeq	r0, r0, r0
    3fdc:	00137123 	andseq	r7, r3, r3, lsr #2
    3fe0:	034c0100 	movteq	r0, #49408	; 0xc100
    3fe4:	0000005e 	andeq	r0, r0, lr, asr r0
    3fe8:	08001384 	stmdaeq	r0, {r2, r7, r8, r9, ip}
    3fec:	000002dc 	ldrdeq	r0, [r0], -ip
    3ff0:	0ae69c01 	beq	ff9aaffc <BootRAM+0xe91b79d>
    3ff4:	042e0000 	strteq	r0, [lr], #-0
    3ff8:	b0034f01 	andlt	r4, r3, r1, lsl #30
    3ffc:	2f000009 	svccs	0x00000009
    4000:	51010062 	tstpl	r1, r2, rrx
    4004:	0001d703 	andeq	sp, r1, r3, lsl #14
    4008:	00772f00 	rsbseq	r2, r7, r0, lsl #30
    400c:	e6035201 	str	r5, [r3], -r1, lsl #4
    4010:	0000000a 	andeq	r0, r0, sl
    4014:	0017341a 	andseq	r3, r7, sl, lsl r4
    4018:	03530100 	cmpeq	r3, #0, 2
    401c:	00000992 	muleq	r0, r2, r9
    4020:	000019a6 	andeq	r1, r0, r6, lsr #19
    4024:	0008bc30 	andeq	fp, r8, r0, lsr ip
    4028:	0013ca00 	andseq	ip, r3, r0, lsl #20
    402c:	0000c408 	andeq	ip, r0, r8, lsl #8
    4030:	03670100 	cmneq	r7, #0, 2
    4034:	00000a40 	andeq	r0, r0, r0, asr #20
    4038:	0013ca17 	andseq	ip, r3, r7, lsl sl
    403c:	0000c408 	andeq	ip, r0, r8, lsl #8
    4040:	08c93100 	stmiaeq	r9, {r8, ip, sp}^
    4044:	19c90000 	stmibne	r9, {}^	; <UNPREDICTABLE>
    4048:	d5310000 	ldrle	r0, [r1, #-0]!
    404c:	72000008 	andvc	r0, r0, #8
    4050:	3100001a 	tstcc	r0, sl, lsl r0
    4054:	000008e1 	andeq	r0, r0, r1, ror #17
    4058:	00001a85 	andeq	r1, r0, r5, lsl #21
    405c:	0008ed32 	andeq	lr, r8, r2, lsr sp
    4060:	00148800 	andseq	r8, r4, r0, lsl #16
    4064:	13da2208 	bicsne	r2, sl, #8, 4	; 0x80000000
    4068:	06810800 	streq	r0, [r1], r0, lsl #16
    406c:	141c0000 	ldrne	r0, [ip], #-0
    4070:	1a080014 	bne	2040c8 <__Stack_Size+0x203cc8>
    4074:	1d00000a 	stcne	0, cr0, [r0, #-40]	; 0xffffffd8
    4078:	74025001 	strvc	r5, [r2], #-1
    407c:	2a220000 	bcs	884084 <__Stack_Size+0x883c84>
    4080:	2b080014 	blcs	2040d8 <__Stack_Size+0x203cd8>
    4084:	22000008 	andcs	r0, r0, #8
    4088:	08001446 	stmdaeq	r0, {r1, r2, r6, sl, ip}
    408c:	000006be 			; <UNDEFINED> instruction: 0x000006be
    4090:	00145422 	andseq	r5, r4, r2, lsr #8
    4094:	00069608 	andeq	r9, r6, r8, lsl #12
    4098:	14662200 	strbtne	r2, [r6], #-512	; 0x200
    409c:	079c0800 	ldreq	r0, [ip, r0, lsl #16]
    40a0:	00000000 	andeq	r0, r0, r0
    40a4:	0008f633 	andeq	pc, r8, r3, lsr r6	; <UNPREDICTABLE>
    40a8:	00148e00 	andseq	r8, r4, r0, lsl #28
    40ac:	00056008 	andeq	r6, r5, r8
    40b0:	036c0100 	cmneq	ip, #0, 2
    40b4:	00000adc 	ldrdeq	r0, [r0], -ip
    40b8:	00056034 	andeq	r6, r5, r4, lsr r0
    40bc:	09033100 	stmdbeq	r3, {r8, ip, sp}
    40c0:	1aa40000 	bne	fe9040c8 <BootRAM+0xd874869>
    40c4:	0f310000 	svceq	0x00310000
    40c8:	3b000009 	blcc	40f4 <__Stack_Size+0x3cf4>
    40cc:	3100001b 	tstcc	r0, fp, lsl r0
    40d0:	0000091b 	andeq	r0, r0, fp, lsl r9
    40d4:	00001b7b 	andeq	r1, r0, fp, ror fp
    40d8:	00092731 	andeq	r2, r9, r1, lsr r7
    40dc:	001ba400 	andseq	sl, fp, r0, lsl #8
    40e0:	09333100 	ldmdbeq	r3!, {r8, ip, sp}
    40e4:	1bb70000 	blne	fedc40ec <BootRAM+0xdd3488d>
    40e8:	3f310000 	svccc	0x00310000
    40ec:	d2000009 	andle	r0, r0, #9
    40f0:	3100001b 	tstcc	r0, fp, lsl r0
    40f4:	0000094b 	andeq	r0, r0, fp, asr #18
    40f8:	00001bf2 	strdeq	r1, [r0], -r2
    40fc:	00149815 	andseq	r9, r4, r5, lsl r8
    4100:	00002c08 	andeq	r2, r0, r8, lsl #24
    4104:	000aaf00 	andeq	sl, sl, r0, lsl #30
    4108:	095c3100 	ldmdbeq	ip, {r8, ip, sp}^
    410c:	1c050000 	stcne	0, cr0, [r5], {-0}
    4110:	15000000 	strne	r0, [r0, #-0]
    4114:	080015cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, ip}
    4118:	00000060 	andeq	r0, r0, r0, rrx
    411c:	00000ace 	andeq	r0, r0, lr, asr #21
    4120:	00096a35 	andeq	r6, r9, r5, lsr sl
    4124:	6c910200 	lfmvs	f0, 4, [r1], {0}
    4128:	00162a22 	andseq	r2, r6, r2, lsr #20
    412c:	0005b608 	andeq	fp, r5, r8, lsl #12
    4130:	8e360000 	cdphi	0, 3, cr0, cr6, cr0, {0}
    4134:	1d080015 	stcne	0, cr0, [r8, #-84]	; 0xffffffac
    4138:	74025001 	strvc	r5, [r2], #-1
    413c:	00000000 	andeq	r0, r0, r0
    4140:	00163c22 	andseq	r3, r6, r2, lsr #24
    4144:	00089208 	andeq	r9, r8, r8, lsl #4
    4148:	040b0000 	streq	r0, [fp], #-0
    414c:	0000004c 	andeq	r0, r0, ip, asr #32
    4150:	00178029 	andseq	r8, r7, r9, lsr #32
    4154:	01a70100 			; <UNDEFINED> instruction: 0x01a70100
    4158:	000b2c01 	andeq	r2, fp, r1, lsl #24
    415c:	17392a00 	ldrne	r2, [r9, -r0, lsl #20]!
    4160:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    4164:	00067b01 	andeq	r7, r6, r1, lsl #22
    4168:	14fb2a00 	ldrbtne	r2, [fp], #2560	; 0xa00
    416c:	aa010000 	bge	44174 <__Stack_Size+0x43d74>
    4170:	00003a01 	andeq	r3, r0, r1, lsl #20
    4174:	4c2a2d00 	stcmi	13, cr2, [sl], #-0
    4178:	01000014 	tsteq	r0, r4, lsl r0
    417c:	01d701b0 	ldrheq	r0, [r7, #16]
    4180:	012a0000 	teqeq	sl, r0
    4184:	01000015 	tsteq	r0, r5, lsl r0
    4188:	003a01b1 	ldrhteq	r0, [sl], -r1
    418c:	00000000 	andeq	r0, r0, r0
    4190:	0013bb23 	andseq	fp, r3, r3, lsr #22
    4194:	03a00100 	moveq	r0, #0, 2
    4198:	0000005e 	andeq	r0, r0, lr, asr r0
    419c:	08001660 	stmdaeq	r0, {r5, r6, r9, sl, ip}
    41a0:	000000c8 	andeq	r0, r0, r8, asr #1
    41a4:	0bfe9c01 	bleq	fffab1b0 <BootRAM+0xef1b951>
    41a8:	3c1a0000 	ldccc	0, cr0, [sl], {-0}
    41ac:	01000009 	tsteq	r0, r9
    41b0:	003a03a2 	eorseq	r0, sl, r2, lsr #7
    41b4:	1c2f0000 	stcne	0, cr0, [pc], #-0	; 41bc <__Stack_Size+0x3dbc>
    41b8:	ec300000 	ldc	0, cr0, [r0], #-0
    41bc:	7000000a 	andvc	r0, r0, sl
    41c0:	7e080016 	mcrvc	0, 0, r0, cr8, cr6, {0}
    41c4:	01000000 	mrseq	r0, (UNDEF: 0)
    41c8:	0bf403a6 	bleq	ffd05068 <BootRAM+0xec75809>
    41cc:	70170000 	andsvc	r0, r7, r0
    41d0:	7e080016 	mcrvc	0, 0, r0, cr8, cr6, {0}
    41d4:	31000000 	mrscc	r0, (UNDEF: 0)
    41d8:	00000af9 	strdeq	r0, [r0], -r9
    41dc:	00001c7c 	andeq	r1, r0, ip, ror ip
    41e0:	000b0531 	andeq	r0, fp, r1, lsr r5
    41e4:	001c9100 	andseq	r9, ip, r0, lsl #2
    41e8:	16781500 	ldrbtne	r1, [r8], -r0, lsl #10
    41ec:	002a0800 	eoreq	r0, sl, r0, lsl #16
    41f0:	0bde0000 	bleq	ff7841f8 <BootRAM+0xe6f4999>
    41f4:	12310000 	eorsne	r0, r1, #0
    41f8:	a400000b 	strge	r0, [r0], #-11
    41fc:	3100001c 	tstcc	r0, ip, lsl r0
    4200:	00000b1e 	andeq	r0, r0, lr, lsl fp
    4204:	00001cc2 	andeq	r1, r0, r2, asr #25
    4208:	0016841c 	andseq	r8, r6, ip, lsl r4
    420c:	000bb408 	andeq	fp, fp, r8, lsl #8
    4210:	50011d00 	andpl	r1, r1, r0, lsl #26
    4214:	00007602 	andeq	r7, r0, r2, lsl #12
    4218:	0016981e 	andseq	r9, r6, lr, lsl r8
    421c:	000db608 	andeq	fp, sp, r8, lsl #12
    4220:	000bc700 	andeq	ip, fp, r0, lsl #14
    4224:	50011d00 	andpl	r1, r1, r0, lsl #26
    4228:	1f003001 	svcne	0x00003001
    422c:	080016a2 	stmdaeq	r0, {r1, r5, r7, r9, sl, ip}
    4230:	00000dcc 	andeq	r0, r0, ip, asr #27
    4234:	0252011d 	subseq	r0, r2, #1073741831	; 0x40000007
    4238:	011d0076 	tsteq	sp, r6, ror r0
    423c:	00770250 	rsbseq	r0, r7, r0, asr r2
    4240:	b61f0000 	ldrlt	r0, [pc], -r0
    4244:	4d080016 	stcmi	0, cr0, [r8, #-88]	; 0xffffffa8
    4248:	1d00000d 	stcne	0, cr0, [r0, #-52]	; 0xffffffcc
    424c:	30015101 	andcc	r5, r1, r1, lsl #2
    4250:	0150011d 	cmpeq	r0, sp, lsl r1
    4254:	00000030 	andeq	r0, r0, r0, lsr r0
    4258:	00170e37 	andseq	r0, r7, r7, lsr lr
    425c:	00089208 	andeq	r9, r8, r8, lsl #4
    4260:	21380000 	teqcs	r8, r0
    4264:	01000000 	mrseq	r0, (UNDEF: 0)
    4268:	172803dd 			; <UNDEFINED> instruction: 0x172803dd
    426c:	00380800 	eorseq	r0, r8, r0, lsl #16
    4270:	9c010000 	stcls	0, cr0, [r1], {-0}
    4274:	00000c43 	andeq	r0, r0, r3, asr #24
    4278:	6c615639 	stclvs	6, cr5, [r1], #-228	; 0xffffff1c
    427c:	03dd0100 	bicseq	r0, sp, #0, 2
    4280:	0000005e 	andeq	r0, r0, lr, asr r0
    4284:	00001cf5 	strdeq	r1, [r0], -r5
    4288:	01006924 	tsteq	r0, r4, lsr #18
    428c:	003a03df 	ldrsbteq	r0, [sl], -pc
    4290:	1d160000 	ldcne	0, cr0, [r6, #-0]
    4294:	6e240000 	cdpvs	0, 2, cr0, cr4, cr0, {0}
    4298:	01005045 	tsteq	r0, r5, asr #32
    429c:	003a03e0 	eorseq	r0, sl, r0, ror #7
    42a0:	1d350000 	ldcne	0, cr0, [r5, #-0]
    42a4:	23000000 	movwcs	r0, #0
    42a8:	000013af 	andeq	r1, r0, pc, lsr #7
    42ac:	5e037801 	cdppl	8, 0, cr7, cr3, cr1, {0}
    42b0:	60000000 	andvs	r0, r0, r0
    42b4:	5c080017 	stcpl	0, cr0, [r8], {23}
    42b8:	01000000 	mrseq	r0, (UNDEF: 0)
    42bc:	000c899c 	muleq	ip, ip, r9
    42c0:	093c1a00 	ldmdbeq	ip!, {r9, fp, ip}
    42c4:	7a010000 	bvc	442cc <__Stack_Size+0x43ecc>
    42c8:	00003a03 	andeq	r3, r0, r3, lsl #20
    42cc:	001d4800 	andseq	r4, sp, r0, lsl #16
    42d0:	17742200 	ldrbne	r2, [r4, -r0, lsl #4]!
    42d4:	05b60800 	ldreq	r0, [r6, #2048]!	; 0x800
    42d8:	90220000 	eorls	r0, r2, r0
    42dc:	fe080017 	mcr2	0, 0, r0, cr8, cr7, {0}
    42e0:	3700000b 	strcc	r0, [r0, -fp]
    42e4:	080017ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9, sl, ip}
    42e8:	00000892 	muleq	r0, r2, r8
    42ec:	15153a00 	ldrne	r3, [r5, #-2560]	; 0xa00
    42f0:	f1010000 	setend	le
    42f4:	00000003 	andeq	r0, r0, r3
    42f8:	00000200 	andeq	r0, r0, r0, lsl #4
    42fc:	3b9c0100 	blcc	fe704704 <BootRAM+0xd674ea5>
    4300:	000005e7 	andeq	r0, r0, r7, ror #11
    4304:	046bec04 	strbteq	lr, [fp], #-3076	; 0xc04
    4308:	463b0000 	ldrtmi	r0, [fp], -r0
    430c:	04000002 	streq	r0, [r0], #-2
    4310:	00029aee 	andeq	r9, r2, lr, ror #21
    4314:	13803b00 	orrne	r3, r0, #0, 22
    4318:	f2040000 	vhadd.s8	d0, d4, d0
    431c:	0000004c 	andeq	r0, r0, ip, asr #32
    4320:	00138b3b 	andseq	r8, r3, fp, lsr fp
    4324:	4cf30400 	cfldrdmi	mvd0, [r3]
    4328:	3b000000 	blcc	4330 <__Stack_Size+0x3f30>
    432c:	0000027c 	andeq	r0, r0, ip, ror r2
    4330:	0cd22205 	lfmeq	f2, 2, [r2], {5}
    4334:	040b0000 	streq	r0, [fp], #-0
    4338:	00000381 	andeq	r0, r0, r1, lsl #7
    433c:	00052f3b 	andeq	r2, r5, fp, lsr pc
    4340:	e3250500 	teq	r5, #0, 10
    4344:	0b00000c 	bleq	437c <__Stack_Size+0x3f7c>
    4348:	00046b04 	andeq	r6, r4, r4, lsl #22
    434c:	13ed3b00 	mvnne	r3, #0, 22
    4350:	2a050000 	bcs	144358 <__Stack_Size+0x143f58>
    4354:	00000cf4 	strdeq	r0, [r0], -r4
    4358:	04ef040b 	strbteq	r0, [pc], #1035	; 4360 <__Stack_Size+0x3f60>
    435c:	5e3c0000 	cdppl	0, 3, cr0, cr12, cr0, {0}
    4360:	01000017 	tsteq	r0, r7, lsl r0
    4364:	0002e524 	andeq	lr, r2, r4, lsr #10
    4368:	06030500 	streq	r0, [r3], -r0, lsl #10
    436c:	3c200002 	stccc	0, cr0, [r0], #-8
    4370:	0000159a 	muleq	r0, sl, r5
    4374:	00942501 	addseq	r2, r4, r1, lsl #10
    4378:	03050000 	movweq	r0, #20480	; 0x5000
    437c:	20000a20 	andcs	r0, r0, r0, lsr #20
    4380:	0013123d 	andseq	r1, r3, sp, lsr r2
    4384:	02530700 	subseq	r0, r3, #0, 14
    4388:	0000004c 	andeq	r0, r0, ip, asr #32
    438c:	00000d32 	andeq	r0, r0, r2, lsr sp
    4390:	00005e0d 	andeq	r5, r0, sp, lsl #28
    4394:	e73e0000 	ldr	r0, [lr, -r0]!
    4398:	06000014 			; <UNDEFINED> instruction: 0x06000014
    439c:	000d4d19 	andeq	r4, sp, r9, lsl sp
    43a0:	01d70d00 	bicseq	r0, r7, r0, lsl #26
    43a4:	4c0d0000 	stcmi	0, cr0, [sp], {-0}
    43a8:	0d000000 	stceq	0, cr0, [r0, #-0]
    43ac:	0000004c 	andeq	r0, r0, ip, asr #32
    43b0:	11e43f00 	mvnne	r3, r0, lsl #30
    43b4:	56070000 	strpl	r0, [r7], -r0
    43b8:	000d6402 	andeq	r6, sp, r2, lsl #8
    43bc:	005e0d00 	subseq	r0, lr, r0, lsl #26
    43c0:	4c0d0000 	stcmi	0, cr0, [sp], {-0}
    43c4:	00000000 	andeq	r0, r0, r0
    43c8:	00131e3f 	andseq	r1, r3, pc, lsr lr
    43cc:	024e0700 	subeq	r0, lr, #0, 14
    43d0:	00000d76 	andeq	r0, r0, r6, ror sp
    43d4:	00005e0d 	andeq	r5, r0, sp, lsl #28
    43d8:	2b3f0000 	blcs	fc43e0 <__Stack_Size+0xfc3fe0>
    43dc:	07000013 	smladeq	r0, r3, r0, r0
    43e0:	0d8d023a 	sfmeq	f0, 4, [sp, #232]	; 0xe8
    43e4:	5e0d0000 	cdppl	0, 0, cr0, cr13, cr0, {0}
    43e8:	0d000000 	stceq	0, cr0, [r0, #-0]
    43ec:	0000004c 	andeq	r0, r0, ip, asr #32
    43f0:	078d3f00 	streq	r3, [sp, r0, lsl #30]
    43f4:	57070000 	strpl	r0, [r7, -r0]
    43f8:	000da402 	andeq	sl, sp, r2, lsl #8
    43fc:	005e0d00 	subseq	r0, lr, r0, lsl #26
    4400:	4c0d0000 	stcmi	0, cr0, [sp], {-0}
    4404:	00000000 	andeq	r0, r0, r0
    4408:	00106b3f 	andseq	r6, r0, pc, lsr fp
    440c:	024d0700 	subeq	r0, sp, #0, 14
    4410:	00000db6 			; <UNDEFINED> instruction: 0x00000db6
    4414:	00005e0d 	andeq	r5, r0, sp, lsl #28
    4418:	f53d0000 			; <UNDEFINED> instruction: 0xf53d0000
    441c:	07000010 	smladeq	r0, r0, r0, r0
    4420:	004c0254 	subeq	r0, ip, r4, asr r2
    4424:	0dcc0000 	stcleq	0, cr0, [ip]
    4428:	5e0d0000 	cdppl	0, 0, cr0, cr13, cr0, {0}
    442c:	00000000 	andeq	r0, r0, r0
    4430:	00169440 	andseq	r9, r6, r0, asr #8
    4434:	0d1a0600 	ldceq	6, cr0, [sl, #-0]
    4438:	000001d7 	ldrdeq	r0, [r0], -r7
    443c:	00004c0d 	andeq	r4, r0, sp, lsl #24
    4440:	004c0d00 	subeq	r0, ip, r0, lsl #26
    4444:	00000000 	andeq	r0, r0, r0
    4448:	00000170 	andeq	r0, r0, r0, ror r1
    444c:	13fb0004 	mvnsne	r0, #4
    4450:	01040000 	mrseq	r0, (UNDEF: 4)
    4454:	00000158 	andeq	r0, r0, r8, asr r1
    4458:	0017d401 	andseq	sp, r7, r1, lsl #8
    445c:	00086200 	andeq	r6, r8, r0, lsl #4
    4460:	00060000 	andeq	r0, r6, r0
    4464:	00000000 	andeq	r0, r0, r0
    4468:	0013f700 	andseq	pc, r3, r0, lsl #14
    446c:	05040200 	streq	r0, [r4, #-512]	; 0x200
    4470:	000001f6 	strdeq	r0, [r0], -r6
    4474:	98050202 	stmdals	r5, {r1, r9}
    4478:	02000006 	andeq	r0, r0, #6
    447c:	06440601 	strbeq	r0, [r4], -r1, lsl #12
    4480:	75030000 	strvc	r0, [r3, #-0]
    4484:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
    4488:	00004524 	andeq	r4, r0, r4, lsr #10
    448c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    4490:	0000037b 	andeq	r0, r0, fp, ror r3
    4494:	36317503 	ldrtcc	r7, [r1], -r3, lsl #10
    4498:	57250200 	strpl	r0, [r5, -r0, lsl #4]!
    449c:	02000000 	andeq	r0, r0, #0
    44a0:	03d70702 	bicseq	r0, r7, #524288	; 0x80000
    44a4:	75030000 	strvc	r0, [r3, #-0]
    44a8:	26020038 			; <UNDEFINED> instruction: 0x26020038
    44ac:	00000068 	andeq	r0, r0, r8, rrx
    44b0:	42080102 	andmi	r0, r8, #-2147483648	; 0x80000000
    44b4:	04000006 	streq	r0, [r0], #-6
    44b8:	00005e04 	andeq	r5, r0, r4, lsl #28
    44bc:	14e70500 	strbtne	r0, [r7], #1280	; 0x500
    44c0:	23010000 	movwcs	r0, #4096	; 0x1000
    44c4:	080017bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, ip}
    44c8:	00000030 	andeq	r0, r0, r0, lsr r0
    44cc:	00fd9c01 	rscseq	r9, sp, r1, lsl #24
    44d0:	ee060000 	cdp	0, 0, cr0, cr6, cr0, {0}
    44d4:	01000017 	tsteq	r0, r7, lsl r0
    44d8:	00006f23 	andeq	r6, r0, r3, lsr #30
    44dc:	001d8e00 	andseq	r8, sp, r0, lsl #28
    44e0:	17fd0600 	ldrbne	r0, [sp, r0, lsl #12]!
    44e4:	23010000 	movwcs	r0, #4096	; 0x1000
    44e8:	0000004c 	andeq	r0, r0, ip, asr #32
    44ec:	00001dd3 	ldrdeq	r1, [r0], -r3
    44f0:	0017e606 	andseq	lr, r7, r6, lsl #12
    44f4:	4c230100 	stfmis	f0, [r3], #-0
    44f8:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    44fc:	0700001d 	smladeq	r0, sp, r0, r0
    4500:	2501006e 	strcs	r0, [r1, #-110]	; 0x6e
    4504:	0000003a 	andeq	r0, r0, sl, lsr r0
    4508:	69085201 	stmdbvs	r8, {r0, r9, ip, lr}
    450c:	3a260100 	bcc	984914 <__Stack_Size+0x984514>
    4510:	15000000 	strne	r0, [r0, #-0]
    4514:	0900001e 	stmdbeq	r0, {r1, r2, r3, r4}
    4518:	000017ce 	andeq	r1, r0, lr, asr #15
    451c:	003a2601 	eorseq	r2, sl, r1, lsl #12
    4520:	1e740000 	cdpne	0, 7, cr0, cr4, cr0, {0}
    4524:	f7090000 			; <UNDEFINED> instruction: 0xf7090000
    4528:	01000017 	tsteq	r0, r7, lsl r0
    452c:	00003a26 	andeq	r3, r0, r6, lsr #20
    4530:	001eab00 	andseq	sl, lr, r0, lsl #22
    4534:	18090900 	stmdane	r9, {r8, fp}
    4538:	27010000 	strcs	r0, [r1, -r0]
    453c:	000000fd 	strdeq	r0, [r0], -sp
    4540:	00001ecf 	andeq	r1, r0, pc, asr #29
    4544:	4c040400 	cfstrsmi	mvf0, [r4], {-0}
    4548:	05000000 	streq	r0, [r0, #-0]
    454c:	00001694 	muleq	r0, r4, r6
    4550:	17ec3c01 	strbne	r3, [ip, r1, lsl #24]!
    4554:	00240800 	eoreq	r0, r4, r0, lsl #16
    4558:	9c010000 	stcls	0, cr0, [r1], {-0}
    455c:	0000016d 	andeq	r0, r0, sp, ror #2
    4560:	0017ee06 	andseq	lr, r7, r6, lsl #28
    4564:	6f3c0100 	svcvs	0x003c0100
    4568:	0a000000 	beq	4570 <__Stack_Size+0x4170>
    456c:	0600001f 			; <UNDEFINED> instruction: 0x0600001f
    4570:	000017fd 	strdeq	r1, [r0], -sp
    4574:	004c3c01 	subeq	r3, ip, r1, lsl #24
    4578:	1f450000 	svcne	0x00450000
    457c:	e6060000 	str	r0, [r6], -r0
    4580:	01000017 	tsteq	r0, r7, lsl r0
    4584:	00004c3c 	andeq	r4, r0, ip, lsr ip
    4588:	001f6600 	andseq	r6, pc, r0, lsl #12
    458c:	006e0700 	rsbeq	r0, lr, r0, lsl #14
    4590:	003a3e01 	eorseq	r3, sl, r1, lsl #28
    4594:	52010000 	andpl	r0, r1, #0
    4598:	01006908 	tsteq	r0, r8, lsl #18
    459c:	00003a3f 	andeq	r3, r0, pc, lsr sl
    45a0:	001f8700 	andseq	r8, pc, r0, lsl #14
    45a4:	18090900 	stmdane	r9, {r8, fp}
    45a8:	40010000 	andmi	r0, r1, r0
    45ac:	0000016d 	andeq	r0, r0, sp, ror #2
    45b0:	00001fe6 	andeq	r1, r0, r6, ror #31
    45b4:	3a040400 	bcc	1055bc <__Stack_Size+0x1051bc>
    45b8:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	10001101 	andne	r1, r0, r1, lsl #2
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	03065506 	movweq	r5, #25862	; 0x6506
       8:	25081b08 	strcs	r1, [r8, #-2824]	; 0xb08
       c:	00051308 	andeq	r1, r5, r8, lsl #6
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      10:	11010000 	mrsne	r0, (UNDEF: 1)
      14:	11061000 	mrsne	r1, (UNDEF: 6)
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	03011201 	movweq	r1, #4609	; 0x1201
      1c:	25081b08 	strcs	r1, [r8, #-2824]	; 0xb08
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	00051308 	andeq	r1, r5, r8, lsl #6
      24:	11010000 	mrsne	r0, (UNDEF: 1)
      28:	130e2501 	movwne	r2, #58625	; 0xe501
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	1b0e030b 	blne	380c60 <__Stack_Size+0x380860>
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	1117550e 	tstne	r7, lr, lsl #10
      34:	00171001 	andseq	r1, r7, r1
      38:	00240200 	eoreq	r0, r4, r0, lsl #4

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	0b3e0b0b 	bleq	f82c70 <__Stack_Size+0xf82870>

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	00000e03 	andeq	r0, r0, r3, lsl #28
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	03001603 	movweq	r1, #1539	; 0x603
      48:	3b0b3a08 	blcc	2ce870 <__Stack_Size+0x2ce470>
      4c:	0013490b 	andseq	r4, r3, fp, lsl #18

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	00160400 	andseq	r0, r6, r0, lsl #8
      54:	0b3a0e03 	bleq	e83868 <__Stack_Size+0xe83468>
      58:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      5c:	35050000 	strcc	r0, [r5, #-0]
      60:	00134900 	andseq	r4, r3, r0, lsl #18
      64:	01040600 	tsteq	r4, r0, lsl #12
      68:	0b3a0b0b 	bleq	e82c9c <__Stack_Size+0xe8289c>
      6c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
      70:	28070000 	stmdacs	r7, {}	; <UNPREDICTABLE>
      74:	1c0e0300 	stcne	3, cr0, [lr], {-0}
      78:	0800000d 	stmdaeq	r0, {r0, r2, r3}
      7c:	0b0b0113 	bleq	2c04d0 <__Stack_Size+0x2c00d0>
      80:	0b3b0b3a 	bleq	ec2d70 <__Stack_Size+0xec2970>
      84:	00001301 	andeq	r1, r0, r1, lsl #6
      88:	03000d09 	movweq	r0, #3337	; 0xd09
      8c:	3b0b3a0e 	blcc	2ce8cc <__Stack_Size+0x2ce4cc>
      90:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
      94:	0a00000b 	beq	c8 <_Minimum_Stack_Size-0x38>
      98:	0b0b000f 	bleq	2c00dc <__Stack_Size+0x2bfcdc>
      9c:	00001349 	andeq	r1, r0, r9, asr #6
      a0:	2700150b 	strcs	r1, [r0, -fp, lsl #10]
      a4:	0c000019 	stceq	0, cr0, [r0], {25}
      a8:	0e030104 	adfeqs	f0, f3, f4
      ac:	0b3a0b0b 	bleq	e82ce0 <__Stack_Size+0xe828e0>
      b0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
      b4:	130d0000 	movwne	r0, #53248	; 0xd000
      b8:	0b0e0301 	bleq	380cc4 <__Stack_Size+0x3808c4>
      bc:	3b0b3a0b 	blcc	2ce8f0 <__Stack_Size+0x2ce4f0>
      c0:	0013010b 	andseq	r0, r3, fp, lsl #2
      c4:	01150e00 	tsteq	r5, r0, lsl #28
      c8:	13491927 	movtne	r1, #39207	; 0x9927
      cc:	00001301 	andeq	r1, r0, r1, lsl #6
      d0:	4900050f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sl}
      d4:	10000013 	andne	r0, r0, r3, lsl r0
      d8:	08030113 	stmdaeq	r3, {r0, r1, r4, r8}
      dc:	0b3a0b0b 	bleq	e82d10 <__Stack_Size+0xe82910>
      e0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
      e4:	0d110000 	ldceq	0, cr0, [r1, #-0]
      e8:	3a080300 	bcc	200cf0 <__Stack_Size+0x2008f0>
      ec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      f0:	000b3813 	andeq	r3, fp, r3, lsl r8
      f4:	01171200 	tsteq	r7, r0, lsl #4
      f8:	0b3a0b0b 	bleq	e82d2c <__Stack_Size+0xe8292c>
      fc:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     100:	0d130000 	ldceq	0, cr0, [r3, #-0]
     104:	3a080300 	bcc	200d0c <__Stack_Size+0x20090c>
     108:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     10c:	14000013 	strne	r0, [r0], #-19
     110:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     114:	0b3a0e03 	bleq	e83928 <__Stack_Size+0xe83528>
     118:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     11c:	0b201349 	bleq	804e48 <__Stack_Size+0x804a48>
     120:	00001301 	andeq	r1, r0, r1, lsl #6
     124:	03000515 	movweq	r0, #1301	; 0x515
     128:	3b0b3a0e 	blcc	2ce968 <__Stack_Size+0x2ce568>
     12c:	00134905 	andseq	r4, r3, r5, lsl #18
     130:	002e1600 	eoreq	r1, lr, r0, lsl #12
     134:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     138:	0b3b0b3a 	bleq	ec2e28 <__Stack_Size+0xec2a28>
     13c:	0b201927 	bleq	8065e0 <__Stack_Size+0x8061e0>
     140:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
     144:	03193f00 	tsteq	r9, #0, 30
     148:	3b0b3a0e 	blcc	2ce988 <__Stack_Size+0x2ce588>
     14c:	1119270b 	tstne	r9, fp, lsl #14
     150:	40061201 	andmi	r1, r6, r1, lsl #4
     154:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     158:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
     15c:	03193f00 	tsteq	r9, #0, 30
     160:	3b0b3a0e 	blcc	2ce9a0 <__Stack_Size+0x2ce5a0>
     164:	11192705 	tstne	r9, r5, lsl #14
     168:	40061201 	andmi	r1, r6, r1, lsl #4
     16c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     170:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
     174:	03193f01 	tsteq	r9, #1, 30
     178:	3b0b3a0e 	blcc	2ce9b8 <__Stack_Size+0x2ce5b8>
     17c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     180:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     184:	97184006 	ldrls	r4, [r8, -r6]
     188:	13011942 	movwne	r1, #6466	; 0x1942
     18c:	051a0000 	ldreq	r0, [sl, #-0]
     190:	3a0e0300 	bcc	380d98 <__Stack_Size+0x380998>
     194:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     198:	00170213 	andseq	r0, r7, r3, lsl r2
     19c:	00051b00 	andeq	r1, r5, r0, lsl #22
     1a0:	0b3a0e03 	bleq	e839b4 <__Stack_Size+0xe835b4>
     1a4:	1349053b 	movtne	r0, #38203	; 0x953b
     1a8:	00001802 	andeq	r1, r0, r2, lsl #16
     1ac:	3f012e1c 	svccc	0x00012e1c
     1b0:	3a0e0319 	bcc	380e1c <__Stack_Size+0x380a1c>
     1b4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     1b8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     1bc:	97184006 	ldrls	r4, [r8, -r6]
     1c0:	13011942 	movwne	r1, #6466	; 0x1942
     1c4:	0b1d0000 	bleq	7401cc <__Stack_Size+0x73fdcc>
     1c8:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     1cc:	00130106 	andseq	r0, r3, r6, lsl #2
     1d0:	00341e00 	eorseq	r1, r4, r0, lsl #28
     1d4:	0b3a0e03 	bleq	e839e8 <__Stack_Size+0xe835e8>
     1d8:	1349053b 	movtne	r0, #38203	; 0x953b
     1dc:	00001702 	andeq	r1, r0, r2, lsl #14
     1e0:	0182891f 	orreq	r8, r2, pc, lsl r9
     1e4:	31011100 	mrscc	r1, (UNDEF: 17)
     1e8:	20000013 	andcs	r0, r0, r3, lsl r0
     1ec:	01018289 	smlabbeq	r1, r9, r2, r8
     1f0:	13310111 	teqne	r1, #1073741828	; 0x40000004
     1f4:	00001301 	andeq	r1, r0, r1, lsl #6
     1f8:	01828a21 	orreq	r8, r2, r1, lsr #20
     1fc:	91180200 	tstls	r8, r0, lsl #4
     200:	00001842 	andeq	r1, r0, r2, asr #16
     204:	01828922 	orreq	r8, r2, r2, lsr #18
     208:	95011101 	strls	r1, [r1, #-257]	; 0x101
     20c:	13311942 	teqne	r1, #1081344	; 0x108000
     210:	89230000 	stmdbhi	r3!, {}	; <UNPREDICTABLE>
     214:	11010182 	smlabbne	r1, r2, r1, r0
     218:	24000001 	strcs	r0, [r0], #-1
     21c:	08030005 	stmdaeq	r3, {r0, r2}
     220:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     224:	17021349 	strne	r1, [r2, -r9, asr #6]
     228:	89250000 	stmdbhi	r5!, {}	; <UNPREDICTABLE>
     22c:	11000182 	smlabbne	r0, r2, r1, r0
     230:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
     234:	00001331 	andeq	r1, r0, r1, lsr r3
     238:	03003426 	movweq	r3, #1062	; 0x426
     23c:	3b0b3a0e 	blcc	2cea7c <__Stack_Size+0x2ce67c>
     240:	00134905 	andseq	r4, r3, r5, lsl #18
     244:	012e2700 	teqeq	lr, r0, lsl #14
     248:	01111331 	tsteq	r1, r1, lsr r3
     24c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     250:	01194297 			; <UNDEFINED> instruction: 0x01194297
     254:	28000013 	stmdacs	r0, {r0, r1, r4}
     258:	13310005 	teqne	r1, #5
     25c:	00001702 	andeq	r1, r0, r2, lsl #14
     260:	11010b29 	tstne	r1, r9, lsr #22
     264:	00061201 	andeq	r1, r6, r1, lsl #4
     268:	012e2a00 	teqeq	lr, r0, lsl #20
     26c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     270:	0b3b0b3a 	bleq	ec2f60 <__Stack_Size+0xec2b60>
     274:	01111927 	tsteq	r1, r7, lsr #18
     278:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     27c:	01194297 			; <UNDEFINED> instruction: 0x01194297
     280:	2b000013 	blcs	2d4 <_Minimum_Stack_Size+0x1d4>
     284:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     288:	0b3b0b3a 	bleq	ec2f78 <__Stack_Size+0xec2b78>
     28c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     290:	1d2c0000 	stcne	0, cr0, [ip, #-0]
     294:	11133101 	tstne	r3, r1, lsl #2
     298:	58061201 	stmdapl	r6, {r0, r9, ip}
     29c:	010b590b 	tsteq	fp, fp, lsl #18
     2a0:	2d000013 	stccs	0, cr0, [r0, #-76]	; 0xffffffb4
     2a4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     2a8:	0b3b0b3a 	bleq	ec2f98 <__Stack_Size+0xec2b98>
     2ac:	17021349 	strne	r1, [r2, -r9, asr #6]
     2b0:	052e0000 	streq	r0, [lr, #-0]!
     2b4:	3a0e0300 	bcc	380ebc <__Stack_Size+0x380abc>
     2b8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     2bc:	00170213 	andseq	r0, r7, r3, lsl r2
     2c0:	012e2f00 	teqeq	lr, r0, lsl #30
     2c4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     2c8:	0b3b0b3a 	bleq	ec2fb8 <__Stack_Size+0xec2bb8>
     2cc:	13491927 	movtne	r1, #39207	; 0x9927
     2d0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     2d4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     2d8:	00130119 	andseq	r0, r3, r9, lsl r1
     2dc:	00343000 	eorseq	r3, r4, r0
     2e0:	0b3a0e03 	bleq	e83af4 <__Stack_Size+0xe836f4>
     2e4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     2e8:	00000b1c 	andeq	r0, r0, ip, lsl fp
     2ec:	3f002e31 	svccc	0x00002e31
     2f0:	3a0e0319 	bcc	380f5c <__Stack_Size+0x380b5c>
     2f4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     2f8:	11134919 	tstne	r3, r9, lsl r9
     2fc:	40061201 	andmi	r1, r6, r1, lsl #4
     300:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     304:	34320000 	ldrtcc	r0, [r2], #-0
     308:	3a0e0300 	bcc	380f10 <__Stack_Size+0x380b10>
     30c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     310:	00180213 	andseq	r0, r8, r3, lsl r2
     314:	82893300 	addhi	r3, r9, #0, 6
     318:	01110101 	tsteq	r1, r1, lsl #2
     31c:	00001331 	andeq	r1, r0, r1, lsr r3
     320:	3f012e34 	svccc	0x00012e34
     324:	3a0e0319 	bcc	380f90 <__Stack_Size+0x380b90>
     328:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     32c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     330:	96184006 	ldrls	r4, [r8], -r6
     334:	13011942 	movwne	r1, #6466	; 0x1942
     338:	34350000 	ldrtcc	r0, [r5], #-0
     33c:	3a0e0300 	bcc	380f44 <__Stack_Size+0x380b44>
     340:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     344:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     348:	36000018 			; <UNDEFINED> instruction: 0x36000018
     34c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     350:	0b3b0b3a 	bleq	ec3040 <__Stack_Size+0xec2c40>
     354:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     358:	0000193c 	andeq	r1, r0, ip, lsr r9
     35c:	49010137 	stmdbmi	r1, {r0, r1, r2, r4, r5, r8}
     360:	00130113 	andseq	r0, r3, r3, lsl r1
     364:	00213800 	eoreq	r3, r1, r0, lsl #16
     368:	0b2f1349 	bleq	bc5094 <__Stack_Size+0xbc4c94>
     36c:	24390000 	ldrtcs	r0, [r9], #-0
     370:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     374:	0008030b 	andeq	r0, r8, fp, lsl #6
     378:	00213a00 	eoreq	r3, r1, r0, lsl #20
     37c:	2e3b0000 	cdpcs	0, 3, cr0, cr11, cr0, {0}
     380:	03193f00 	tsteq	r9, #0, 30
     384:	3b0b3a0e 	blcc	2cebc4 <__Stack_Size+0x2ce7c4>
     388:	3c19270b 	ldccc	7, cr2, [r9], {11}
     38c:	3c000019 	stccc	0, cr0, [r0], {25}
     390:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     394:	0b3a0e03 	bleq	e83ba8 <__Stack_Size+0xe837a8>
     398:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     39c:	1301193c 	movwne	r1, #6460	; 0x193c
     3a0:	2e3d0000 	cdpcs	0, 3, cr0, cr13, cr0, {0}
     3a4:	03193f01 	tsteq	r9, #1, 30
     3a8:	3b0b3a0e 	blcc	2cebe8 <__Stack_Size+0x2ce7e8>
     3ac:	3c19270b 	ldccc	7, cr2, [r9], {11}
     3b0:	00130119 	andseq	r0, r3, r9, lsl r1
     3b4:	002e3e00 	eoreq	r3, lr, r0, lsl #28
     3b8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     3bc:	0b3b0b3a 	bleq	ec30ac <__Stack_Size+0xec2cac>
     3c0:	13491927 	movtne	r1, #39207	; 0x9927
     3c4:	0000193c 	andeq	r1, r0, ip, lsr r9
     3c8:	3f012e3f 	svccc	0x00012e3f
     3cc:	3a0e0319 	bcc	381038 <__Stack_Size+0x380c38>
     3d0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     3d4:	3c134919 	ldccc	9, cr4, [r3], {25}
     3d8:	00130119 	andseq	r0, r3, r9, lsl r1
     3dc:	002e4000 	eoreq	r4, lr, r0
     3e0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     3e4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     3e8:	13491927 	movtne	r1, #39207	; 0x9927
     3ec:	0000193c 	andeq	r1, r0, ip, lsr r9
     3f0:	01110100 	tsteq	r1, r0, lsl #2
     3f4:	0b130e25 	bleq	4c3c90 <__Stack_Size+0x4c3890>
     3f8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     3fc:	00001710 	andeq	r1, r0, r0, lsl r7
     400:	0b002402 	bleq	9410 <__Stack_Size+0x9010>
     404:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     408:	0300000e 	movweq	r0, #14
     40c:	08030016 	stmdaeq	r3, {r1, r2, r4}
     410:	0b3b0b3a 	bleq	ec3100 <__Stack_Size+0xec2d00>
     414:	00001349 	andeq	r1, r0, r9, asr #6
     418:	03011304 	movweq	r1, #4868	; 0x1304
     41c:	3a0b0b0e 	bcc	2c305c <__Stack_Size+0x2c2c5c>
     420:	010b3b0b 	tsteq	fp, fp, lsl #22
     424:	05000013 	streq	r0, [r0, #-19]
     428:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     42c:	0b3b0b3a 	bleq	ec311c <__Stack_Size+0xec2d1c>
     430:	0b381349 	bleq	e0515c <__Stack_Size+0xe04d5c>
     434:	0f060000 	svceq	0x00060000
     438:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     43c:	07000013 	smladeq	r0, r3, r0, r0
     440:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     444:	0b3b0b3a 	bleq	ec3134 <__Stack_Size+0xec2d34>
     448:	00001349 	andeq	r1, r0, r9, asr #6
     44c:	03003408 	movweq	r3, #1032	; 0x408
     450:	3b0b3a0e 	blcc	2cec90 <__Stack_Size+0x2ce890>
     454:	3f13490b 	svccc	0x0013490b
     458:	00180219 	andseq	r0, r8, r9, lsl r2
     45c:	00240900 	eoreq	r0, r4, r0, lsl #18
     460:	0b3e0b0b 	bleq	f83094 <__Stack_Size+0xf82c94>
     464:	00000803 	andeq	r0, r0, r3, lsl #16
     468:	4901010a 	stmdbmi	r1, {r1, r3, r8}
     46c:	00130113 	andseq	r0, r3, r3, lsl r1
     470:	00210b00 	eoreq	r0, r1, r0, lsl #22
     474:	0b2f1349 	bleq	bc51a0 <__Stack_Size+0xbc4da0>
     478:	01000000 	mrseq	r0, (UNDEF: 0)
     47c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     480:	0e030b13 	vmoveq.32	d3[0], r0
     484:	17550e1b 	smmlane	r5, fp, lr, r0
     488:	17100111 			; <UNDEFINED> instruction: 0x17100111
     48c:	24020000 	strcs	r0, [r2], #-0
     490:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     494:	000e030b 	andeq	r0, lr, fp, lsl #6
     498:	00160300 	andseq	r0, r6, r0, lsl #6
     49c:	0b3a0803 	bleq	e824b0 <__Stack_Size+0xe820b0>
     4a0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     4a4:	04040000 	streq	r0, [r4], #-0
     4a8:	3a0b0b01 	bcc	2c30b4 <__Stack_Size+0x2c2cb4>
     4ac:	010b3b0b 	tsteq	fp, fp, lsl #22
     4b0:	05000013 	streq	r0, [r0, #-19]
     4b4:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     4b8:	00000d1c 	andeq	r0, r0, ip, lsl sp
     4bc:	03001606 	movweq	r1, #1542	; 0x606
     4c0:	3b0b3a0e 	blcc	2ced00 <__Stack_Size+0x2ce900>
     4c4:	0013490b 	andseq	r4, r3, fp, lsl #18
     4c8:	01130700 	tsteq	r3, r0, lsl #14
     4cc:	0b0b0e03 	bleq	2c3ce0 <__Stack_Size+0x2c38e0>
     4d0:	0b3b0b3a 	bleq	ec31c0 <__Stack_Size+0xec2dc0>
     4d4:	00001301 	andeq	r1, r0, r1, lsl #6
     4d8:	03000d08 	movweq	r0, #3336	; 0xd08
     4dc:	3b0b3a0e 	blcc	2ced1c <__Stack_Size+0x2ce91c>
     4e0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     4e4:	0900000b 	stmdbeq	r0, {r0, r1, r3}
     4e8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     4ec:	0b3a0e03 	bleq	e83d00 <__Stack_Size+0xe83900>
     4f0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     4f4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     4f8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     4fc:	00130119 	andseq	r0, r3, r9, lsl r1
     500:	00340a00 	eorseq	r0, r4, r0, lsl #20
     504:	0b3a0e03 	bleq	e83d18 <__Stack_Size+0xe83918>
     508:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     50c:	00000b1c 	andeq	r0, r0, ip, lsl fp
     510:	0300340b 	movweq	r3, #1035	; 0x40b
     514:	3b0b3a0e 	blcc	2ced54 <__Stack_Size+0x2ce954>
     518:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     51c:	0c000017 	stceq	0, cr0, [r0], {23}
     520:	0111010b 	tsteq	r1, fp, lsl #2
     524:	13010612 	movwne	r0, #5650	; 0x1612
     528:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
     52c:	03193f01 	tsteq	r9, #1, 30
     530:	3b0b3a0e 	blcc	2ced70 <__Stack_Size+0x2ce970>
     534:	3c13490b 	ldccc	9, cr4, [r3], {11}
     538:	00130119 	andseq	r0, r3, r9, lsl r1
     53c:	00180e00 	andseq	r0, r8, r0, lsl #28
     540:	890f0000 	stmdbhi	pc, {}	; <UNPREDICTABLE>
     544:	11010182 	smlabbne	r1, r2, r1, r0
     548:	01133101 	tsteq	r3, r1, lsl #2
     54c:	10000013 	andne	r0, r0, r3, lsl r0
     550:	0001828a 	andeq	r8, r1, sl, lsl #5
     554:	42911802 	addsmi	r1, r1, #131072	; 0x20000
     558:	11000018 	tstne	r0, r8, lsl r0
     55c:	00018289 	andeq	r8, r1, r9, lsl #5
     560:	13310111 	teqne	r1, #1073741828	; 0x40000004
     564:	34120000 	ldrcc	r0, [r2], #-0
     568:	3a0e0300 	bcc	381170 <__Stack_Size+0x380d70>
     56c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     570:	13000013 	movwne	r0, #19
     574:	0b0b0024 	bleq	2c060c <__Stack_Size+0x2c020c>
     578:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     57c:	34140000 	ldrcc	r0, [r4], #-0
     580:	3a0e0300 	bcc	381188 <__Stack_Size+0x380d88>
     584:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     588:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     58c:	15000018 	strne	r0, [r0, #-24]
     590:	13490026 	movtne	r0, #36902	; 0x9026
     594:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
     598:	03193f01 	tsteq	r9, #1, 30
     59c:	3b0b3a0e 	blcc	2ceddc <__Stack_Size+0x2ce9dc>
     5a0:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     5a4:	01193c13 	tsteq	r9, r3, lsl ip
     5a8:	17000013 	smladne	r0, r3, r0, r0
     5ac:	13490005 	movtne	r0, #36869	; 0x9005
     5b0:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
     5b4:	03193f01 	tsteq	r9, #1, 30
     5b8:	3b0b3a0e 	blcc	2cedf8 <__Stack_Size+0x2ce9f8>
     5bc:	01193c0b 	tsteq	r9, fp, lsl #24
     5c0:	19000013 	stmdbne	r0, {r0, r1, r4}
     5c4:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     5c8:	0b3a0e03 	bleq	e83ddc <__Stack_Size+0xe839dc>
     5cc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     5d0:	0000193c 	andeq	r1, r0, ip, lsr r9
     5d4:	3f012e1a 	svccc	0x00012e1a
     5d8:	3a0e0319 	bcc	381244 <__Stack_Size+0x380e44>
     5dc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     5e0:	01193c19 	tsteq	r9, r9, lsl ip
     5e4:	00000013 	andeq	r0, r0, r3, lsl r0
     5e8:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     5ec:	030b130e 	movweq	r1, #45838	; 0xb30e
     5f0:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
     5f4:	10011117 	andne	r1, r1, r7, lsl r1
     5f8:	02000017 	andeq	r0, r0, #23
     5fc:	0b0b0024 	bleq	2c0694 <__Stack_Size+0x2c0294>
     600:	0e030b3e 	vmoveq.16	d3[0], r0
     604:	16030000 	strne	r0, [r3], -r0
     608:	3a080300 	bcc	201210 <__Stack_Size+0x200e10>
     60c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     610:	04000013 	streq	r0, [r0], #-19
     614:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     618:	0b3b0b3a 	bleq	ec3308 <__Stack_Size+0xec2f08>
     61c:	00001349 	andeq	r1, r0, r9, asr #6
     620:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
     624:	06000013 			; <UNDEFINED> instruction: 0x06000013
     628:	13490026 	movtne	r0, #36902	; 0x9026
     62c:	04070000 	streq	r0, [r7], #-0
     630:	3a0b0b01 	bcc	2c323c <__Stack_Size+0x2c2e3c>
     634:	010b3b0b 	tsteq	fp, fp, lsl #22
     638:	08000013 	stmdaeq	r0, {r0, r1, r4}
     63c:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     640:	00000d1c 	andeq	r0, r0, ip, lsl sp
     644:	0b011309 	bleq	45270 <__Stack_Size+0x44e70>
     648:	3b0b3a0b 	blcc	2cee7c <__Stack_Size+0x2cea7c>
     64c:	0013010b 	andseq	r0, r3, fp, lsl #2
     650:	000d0a00 	andeq	r0, sp, r0, lsl #20
     654:	0b3a0803 	bleq	e82668 <__Stack_Size+0xe82268>
     658:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     65c:	00000b38 	andeq	r0, r0, r8, lsr fp
     660:	03000d0b 	movweq	r0, #3339	; 0xd0b
     664:	3b0b3a0e 	blcc	2ceea4 <__Stack_Size+0x2ceaa4>
     668:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     66c:	0c00000b 	stceq	0, cr0, [r0], {11}
     670:	050b0113 	streq	r0, [fp, #-275]	; 0x113
     674:	0b3b0b3a 	bleq	ec3364 <__Stack_Size+0xec2f64>
     678:	00001301 	andeq	r1, r0, r1, lsl #6
     67c:	03000d0d 	movweq	r0, #3341	; 0xd0d
     680:	3b0b3a0e 	blcc	2ceec0 <__Stack_Size+0x2ceac0>
     684:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     688:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
     68c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     690:	0b3b0b3a 	bleq	ec3380 <__Stack_Size+0xec2f80>
     694:	05381349 	ldreq	r1, [r8, #-841]!	; 0x349
     698:	010f0000 	mrseq	r0, CPSR
     69c:	01134901 	tsteq	r3, r1, lsl #18
     6a0:	10000013 	andne	r0, r0, r3, lsl r0
     6a4:	13490021 	movtne	r0, #36897	; 0x9021
     6a8:	00000b2f 	andeq	r0, r0, pc, lsr #22
     6ac:	03011311 	movweq	r1, #4881	; 0x1311
     6b0:	3a0b0b0e 	bcc	2c32f0 <__Stack_Size+0x2c2ef0>
     6b4:	010b3b0b 	tsteq	fp, fp, lsl #22
     6b8:	12000013 	andne	r0, r0, #19
     6bc:	19270015 	stmdbne	r7!, {r0, r2, r4}
     6c0:	0f130000 	svceq	0x00130000
     6c4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     6c8:	14000013 	strne	r0, [r0], #-19
     6cc:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     6d0:	0b3a0e03 	bleq	e83ee4 <__Stack_Size+0xe83ae4>
     6d4:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     6d8:	00000b20 	andeq	r0, r0, r0, lsr #22
     6dc:	3f012e15 	svccc	0x00012e15
     6e0:	3a0e0319 	bcc	38134c <__Stack_Size+0x380f4c>
     6e4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     6e8:	010b2019 	tsteq	fp, r9, lsl r0
     6ec:	16000013 			; <UNDEFINED> instruction: 0x16000013
     6f0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     6f4:	0b3b0b3a 	bleq	ec33e4 <__Stack_Size+0xec2fe4>
     6f8:	00001349 	andeq	r1, r0, r9, asr #6
     6fc:	03000517 	movweq	r0, #1303	; 0x517
     700:	3b0b3a08 	blcc	2cef28 <__Stack_Size+0x2ceb28>
     704:	0013490b 	andseq	r4, r3, fp, lsl #18
     708:	012e1800 	teqeq	lr, r0, lsl #16
     70c:	01111331 	tsteq	r1, r1, lsr r3
     710:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     714:	01194297 			; <UNDEFINED> instruction: 0x01194297
     718:	19000013 	stmdbne	r0, {r0, r1, r4}
     71c:	13310005 	teqne	r1, #5
     720:	00001802 	andeq	r1, r0, r2, lsl #16
     724:	3100051a 	tstcc	r0, sl, lsl r5
     728:	00170213 	andseq	r0, r7, r3, lsl r2
     72c:	012e1b00 	teqeq	lr, r0, lsl #22
     730:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     734:	0b3b0b3a 	bleq	ec3424 <__Stack_Size+0xec3024>
     738:	13491927 	movtne	r1, #39207	; 0x9927
     73c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     740:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     744:	00130119 	andseq	r0, r3, r9, lsl r1
     748:	00051c00 	andeq	r1, r5, r0, lsl #24
     74c:	0b3a0e03 	bleq	e83f60 <__Stack_Size+0xe83b60>
     750:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     754:	00001702 	andeq	r1, r0, r2, lsl #14
     758:	0300051d 	movweq	r0, #1309	; 0x51d
     75c:	3b0b3a08 	blcc	2cef84 <__Stack_Size+0x2ceb84>
     760:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     764:	1e000017 	mcrne	0, 0, r0, cr0, cr7, {0}
     768:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     76c:	0b3a0e03 	bleq	e83f80 <__Stack_Size+0xe83b80>
     770:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     774:	06120111 			; <UNDEFINED> instruction: 0x06120111
     778:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     77c:	00130119 	andseq	r0, r3, r9, lsl r1
     780:	00341f00 	eorseq	r1, r4, r0, lsl #30
     784:	0b3a0e03 	bleq	e83f98 <__Stack_Size+0xe83b98>
     788:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     78c:	00001702 	andeq	r1, r0, r2, lsl #14
     790:	3f012e20 	svccc	0x00012e20
     794:	3a0e0319 	bcc	381400 <__Stack_Size+0x381000>
     798:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     79c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     7a0:	97184006 	ldrls	r4, [r8, -r6]
     7a4:	13011942 	movwne	r1, #6466	; 0x1942
     7a8:	05210000 	streq	r0, [r1, #-0]!
     7ac:	3a0e0300 	bcc	3813b4 <__Stack_Size+0x380fb4>
     7b0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     7b4:	00180213 	andseq	r0, r8, r3, lsl r2
     7b8:	00342200 	eorseq	r2, r4, r0, lsl #4
     7bc:	0b3a0803 	bleq	e827d0 <__Stack_Size+0xe823d0>
     7c0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     7c4:	00001702 	andeq	r1, r0, r2, lsl #14
     7c8:	01828923 	orreq	r8, r2, r3, lsr #18
     7cc:	31011101 	tstcc	r1, r1, lsl #2
     7d0:	00130113 	andseq	r0, r3, r3, lsl r1
     7d4:	828a2400 	addhi	r2, sl, #0, 8
     7d8:	18020001 	stmdane	r2, {r0}
     7dc:	00184291 	mulseq	r8, r1, r2
     7e0:	82892500 	addhi	r2, r9, #0, 10
     7e4:	01110101 	tsteq	r1, r1, lsl #2
     7e8:	00001331 	andeq	r1, r0, r1, lsr r3
     7ec:	3f002e26 	svccc	0x00002e26
     7f0:	3a0e0319 	bcc	38145c <__Stack_Size+0x38105c>
     7f4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     7f8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     7fc:	97184006 	ldrls	r4, [r8, -r6]
     800:	00001942 	andeq	r1, r0, r2, asr #18
     804:	03003427 	movweq	r3, #1063	; 0x427
     808:	3b0b3a0e 	blcc	2cf048 <__Stack_Size+0x2cec48>
     80c:	1c13490b 	ldcne	9, cr4, [r3], {11}
     810:	2800000b 	stmdacs	r0, {r0, r1, r3}
     814:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     818:	0b3a0e03 	bleq	e8402c <__Stack_Size+0xe83c2c>
     81c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     820:	0b201349 	bleq	80554c <__Stack_Size+0x80514c>
     824:	00001301 	andeq	r1, r0, r1, lsl #6
     828:	03000529 	movweq	r0, #1321	; 0x529
     82c:	3b0b3a08 	blcc	2cf054 <__Stack_Size+0x2cec54>
     830:	00134905 	andseq	r4, r3, r5, lsl #18
     834:	00342a00 	eorseq	r2, r4, r0, lsl #20
     838:	0b3a0e03 	bleq	e8404c <__Stack_Size+0xe83c4c>
     83c:	1349053b 	movtne	r0, #38203	; 0x953b
     840:	242b0000 	strtcs	r0, [fp], #-0
     844:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     848:	0008030b 	andeq	r0, r8, fp, lsl #6
     84c:	011d2c00 	tsteq	sp, r0, lsl #24
     850:	01111331 	tsteq	r1, r1, lsr r3
     854:	0b580612 	bleq	16020a4 <__Stack_Size+0x1601ca4>
     858:	00000b59 	andeq	r0, r0, r9, asr fp
     85c:	3100052d 	tstcc	r0, sp, lsr #10
     860:	000b1c13 	andeq	r1, fp, r3, lsl ip
     864:	00052e00 	andeq	r2, r5, r0, lsl #28
     868:	061c1331 			; <UNDEFINED> instruction: 0x061c1331
     86c:	0b2f0000 	bleq	bc0874 <__Stack_Size+0xbc0474>
     870:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     874:	30000006 	andcc	r0, r0, r6
     878:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     87c:	0b3a0e03 	bleq	e84090 <__Stack_Size+0xe83c90>
     880:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     884:	06120111 			; <UNDEFINED> instruction: 0x06120111
     888:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     88c:	00130119 	andseq	r0, r3, r9, lsl r1
     890:	012e3100 	teqeq	lr, r0, lsl #2
     894:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     898:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     89c:	01111927 	tsteq	r1, r7, lsr #18
     8a0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     8a4:	01194297 			; <UNDEFINED> instruction: 0x01194297
     8a8:	32000013 	andcc	r0, r0, #19
     8ac:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     8b0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     8b4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     8b8:	34330000 	ldrtcc	r0, [r3], #-0
     8bc:	3a0e0300 	bcc	3814c4 <__Stack_Size+0x3810c4>
     8c0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     8c4:	00170213 	andseq	r0, r7, r3, lsl r2
     8c8:	00343400 	eorseq	r3, r4, r0, lsl #8
     8cc:	0b3a0e03 	bleq	e840e0 <__Stack_Size+0xe83ce0>
     8d0:	1349053b 	movtne	r0, #38203	; 0x953b
     8d4:	00000d1c 	andeq	r0, r0, ip, lsl sp
     8d8:	31001d35 	tstcc	r0, r5, lsr sp
     8dc:	55015213 	strpl	r5, [r1, #-531]	; 0x213
     8e0:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
     8e4:	3600000b 	strcc	r0, [r0], -fp
     8e8:	00018289 	andeq	r8, r1, r9, lsl #5
     8ec:	13310111 	teqne	r1, #1073741828	; 0x40000004
     8f0:	89370000 	ldmdbhi	r7!, {}	; <UNPREDICTABLE>
     8f4:	11010182 	smlabbne	r1, r2, r1, r0
     8f8:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
     8fc:	00001331 	andeq	r1, r0, r1, lsr r3
     900:	3f012e38 	svccc	0x00012e38
     904:	3a0e0319 	bcc	381570 <__Stack_Size+0x381170>
     908:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     90c:	11134919 	tstne	r3, r9, lsl r9
     910:	40061201 	andmi	r1, r6, r1, lsl #4
     914:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     918:	00001301 	andeq	r1, r0, r1, lsl #6
     91c:	03000539 	movweq	r0, #1337	; 0x539
     920:	3b0b3a0e 	blcc	2cf160 <__Stack_Size+0x2ced60>
     924:	02134905 	andseq	r4, r3, #81920	; 0x14000
     928:	3a000017 	bcc	98c <__Stack_Size+0x58c>
     92c:	08030005 	stmdaeq	r3, {r0, r2}
     930:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     934:	17021349 	strne	r1, [r2, -r9, asr #6]
     938:	343b0000 	ldrtcc	r0, [fp], #-0
     93c:	3a0e0300 	bcc	381544 <__Stack_Size+0x381144>
     940:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     944:	00180213 	andseq	r0, r8, r3, lsl r2
     948:	002e3c00 	eoreq	r3, lr, r0, lsl #24
     94c:	01111331 	tsteq	r1, r1, lsr r3
     950:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     954:	00194297 	mulseq	r9, r7, r2
     958:	002e3d00 	eoreq	r3, lr, r0, lsl #26
     95c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     960:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     964:	01111927 	tsteq	r1, r7, lsr #18
     968:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     96c:	00194297 	mulseq	r9, r7, r2
     970:	00343e00 	eorseq	r3, r4, r0, lsl #28
     974:	17021331 	smladxne	r2, r1, r3, r1
     978:	343f0000 	ldrtcc	r0, [pc], #-0	; 980 <__Stack_Size+0x580>
     97c:	3a0e0300 	bcc	381584 <__Stack_Size+0x381184>
     980:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     984:	00061c13 	andeq	r1, r6, r3, lsl ip
     988:	00344000 	eorseq	r4, r4, r0
     98c:	0b3a0e03 	bleq	e841a0 <__Stack_Size+0xe83da0>
     990:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     994:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     998:	2e410000 	cdpcs	0, 4, cr0, cr1, cr0, {0}
     99c:	03193f00 	tsteq	r9, #0, 30
     9a0:	3b0b3a0e 	blcc	2cf1e0 <__Stack_Size+0x2cede0>
     9a4:	3c19270b 	ldccc	7, cr2, [r9], {11}
     9a8:	00000019 	andeq	r0, r0, r9, lsl r0
     9ac:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     9b0:	030b130e 	movweq	r1, #45838	; 0xb30e
     9b4:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
     9b8:	10011117 	andne	r1, r1, r7, lsl r1
     9bc:	02000017 	andeq	r0, r0, #23
     9c0:	0b0b0024 	bleq	2c0a58 <__Stack_Size+0x2c0658>
     9c4:	0e030b3e 	vmoveq.16	d3[0], r0
     9c8:	16030000 	strne	r0, [r3], -r0
     9cc:	3a080300 	bcc	2015d4 <__Stack_Size+0x2011d4>
     9d0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     9d4:	04000013 	streq	r0, [r0], #-19
     9d8:	0b0b0104 	bleq	2c0df0 <__Stack_Size+0x2c09f0>
     9dc:	0b3b0b3a 	bleq	ec36cc <__Stack_Size+0xec32cc>
     9e0:	00001301 	andeq	r1, r0, r1, lsl #6
     9e4:	03002805 	movweq	r2, #2053	; 0x805
     9e8:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     9ec:	00160600 	andseq	r0, r6, r0, lsl #12
     9f0:	0b3a0e03 	bleq	e84204 <__Stack_Size+0xe83e04>
     9f4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     9f8:	0f070000 	svceq	0x00070000
     9fc:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     a00:	08000013 	stmdaeq	r0, {r0, r1, r4}
     a04:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     a08:	0b3a0b0b 	bleq	e8363c <__Stack_Size+0xe8323c>
     a0c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     a10:	0d090000 	stceq	0, cr0, [r9, #-0]
     a14:	3a0e0300 	bcc	38161c <__Stack_Size+0x38121c>
     a18:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     a1c:	000b3813 	andeq	r3, fp, r3, lsl r8
     a20:	01150a00 	tsteq	r5, r0, lsl #20
     a24:	13491927 	movtne	r1, #39207	; 0x9927
     a28:	00001301 	andeq	r1, r0, r1, lsl #6
     a2c:	4900050b 	stmdbmi	r0, {r0, r1, r3, r8, sl}
     a30:	0c000013 	stceq	0, cr0, [r0], {19}
     a34:	08030113 	stmdaeq	r3, {r0, r1, r4, r8}
     a38:	0b3a0b0b 	bleq	e8366c <__Stack_Size+0xe8326c>
     a3c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     a40:	0d0d0000 	stceq	0, cr0, [sp, #-0]
     a44:	3a080300 	bcc	20164c <__Stack_Size+0x20124c>
     a48:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     a4c:	000b3813 	andeq	r3, fp, r3, lsl r8
     a50:	01170e00 	tsteq	r7, r0, lsl #28
     a54:	0b3a0b0b 	bleq	e83688 <__Stack_Size+0xe83288>
     a58:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     a5c:	0d0f0000 	stceq	0, cr0, [pc, #-0]	; a64 <__Stack_Size+0x664>
     a60:	3a080300 	bcc	201668 <__Stack_Size+0x201268>
     a64:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     a68:	10000013 	andne	r0, r0, r3, lsl r0
     a6c:	0e030104 	adfeqs	f0, f3, f4
     a70:	0b3a0b0b 	bleq	e836a4 <__Stack_Size+0xe832a4>
     a74:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     a78:	28110000 	ldmdacs	r1, {}	; <UNPREDICTABLE>
     a7c:	1c080300 	stcne	3, cr0, [r8], {-0}
     a80:	1200000d 	andne	r0, r0, #13
     a84:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     a88:	0b3a0e03 	bleq	e8429c <__Stack_Size+0xe83e9c>
     a8c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     a90:	06120111 			; <UNDEFINED> instruction: 0x06120111
     a94:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     a98:	13000019 	movwne	r0, #25
     a9c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     aa0:	0b3a0e03 	bleq	e842b4 <__Stack_Size+0xe83eb4>
     aa4:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     aa8:	06120111 			; <UNDEFINED> instruction: 0x06120111
     aac:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     ab0:	00130119 	andseq	r0, r3, r9, lsl r1
     ab4:	00341400 	eorseq	r1, r4, r0, lsl #8
     ab8:	0b3a0e03 	bleq	e842cc <__Stack_Size+0xe83ecc>
     abc:	1349053b 	movtne	r0, #38203	; 0x953b
     ac0:	00001702 	andeq	r1, r0, r2, lsl #14
     ac4:	01828915 	orreq	r8, r2, r5, lsl r9
     ac8:	31011100 	mrscc	r1, (UNDEF: 17)
     acc:	16000013 			; <UNDEFINED> instruction: 0x16000013
     ad0:	00018289 	andeq	r8, r1, r9, lsl #5
     ad4:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
     ad8:	00133119 	andseq	r3, r3, r9, lsl r1
     adc:	002e1700 	eoreq	r1, lr, r0, lsl #14
     ae0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     ae4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     ae8:	01111927 	tsteq	r1, r7, lsr #18
     aec:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     af0:	00194297 	mulseq	r9, r7, r2
     af4:	012e1800 	teqeq	lr, r0, lsl #16
     af8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     afc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     b00:	13491927 	movtne	r1, #39207	; 0x9927
     b04:	06120111 			; <UNDEFINED> instruction: 0x06120111
     b08:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     b0c:	00130119 	andseq	r0, r3, r9, lsl r1
     b10:	00051900 	andeq	r1, r5, r0, lsl #18
     b14:	0b3a0e03 	bleq	e84328 <__Stack_Size+0xe83f28>
     b18:	1349053b 	movtne	r0, #38203	; 0x953b
     b1c:	00001702 	andeq	r1, r0, r2, lsl #14
     b20:	0300341a 	movweq	r3, #1050	; 0x41a
     b24:	3b0b3a08 	blcc	2cf34c <__Stack_Size+0x2cef4c>
     b28:	02134905 	andseq	r4, r3, #81920	; 0x14000
     b2c:	1b000017 	blne	b90 <__Stack_Size+0x790>
     b30:	01018289 	smlabbeq	r1, r9, r2, r8
     b34:	13310111 	teqne	r1, #1073741828	; 0x40000004
     b38:	00001301 	andeq	r1, r0, r1, lsl #6
     b3c:	01828a1c 	orreq	r8, r2, ip, lsl sl
     b40:	91180200 	tstls	r8, r0, lsl #4
     b44:	00001842 	andeq	r1, r0, r2, asr #16
     b48:	0182891d 	orreq	r8, r2, sp, lsl r9
     b4c:	31011101 	tstcc	r1, r1, lsl #2
     b50:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
     b54:	0b0b0024 	bleq	2c0bec <__Stack_Size+0x2c07ec>
     b58:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     b5c:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
     b60:	03193f01 	tsteq	r9, #1, 30
     b64:	3b0b3a0e 	blcc	2cf3a4 <__Stack_Size+0x2cefa4>
     b68:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     b6c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     b70:	97184006 	ldrls	r4, [r8, -r6]
     b74:	13011942 	movwne	r1, #6466	; 0x1942
     b78:	34200000 	strtcc	r0, [r0], #-0
     b7c:	3a0e0300 	bcc	381784 <__Stack_Size+0x381384>
     b80:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     b84:	00170213 	andseq	r0, r7, r3, lsl r2
     b88:	002e2100 	eoreq	r2, lr, r0, lsl #2
     b8c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     b90:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     b94:	13491927 	movtne	r1, #39207	; 0x9927
     b98:	06120111 			; <UNDEFINED> instruction: 0x06120111
     b9c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     ba0:	22000019 	andcs	r0, r0, #25
     ba4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     ba8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     bac:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     bb0:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
     bb4:	03193f00 	tsteq	r9, #0, 30
     bb8:	3b0b3a0e 	blcc	2cf3f8 <__Stack_Size+0x2ceff8>
     bbc:	11134905 	tstne	r3, r5, lsl #18
     bc0:	40061201 	andmi	r1, r6, r1, lsl #4
     bc4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     bc8:	2e240000 	cdpcs	0, 2, cr0, cr4, cr0, {0}
     bcc:	03193f00 	tsteq	r9, #0, 30
     bd0:	3b0b3a0e 	blcc	2cf410 <__Stack_Size+0x2cf010>
     bd4:	12011105 	andne	r1, r1, #1073741825	; 0x40000001
     bd8:	97184006 	ldrls	r4, [r8, -r6]
     bdc:	00001942 	andeq	r1, r0, r2, asr #18
     be0:	03003425 	movweq	r3, #1061	; 0x425
     be4:	3b0b3a0e 	blcc	2cf424 <__Stack_Size+0x2cf024>
     be8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     bec:	26000018 			; <UNDEFINED> instruction: 0x26000018
     bf0:	13490035 	movtne	r0, #36917	; 0x9035
     bf4:	01270000 	teqeq	r7, r0
     bf8:	01134901 	tsteq	r3, r1, lsl #18
     bfc:	28000013 	stmdacs	r0, {r0, r1, r4}
     c00:	13490021 	movtne	r0, #36897	; 0x9021
     c04:	0000052f 	andeq	r0, r0, pc, lsr #10
     c08:	03003429 	movweq	r3, #1065	; 0x429
     c0c:	3b0b3a0e 	blcc	2cf44c <__Stack_Size+0x2cf04c>
     c10:	3f13490b 	svccc	0x0013490b
     c14:	00193c19 	andseq	r3, r9, r9, lsl ip
     c18:	00342a00 	eorseq	r2, r4, r0, lsl #20
     c1c:	0b3a0e03 	bleq	e84430 <__Stack_Size+0xe84030>
     c20:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     c24:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     c28:	2e2b0000 	cdpcs	0, 2, cr0, cr11, cr0, {0}
     c2c:	03193f00 	tsteq	r9, #0, 30
     c30:	3b0b3a0e 	blcc	2cf470 <__Stack_Size+0x2cf070>
     c34:	3c192705 	ldccc	7, cr2, [r9], {5}
     c38:	2c000019 	stccs	0, cr0, [r0], {25}
     c3c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     c40:	0b3a0e03 	bleq	e84454 <__Stack_Size+0xe84054>
     c44:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     c48:	0000193c 	andeq	r1, r0, ip, lsr r9
     c4c:	3f012e2d 	svccc	0x00012e2d
     c50:	3a0e0319 	bcc	3818bc <__Stack_Size+0x3814bc>
     c54:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     c58:	3c134919 	ldccc	9, cr4, [r3], {25}
     c5c:	00130119 	andseq	r0, r3, r9, lsl r1
     c60:	012e2e00 	teqeq	lr, r0, lsl #28
     c64:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     c68:	0b3b0b3a 	bleq	ec3958 <__Stack_Size+0xec3558>
     c6c:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     c70:	00001301 	andeq	r1, r0, r1, lsl #6
     c74:	3f002e2f 	svccc	0x00002e2f
     c78:	3a0e0319 	bcc	3818e4 <__Stack_Size+0x3814e4>
     c7c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     c80:	3c134919 	ldccc	9, cr4, [r3], {25}
     c84:	00000019 	andeq	r0, r0, r9, lsl r0
     c88:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     c8c:	030b130e 	movweq	r1, #45838	; 0xb30e
     c90:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
     c94:	10011117 	andne	r1, r1, r7, lsl r1
     c98:	02000017 	andeq	r0, r0, #23
     c9c:	0b0b0024 	bleq	2c0d34 <__Stack_Size+0x2c0934>
     ca0:	0e030b3e 	vmoveq.16	d3[0], r0
     ca4:	16030000 	strne	r0, [r3], -r0
     ca8:	3a080300 	bcc	2018b0 <__Stack_Size+0x2014b0>
     cac:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     cb0:	04000013 	streq	r0, [r0], #-19
     cb4:	0e030104 	adfeqs	f0, f3, f4
     cb8:	0b3a0b0b 	bleq	e838ec <__Stack_Size+0xe834ec>
     cbc:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     cc0:	28050000 	stmdacs	r5, {}	; <UNPREDICTABLE>
     cc4:	1c0e0300 	stcne	3, cr0, [lr], {-0}
     cc8:	0600000d 	streq	r0, [r0], -sp
     ccc:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     cd0:	0b3b0b3a 	bleq	ec39c0 <__Stack_Size+0xec35c0>
     cd4:	00001349 	andeq	r1, r0, r9, asr #6
     cd8:	3f012e07 	svccc	0x00012e07
     cdc:	3a0e0319 	bcc	381948 <__Stack_Size+0x381548>
     ce0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     ce4:	20134919 	andscs	r4, r3, r9, lsl r9
     ce8:	0013010b 	andseq	r0, r3, fp, lsl #2
     cec:	00050800 	andeq	r0, r5, r0, lsl #16
     cf0:	0b3a0e03 	bleq	e84504 <__Stack_Size+0xe84104>
     cf4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     cf8:	2e090000 	cdpcs	0, 0, cr0, cr9, cr0, {0}
     cfc:	03193f01 	tsteq	r9, #1, 30
     d00:	3b0b3a0e 	blcc	2cf540 <__Stack_Size+0x2cf140>
     d04:	1119270b 	tstne	r9, fp, lsl #14
     d08:	40061201 	andmi	r1, r6, r1, lsl #4
     d0c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     d10:	00001301 	andeq	r1, r0, r1, lsl #6
     d14:	0300050a 	movweq	r0, #1290	; 0x50a
     d18:	3b0b3a0e 	blcc	2cf558 <__Stack_Size+0x2cf158>
     d1c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     d20:	0b000018 	bleq	d88 <__Stack_Size+0x988>
     d24:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     d28:	0b3a0e03 	bleq	e8453c <__Stack_Size+0xe8413c>
     d2c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     d30:	01111349 	tsteq	r1, r9, asr #6
     d34:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     d38:	00194297 	mulseq	r9, r7, r2
     d3c:	00050c00 	andeq	r0, r5, r0, lsl #24
     d40:	0b3a0e03 	bleq	e84554 <__Stack_Size+0xe84154>
     d44:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     d48:	00001702 	andeq	r1, r0, r2, lsl #14
     d4c:	31012e0d 	tstcc	r1, sp, lsl #28
     d50:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     d54:	97184006 	ldrls	r4, [r8, -r6]
     d58:	13011942 	movwne	r1, #6466	; 0x1942
     d5c:	050e0000 	streq	r0, [lr, #-0]
     d60:	02133100 	andseq	r3, r3, #0, 2
     d64:	0f000017 	svceq	0x00000017
     d68:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     d6c:	0b3a0e03 	bleq	e84580 <__Stack_Size+0xe84180>
     d70:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     d74:	01111349 	tsteq	r1, r9, asr #6
     d78:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     d7c:	01194297 			; <UNDEFINED> instruction: 0x01194297
     d80:	10000013 	andne	r0, r0, r3, lsl r0
     d84:	0111010b 	tsteq	r1, fp, lsl #2
     d88:	00000612 	andeq	r0, r0, r2, lsl r6
     d8c:	03003411 	movweq	r3, #1041	; 0x411
     d90:	3b0b3a0e 	blcc	2cf5d0 <__Stack_Size+0x2cf1d0>
     d94:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     d98:	12000018 	andne	r0, r0, #24
     d9c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     da0:	0b3b0b3a 	bleq	ec3a90 <__Stack_Size+0xec3690>
     da4:	00001349 	andeq	r1, r0, r9, asr #6
     da8:	31011d13 	tstcc	r1, r3, lsl sp
     dac:	55015213 	strpl	r5, [r1, #-531]	; 0x213
     db0:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
     db4:	1400000b 	strne	r0, [r0], #-11
     db8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     dbc:	0b3a0e03 	bleq	e845d0 <__Stack_Size+0xe841d0>
     dc0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     dc4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     dc8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     dcc:	00130119 	andseq	r0, r3, r9, lsl r1
     dd0:	00051500 	andeq	r1, r5, r0, lsl #10
     dd4:	0b3a0e03 	bleq	e845e8 <__Stack_Size+0xe841e8>
     dd8:	1349053b 	movtne	r0, #38203	; 0x953b
     ddc:	00001702 	andeq	r1, r0, r2, lsl #14
     de0:	03003416 	movweq	r3, #1046	; 0x416
     de4:	3b0b3a0e 	blcc	2cf624 <__Stack_Size+0x2cf224>
     de8:	02134905 	andseq	r4, r3, #81920	; 0x14000
     dec:	17000017 	smladne	r0, r7, r0, r0
     df0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     df4:	0b3a0e03 	bleq	e84608 <__Stack_Size+0xe84208>
     df8:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     dfc:	01111349 	tsteq	r1, r9, asr #6
     e00:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     e04:	01194297 			; <UNDEFINED> instruction: 0x01194297
     e08:	18000013 	stmdane	r0, {r0, r1, r4}
     e0c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     e10:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     e14:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     e18:	0f190000 	svceq	0x00190000
     e1c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     e20:	1a000013 	bne	e74 <__Stack_Size+0xa74>
     e24:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     e28:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     e2c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     e30:	0b1b0000 	bleq	6c0e38 <__Stack_Size+0x6c0a38>
     e34:	00175501 	andseq	r5, r7, r1, lsl #10
     e38:	010b1c00 	tsteq	fp, r0, lsl #24
     e3c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     e40:	00001301 	andeq	r1, r0, r1, lsl #6
     e44:	0300051d 	movweq	r0, #1309	; 0x51d
     e48:	3b0b3a08 	blcc	2cf670 <__Stack_Size+0x2cf270>
     e4c:	02134905 	andseq	r4, r3, #81920	; 0x14000
     e50:	1e000017 	mcrne	0, 0, r0, cr0, cr7, {0}
     e54:	08030005 	stmdaeq	r3, {r0, r2}
     e58:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     e5c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     e60:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
     e64:	03193f01 	tsteq	r9, #1, 30
     e68:	3b0b3a0e 	blcc	2cf6a8 <__Stack_Size+0x2cf2a8>
     e6c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     e70:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     e74:	97184006 	ldrls	r4, [r8, -r6]
     e78:	00001942 	andeq	r1, r0, r2, asr #18
     e7c:	01110100 	tsteq	r1, r0, lsl #2
     e80:	0b130e25 	bleq	4c471c <__Stack_Size+0x4c431c>
     e84:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     e88:	01111755 	tsteq	r1, r5, asr r7
     e8c:	00001710 	andeq	r1, r0, r0, lsl r7
     e90:	0b002402 	bleq	9ea0 <__Stack_Size+0x9aa0>
     e94:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     e98:	0300000e 	movweq	r0, #14
     e9c:	08030016 	stmdaeq	r3, {r1, r2, r4}
     ea0:	0b3b0b3a 	bleq	ec3b90 <__Stack_Size+0xec3790>
     ea4:	00001349 	andeq	r1, r0, r9, asr #6
     ea8:	27001504 	strcs	r1, [r0, -r4, lsl #10]
     eac:	05000019 	streq	r0, [r0, #-25]
     eb0:	0b0b000f 	bleq	2c0ef4 <__Stack_Size+0x2c0af4>
     eb4:	00001349 	andeq	r1, r0, r9, asr #6
     eb8:	3f012e06 	svccc	0x00012e06
     ebc:	3a0e0319 	bcc	381b28 <__Stack_Size+0x381728>
     ec0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     ec4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     ec8:	96184006 	ldrls	r4, [r8], -r6
     ecc:	13011942 	movwne	r1, #6466	; 0x1942
     ed0:	34070000 	strcc	r0, [r7], #-0
     ed4:	3a0e0300 	bcc	381adc <__Stack_Size+0x3816dc>
     ed8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     edc:	00170213 	andseq	r0, r7, r3, lsl r2
     ee0:	010b0800 	tsteq	fp, r0, lsl #16
     ee4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     ee8:	00001301 	andeq	r1, r0, r1, lsl #6
     eec:	01828909 	orreq	r8, r2, r9, lsl #18
     ef0:	31011100 	mrscc	r1, (UNDEF: 17)
     ef4:	0a000013 	beq	f48 <__Stack_Size+0xb48>
     ef8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     efc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     f00:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     f04:	0000193c 	andeq	r1, r0, ip, lsr r9
     f08:	4900350b 	stmdbmi	r0, {r0, r1, r3, r8, sl, ip, sp}
     f0c:	0c000013 	stceq	0, cr0, [r0], {19}
     f10:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     f14:	0b3b0b3a 	bleq	ec3c04 <__Stack_Size+0xec3804>
     f18:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     f1c:	00001802 	andeq	r1, r0, r2, lsl #16
     f20:	0300340d 	movweq	r3, #1037	; 0x40d
     f24:	3b0b3a0e 	blcc	2cf764 <__Stack_Size+0x2cf364>
     f28:	3f13490b 	svccc	0x0013490b
     f2c:	00193c19 	andseq	r3, r9, r9, lsl ip
     f30:	01010e00 	tsteq	r1, r0, lsl #28
     f34:	13011349 	movwne	r1, #4937	; 0x1349
     f38:	210f0000 	mrscs	r0, CPSR
     f3c:	2f134900 	svccs	0x00134900
     f40:	1000000b 	andne	r0, r0, fp
     f44:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     f48:	0b3a0e03 	bleq	e8475c <__Stack_Size+0xe8435c>
     f4c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     f50:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     f54:	01000000 	mrseq	r0, (UNDEF: 0)
     f58:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     f5c:	0e030b13 	vmoveq.32	d3[0], r0
     f60:	17550e1b 	smmlane	r5, fp, lr, r0
     f64:	17100111 			; <UNDEFINED> instruction: 0x17100111
     f68:	24020000 	strcs	r0, [r2], #-0
     f6c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     f70:	000e030b 	andeq	r0, lr, fp, lsl #6
     f74:	00160300 	andseq	r0, r6, r0, lsl #6
     f78:	0b3a0803 	bleq	e82f8c <__Stack_Size+0xe82b8c>
     f7c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     f80:	0f040000 	svceq	0x00040000
     f84:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     f88:	05000013 	streq	r0, [r0, #-19]
     f8c:	0e030104 	adfeqs	f0, f3, f4
     f90:	0b3a0b0b 	bleq	e83bc4 <__Stack_Size+0xe837c4>
     f94:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     f98:	28060000 	stmdacs	r6, {}	; <UNPREDICTABLE>
     f9c:	1c0e0300 	stcne	3, cr0, [lr], {-0}
     fa0:	0700000d 	streq	r0, [r0, -sp]
     fa4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     fa8:	0b3b0b3a 	bleq	ec3c98 <__Stack_Size+0xec3898>
     fac:	00001349 	andeq	r1, r0, r9, asr #6
     fb0:	03011308 	movweq	r1, #4872	; 0x1308
     fb4:	3a0b0b0e 	bcc	2c3bf4 <__Stack_Size+0x2c37f4>
     fb8:	010b3b0b 	tsteq	fp, fp, lsl #22
     fbc:	09000013 	stmdbeq	r0, {r0, r1, r4}
     fc0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     fc4:	0b3b0b3a 	bleq	ec3cb4 <__Stack_Size+0xec38b4>
     fc8:	0b381349 	bleq	e05cf4 <__Stack_Size+0xe058f4>
     fcc:	150a0000 	strne	r0, [sl, #-0]
     fd0:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
     fd4:	00130113 	andseq	r0, r3, r3, lsl r1
     fd8:	00050b00 	andeq	r0, r5, r0, lsl #22
     fdc:	00001349 	andeq	r1, r0, r9, asr #6
     fe0:	0301130c 	movweq	r1, #4876	; 0x130c
     fe4:	3a0b0b08 	bcc	2c3c0c <__Stack_Size+0x2c380c>
     fe8:	010b3b0b 	tsteq	fp, fp, lsl #22
     fec:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     ff0:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     ff4:	0b3b0b3a 	bleq	ec3ce4 <__Stack_Size+0xec38e4>
     ff8:	0b381349 	bleq	e05d24 <__Stack_Size+0xe05924>
     ffc:	170e0000 	strne	r0, [lr, -r0]
    1000:	3a0b0b01 	bcc	2c3c0c <__Stack_Size+0x2c380c>
    1004:	010b3b0b 	tsteq	fp, fp, lsl #22
    1008:	0f000013 	svceq	0x00000013
    100c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    1010:	0b3b0b3a 	bleq	ec3d00 <__Stack_Size+0xec3900>
    1014:	00001349 	andeq	r1, r0, r9, asr #6
    1018:	27001510 	smladcs	r0, r0, r5, r1
    101c:	11000019 	tstne	r0, r9, lsl r0
    1020:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    1024:	0b3a0e03 	bleq	e84838 <__Stack_Size+0xe84438>
    1028:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    102c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1030:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    1034:	12000019 	andne	r0, r0, #25
    1038:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    103c:	0b3b0b3a 	bleq	ec3d2c <__Stack_Size+0xec392c>
    1040:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    1044:	0000193c 	andeq	r1, r0, ip, lsr r9
    1048:	03003413 	movweq	r3, #1043	; 0x413
    104c:	3b0b3a0e 	blcc	2cf88c <__Stack_Size+0x2cf48c>
    1050:	3f13490b 	svccc	0x0013490b
    1054:	00180219 	andseq	r0, r8, r9, lsl r2
    1058:	11010000 	mrsne	r0, (UNDEF: 1)
    105c:	130e2501 	movwne	r2, #58625	; 0xe501
    1060:	1b0e030b 	blne	381c94 <__Stack_Size+0x381894>
    1064:	1117550e 	tstne	r7, lr, lsl #10
    1068:	00171001 	andseq	r1, r7, r1
    106c:	00240200 	eoreq	r0, r4, r0, lsl #4
    1070:	0b3e0b0b 	bleq	f83ca4 <__Stack_Size+0xf838a4>
    1074:	00000e03 	andeq	r0, r0, r3, lsl #28
    1078:	03001603 	movweq	r1, #1539	; 0x603
    107c:	3b0b3a08 	blcc	2cf8a4 <__Stack_Size+0x2cf4a4>
    1080:	0013490b 	andseq	r4, r3, fp, lsl #18
    1084:	00160400 	andseq	r0, r6, r0, lsl #8
    1088:	0b3a0e03 	bleq	e8489c <__Stack_Size+0xe8449c>
    108c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1090:	35050000 	strcc	r0, [r5, #-0]
    1094:	00134900 	andseq	r4, r3, r0, lsl #18
    1098:	01040600 	tsteq	r4, r0, lsl #12
    109c:	0b3a0b0b 	bleq	e83cd0 <__Stack_Size+0xe838d0>
    10a0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    10a4:	28070000 	stmdacs	r7, {}	; <UNPREDICTABLE>
    10a8:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    10ac:	0800000d 	stmdaeq	r0, {r0, r2, r3}
    10b0:	0e030104 	adfeqs	f0, f3, f4
    10b4:	0b3a0b0b 	bleq	e83ce8 <__Stack_Size+0xe838e8>
    10b8:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    10bc:	13090000 	movwne	r0, #36864	; 0x9000
    10c0:	0b0e0301 	bleq	381ccc <__Stack_Size+0x3818cc>
    10c4:	3b0b3a0b 	blcc	2cf8f8 <__Stack_Size+0x2cf4f8>
    10c8:	0013010b 	andseq	r0, r3, fp, lsl #2
    10cc:	000d0a00 	andeq	r0, sp, r0, lsl #20
    10d0:	0b3a0e03 	bleq	e848e4 <__Stack_Size+0xe844e4>
    10d4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    10d8:	00000b38 	andeq	r0, r0, r8, lsr fp
    10dc:	0b000f0b 	bleq	4d10 <__Stack_Size+0x4910>
    10e0:	0013490b 	andseq	r4, r3, fp, lsl #18
    10e4:	01150c00 	tsteq	r5, r0, lsl #24
    10e8:	13491927 	movtne	r1, #39207	; 0x9927
    10ec:	00001301 	andeq	r1, r0, r1, lsl #6
    10f0:	4900050d 	stmdbmi	r0, {r0, r2, r3, r8, sl}
    10f4:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    10f8:	08030113 	stmdaeq	r3, {r0, r1, r4, r8}
    10fc:	0b3a0b0b 	bleq	e83d30 <__Stack_Size+0xe83930>
    1100:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1104:	0d0f0000 	stceq	0, cr0, [pc, #-0]	; 110c <__Stack_Size+0xd0c>
    1108:	3a080300 	bcc	201d10 <__Stack_Size+0x201910>
    110c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1110:	000b3813 	andeq	r3, fp, r3, lsl r8
    1114:	01171000 	tsteq	r7, r0
    1118:	0b3a0b0b 	bleq	e83d4c <__Stack_Size+0xe8394c>
    111c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1120:	0d110000 	ldceq	0, cr0, [r1, #-0]
    1124:	3a080300 	bcc	201d2c <__Stack_Size+0x20192c>
    1128:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    112c:	12000013 	andne	r0, r0, #19
    1130:	19270015 	stmdbne	r7!, {r0, r2, r4}
    1134:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
    1138:	03193f01 	tsteq	r9, #1, 30
    113c:	3b0b3a0e 	blcc	2cf97c <__Stack_Size+0x2cf57c>
    1140:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    1144:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1148:	96184006 	ldrls	r4, [r8], -r6
    114c:	13011942 	movwne	r1, #6466	; 0x1942
    1150:	05140000 	ldreq	r0, [r4, #-0]
    1154:	3a0e0300 	bcc	381d5c <__Stack_Size+0x38195c>
    1158:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    115c:	00170213 	andseq	r0, r7, r3, lsl r2
    1160:	010b1500 	tsteq	fp, r0, lsl #10
    1164:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1168:	00001301 	andeq	r1, r0, r1, lsl #6
    116c:	03003416 	movweq	r3, #1046	; 0x416
    1170:	3b0b3a0e 	blcc	2cf9b0 <__Stack_Size+0x2cf5b0>
    1174:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1178:	17000017 	smladne	r0, r7, r0, r0
    117c:	0111010b 	tsteq	r1, fp, lsl #2
    1180:	00000612 	andeq	r0, r0, r2, lsl r6
    1184:	03003418 	movweq	r3, #1048	; 0x418
    1188:	3b0b3a0e 	blcc	2cf9c8 <__Stack_Size+0x2cf5c8>
    118c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1190:	012e1900 	teqeq	lr, r0, lsl #18
    1194:	0b3a0e03 	bleq	e849a8 <__Stack_Size+0xe845a8>
    1198:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    119c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    11a0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    11a4:	00130119 	andseq	r0, r3, r9, lsl r1
    11a8:	00341a00 	eorseq	r1, r4, r0, lsl #20
    11ac:	0b3a0e03 	bleq	e849c0 <__Stack_Size+0xe845c0>
    11b0:	1349053b 	movtne	r0, #38203	; 0x953b
    11b4:	00001702 	andeq	r1, r0, r2, lsl #14
    11b8:	03000a1b 	movweq	r0, #2587	; 0xa1b
    11bc:	3b0b3a0e 	blcc	2cf9fc <__Stack_Size+0x2cf5fc>
    11c0:	00011105 	andeq	r1, r1, r5, lsl #2
    11c4:	82891c00 	addhi	r1, r9, #0, 24
    11c8:	01110101 	tsteq	r1, r1, lsl #2
    11cc:	00001301 	andeq	r1, r0, r1, lsl #6
    11d0:	01828a1d 	orreq	r8, r2, sp, lsl sl
    11d4:	91180200 	tstls	r8, r0, lsl #4
    11d8:	00001842 	andeq	r1, r0, r2, asr #16
    11dc:	0182891e 	orreq	r8, r2, lr, lsl r9
    11e0:	31011101 	tstcc	r1, r1, lsl #2
    11e4:	00130113 	andseq	r0, r3, r3, lsl r1
    11e8:	82891f00 	addhi	r1, r9, #0, 30
    11ec:	01110101 	tsteq	r1, r1, lsl #2
    11f0:	00001331 	andeq	r1, r0, r1, lsr r3
    11f4:	3f002e20 	svccc	0x00002e20
    11f8:	3a0e0319 	bcc	381e64 <__Stack_Size+0x381a64>
    11fc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1200:	11134919 	tstne	r3, r9, lsl r9
    1204:	40061201 	andmi	r1, r6, r1, lsl #4
    1208:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    120c:	34210000 	strtcc	r0, [r1], #-0
    1210:	3a080300 	bcc	201e18 <__Stack_Size+0x201a18>
    1214:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1218:	00170213 	andseq	r0, r7, r3, lsl r2
    121c:	82892200 	addhi	r2, r9, #0, 4
    1220:	01110001 	tsteq	r1, r1
    1224:	00001331 	andeq	r1, r0, r1, lsr r3
    1228:	3f012e23 	svccc	0x00012e23
    122c:	3a0e0319 	bcc	381e98 <__Stack_Size+0x381a98>
    1230:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1234:	11134919 	tstne	r3, r9, lsl r9
    1238:	40061201 	andmi	r1, r6, r1, lsl #4
    123c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    1240:	00001301 	andeq	r1, r0, r1, lsl #6
    1244:	03003424 	movweq	r3, #1060	; 0x424
    1248:	3b0b3a08 	blcc	2cfa70 <__Stack_Size+0x2cf670>
    124c:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1250:	25000017 	strcs	r0, [r0, #-23]
    1254:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    1258:	00001301 	andeq	r1, r0, r1, lsl #6
    125c:	3f002e26 	svccc	0x00002e26
    1260:	3a0e0319 	bcc	381ecc <__Stack_Size+0x381acc>
    1264:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1268:	11134919 	tstne	r3, r9, lsl r9
    126c:	40061201 	andmi	r1, r6, r1, lsl #4
    1270:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    1274:	2e270000 	cdpcs	0, 2, cr0, cr7, cr0, {0}
    1278:	03193f01 	tsteq	r9, #1, 30
    127c:	3b0b3a0e 	blcc	2cfabc <__Stack_Size+0x2cf6bc>
    1280:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    1284:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1288:	97184006 	ldrls	r4, [r8, -r6]
    128c:	13011942 	movwne	r1, #6466	; 0x1942
    1290:	05280000 	streq	r0, [r8, #-0]!
    1294:	3a0e0300 	bcc	381e9c <__Stack_Size+0x381a9c>
    1298:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    129c:	00170213 	andseq	r0, r7, r3, lsl r2
    12a0:	012e2900 	teqeq	lr, r0, lsl #18
    12a4:	0b3a0e03 	bleq	e84ab8 <__Stack_Size+0xe846b8>
    12a8:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    12ac:	13010b20 	movwne	r0, #6944	; 0x1b20
    12b0:	342a0000 	strtcc	r0, [sl], #-0
    12b4:	3a0e0300 	bcc	381ebc <__Stack_Size+0x381abc>
    12b8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    12bc:	2b000013 	blcs	1310 <__Stack_Size+0xf10>
    12c0:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
    12c4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    12c8:	0b2c0000 	bleq	b012d0 <__Stack_Size+0xb00ed0>
    12cc:	00130101 	andseq	r0, r3, r1, lsl #2
    12d0:	010b2d00 	tsteq	fp, r0, lsl #26
    12d4:	172e0000 	strne	r0, [lr, -r0]!
    12d8:	3a0b0b01 	bcc	2c3ee4 <__Stack_Size+0x2c3ae4>
    12dc:	01053b0b 	tsteq	r5, fp, lsl #22
    12e0:	2f000013 	svccs	0x00000013
    12e4:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    12e8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    12ec:	00001349 	andeq	r1, r0, r9, asr #6
    12f0:	31011d30 	tstcc	r1, r0, lsr sp
    12f4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    12f8:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    12fc:	00130105 	andseq	r0, r3, r5, lsl #2
    1300:	00343100 	eorseq	r3, r4, r0, lsl #2
    1304:	17021331 	smladxne	r2, r1, r3, r1
    1308:	0a320000 	beq	c81310 <__Stack_Size+0xc80f10>
    130c:	11133100 	tstne	r3, r0, lsl #2
    1310:	33000001 	movwcc	r0, #1
    1314:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    1318:	17550152 			; <UNDEFINED> instruction: 0x17550152
    131c:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xb58
    1320:	00001301 	andeq	r1, r0, r1, lsl #6
    1324:	55010b34 	strpl	r0, [r1, #-2868]	; 0xb34
    1328:	35000017 	strcc	r0, [r0, #-23]
    132c:	13310034 	teqne	r1, #52	; 0x34
    1330:	00001802 	andeq	r1, r0, r2, lsl #16
    1334:	01828936 	orreq	r8, r2, r6, lsr r9
    1338:	00011101 	andeq	r1, r1, r1, lsl #2
    133c:	82893700 	addhi	r3, r9, #0, 14
    1340:	01110001 	tsteq	r1, r1
    1344:	31194295 			; <UNDEFINED> instruction: 0x31194295
    1348:	38000013 	stmdacc	r0, {r0, r1, r4}
    134c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1350:	0b3a0e03 	bleq	e84b64 <__Stack_Size+0xe84764>
    1354:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1358:	06120111 			; <UNDEFINED> instruction: 0x06120111
    135c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1360:	00130119 	andseq	r0, r3, r9, lsl r1
    1364:	00053900 	andeq	r3, r5, r0, lsl #18
    1368:	0b3a0803 	bleq	e8337c <__Stack_Size+0xe82f7c>
    136c:	1349053b 	movtne	r0, #38203	; 0x953b
    1370:	00001702 	andeq	r1, r0, r2, lsl #14
    1374:	3f002e3a 	svccc	0x00002e3a
    1378:	3a0e0319 	bcc	381fe4 <__Stack_Size+0x381be4>
    137c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1380:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1384:	97184006 	ldrls	r4, [r8, -r6]
    1388:	00001942 	andeq	r1, r0, r2, asr #18
    138c:	0300343b 	movweq	r3, #1083	; 0x43b
    1390:	3b0b3a0e 	blcc	2cfbd0 <__Stack_Size+0x2cf7d0>
    1394:	3f13490b 	svccc	0x0013490b
    1398:	00193c19 	andseq	r3, r9, r9, lsl ip
    139c:	00343c00 	eorseq	r3, r4, r0, lsl #24
    13a0:	0b3a0e03 	bleq	e84bb4 <__Stack_Size+0xe847b4>
    13a4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    13a8:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    13ac:	2e3d0000 	cdpcs	0, 3, cr0, cr13, cr0, {0}
    13b0:	03193f01 	tsteq	r9, #1, 30
    13b4:	3b0b3a0e 	blcc	2cfbf4 <__Stack_Size+0x2cf7f4>
    13b8:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    13bc:	01193c13 	tsteq	r9, r3, lsl ip
    13c0:	3e000013 	mcrcc	0, 0, r0, cr0, cr3, {0}
    13c4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    13c8:	0b3a0e03 	bleq	e84bdc <__Stack_Size+0xe847dc>
    13cc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    13d0:	1301193c 	movwne	r1, #6460	; 0x193c
    13d4:	2e3f0000 	cdpcs	0, 3, cr0, cr15, cr0, {0}
    13d8:	03193f01 	tsteq	r9, #1, 30
    13dc:	3b0b3a0e 	blcc	2cfc1c <__Stack_Size+0x2cf81c>
    13e0:	3c192705 	ldccc	7, cr2, [r9], {5}
    13e4:	00130119 	andseq	r0, r3, r9, lsl r1
    13e8:	012e4000 	teqeq	lr, r0
    13ec:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    13f0:	0b3b0b3a 	bleq	ec40e0 <__Stack_Size+0xec3ce0>
    13f4:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    13f8:	01000000 	mrseq	r0, (UNDEF: 0)
    13fc:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1400:	0e030b13 	vmoveq.32	d3[0], r0
    1404:	17550e1b 	smmlane	r5, fp, lr, r0
    1408:	17100111 			; <UNDEFINED> instruction: 0x17100111
    140c:	24020000 	strcs	r0, [r2], #-0
    1410:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1414:	000e030b 	andeq	r0, lr, fp, lsl #6
    1418:	00160300 	andseq	r0, r6, r0, lsl #6
    141c:	0b3a0803 	bleq	e83430 <__Stack_Size+0xe83030>
    1420:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1424:	0f040000 	svceq	0x00040000
    1428:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    142c:	05000013 	streq	r0, [r0, #-19]
    1430:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1434:	0b3a0e03 	bleq	e84c48 <__Stack_Size+0xe84848>
    1438:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    143c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1440:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1444:	00130119 	andseq	r0, r3, r9, lsl r1
    1448:	00050600 	andeq	r0, r5, r0, lsl #12
    144c:	0b3a0e03 	bleq	e84c60 <__Stack_Size+0xe84860>
    1450:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1454:	00001702 	andeq	r1, r0, r2, lsl #14
    1458:	03003407 	movweq	r3, #1031	; 0x407
    145c:	3b0b3a08 	blcc	2cfc84 <__Stack_Size+0x2cf884>
    1460:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1464:	08000018 	stmdaeq	r0, {r3, r4}
    1468:	08030034 	stmdaeq	r3, {r2, r4, r5}
    146c:	0b3b0b3a 	bleq	ec415c <__Stack_Size+0xec3d5c>
    1470:	17021349 	strne	r1, [r2, -r9, asr #6]
    1474:	34090000 	strcc	r0, [r9], #-0
    1478:	3a0e0300 	bcc	382080 <__Stack_Size+0x381c80>
    147c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1480:	00170213 	andseq	r0, r7, r3, lsl r2
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00000071 	andeq	r0, r0, r1, ror r0
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	00310002 	eorseq	r0, r1, r2
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	73010000 	movwvc	r0, #4096	; 0x1000
      1c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
      24:	5f630000 	svcpl	0x00630000
      28:	796c6e6f 	stmdbvc	ip!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	6174735f 	cmnvs	r4, pc, asr r3
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	70757472 	rsbsvc	r7, r5, r2, ror r4
      34:	0100732e 	tsteq	r0, lr, lsr #6
      38:	00000000 	andeq	r0, r0, r0

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	00f00205 	rscseq	r0, r0, r5, lsl #4

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	c1030800 	tstgt	r3, r0, lsl #16
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	31210100 	teqcc	r1, r0, lsl #2
      48:	23212121 	teqcs	r1, #1073741832	; 0x40000008
      4c:	21212121 	teqcs	r1, r1, lsr #2

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	2131212f 	teqcs	r1, pc, lsr #2
      54:	30212131 	eorcc	r2, r1, r1, lsr r1
      58:	2068032f 	rsbcs	r0, r8, pc, lsr #6
      5c:	36322f34 	shasxcc	r2, r2, r4
      60:	01000202 	tsteq	r0, r2, lsl #4
      64:	02050001 	andeq	r0, r5, #1
      68:	08000138 	stmdaeq	r0, {r3, r4, r5, r8}
      6c:	0100eb03 	tsteq	r0, r3, lsl #22
      70:	01000202 	tsteq	r0, r2, lsl #4
      74:	0000a201 	andeq	sl, r0, r1, lsl #4
      78:	33000200 	movwcc	r0, #512	; 0x200
      7c:	02000000 	andeq	r0, r0, #0
      80:	0d0efb01 	vstreq	d15, [lr, #-4]
      84:	01010100 	mrseq	r0, (UNDEF: 17)
      88:	00000001 	andeq	r0, r0, r1
      8c:	01000001 	tsteq	r0, r1
      90:	74732f2e 	ldrbtvc	r2, [r3], #-3886	; 0xf2e
      94:	5f32336d 	svcpl	0x0032336d
      98:	0062696c 	rsbeq	r6, r2, ip, ror #18
      9c:	726f6300 	rsbvc	r6, pc, #0, 6
      a0:	6d786574 	cfldr64vs	mvdx6, [r8, #-464]!	; 0xfffffe30
      a4:	616d5f33 	cmnvs	sp, r3, lsr pc
      a8:	2e6f7263 	cdpcs	2, 6, cr7, cr15, cr3, {3}
      ac:	00010053 	andeq	r0, r1, r3, asr r0
      b0:	05000000 	streq	r0, [r0, #-0]
      b4:	00000002 	andeq	r0, r0, r2
      b8:	01370300 	teqeq	r7, r0, lsl #6
      bc:	200b0321 	andcs	r0, fp, r1, lsr #6
      c0:	200b0321 	andcs	r0, fp, r1, lsr #6
      c4:	200b0321 	andcs	r0, fp, r1, lsr #6
      c8:	200b032f 	andcs	r0, fp, pc, lsr #6
      cc:	200b032f 	andcs	r0, fp, pc, lsr #6
      d0:	200b032f 	andcs	r0, fp, pc, lsr #6
      d4:	200b0321 	andcs	r0, fp, r1, lsr #6
      d8:	200b032f 	andcs	r0, fp, pc, lsr #6
      dc:	0a032f2f 	beq	cbda0 <__Stack_Size+0xcb9a0>
      e0:	0b032f20 	bleq	cbd68 <__Stack_Size+0xcb968>
      e4:	0b032f20 	bleq	cbd6c <__Stack_Size+0xcb96c>
      e8:	0b032f20 	bleq	cbd70 <__Stack_Size+0xcb970>
      ec:	0b032f20 	bleq	cbd74 <__Stack_Size+0xcb974>
      f0:	0b032120 	bleq	c8578 <__Stack_Size+0xc8178>
      f4:	0b032120 	bleq	c857c <__Stack_Size+0xc817c>
      f8:	0b032f20 	bleq	cbd80 <__Stack_Size+0xcb980>
      fc:	0b032120 	bleq	c8584 <__Stack_Size+0xc8184>
     100:	0b032120 	bleq	c8588 <__Stack_Size+0xc8188>
     104:	0b032f20 	bleq	cbd8c <__Stack_Size+0xcb98c>
     108:	0b032f20 	bleq	cbd90 <__Stack_Size+0xcb990>
     10c:	0a032f20 	beq	cbd94 <__Stack_Size+0xcb994>
     110:	0b032120 	bleq	c8598 <__Stack_Size+0xc8198>
     114:	01022120 	tsteq	r2, r0, lsr #2
     118:	85010100 	strhi	r0, [r1, #-256]	; 0x100
     11c:	02000003 	andeq	r0, r0, #3
     120:	0000be00 	andeq	fp, r0, r0, lsl #28
     124:	fb010200 	blx	4092e <__Stack_Size+0x4052e>
     128:	01000d0e 	tsteq	r0, lr, lsl #26
     12c:	00010101 	andeq	r0, r1, r1, lsl #2
     130:	00010000 	andeq	r0, r1, r0
     134:	2f2e0100 	svccs	0x002e0100
     138:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     13c:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     140:	2f2e0062 	svccs	0x002e0062
     144:	5f627375 	svcpl	0x00627375
     148:	0062696c 	rsbeq	r6, r2, ip, ror #18
     14c:	62737500 	rsbsvs	r7, r3, #0, 10
     150:	0000632e 	andeq	r6, r0, lr, lsr #6
     154:	74730000 	ldrbtvc	r0, [r3], #-0
     158:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     15c:	5f783031 	svcpl	0x00783031
     160:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
     164:	0100682e 	tsteq	r0, lr, lsr #16
     168:	61680000 	cmnvs	r8, r0
     16c:	61776472 	cmnvs	r7, r2, ror r4
     170:	682e6572 	stmdavs	lr!, {r1, r4, r5, r6, r8, sl, sp, lr}
     174:	00000000 	andeq	r0, r0, r0
     178:	5f627375 	svcpl	0x00627375
     17c:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
     180:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     184:	73750000 	cmnvc	r5, #0
     188:	65645f62 	strbvs	r5, [r4, #-3938]!	; 0xf62
     18c:	00682e66 	rsbeq	r2, r8, r6, ror #28
     190:	75000002 	strvc	r0, [r0, #-2]
     194:	682e6273 	stmdavs	lr!, {r0, r1, r4, r5, r6, r9, sp, lr}
     198:	00000000 	andeq	r0, r0, r0
     19c:	5f627375 	svcpl	0x00627375
     1a0:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
     1a4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     1a8:	73750000 	cmnvc	r5, #0
     1ac:	65645f62 	strbvs	r5, [r4, #-3938]!	; 0xf62
     1b0:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
     1b4:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
     1b8:	0000682e 	andeq	r6, r0, lr, lsr #16
     1bc:	66640000 	strbtvs	r0, [r4], -r0
     1c0:	00682e75 	rsbeq	r2, r8, r5, ror lr
     1c4:	75000000 	strvc	r0, [r0, #-0]
     1c8:	725f6273 	subsvc	r6, pc, #805306375	; 0x30000007
     1cc:	2e736765 	cdpcs	7, 7, cr6, cr3, cr5, {3}
     1d0:	00020068 	andeq	r0, r2, r8, rrx
     1d4:	62737500 	rsbsvs	r7, r3, #0, 10
     1d8:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
     1dc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     1e0:	00000000 	andeq	r0, r0, r0
     1e4:	013c0205 	teqeq	ip, r5, lsl #4
     1e8:	a1030800 	tstge	r3, r0, lsl #16
     1ec:	01020101 	tsteq	r2, r1, lsl #2
     1f0:	00010100 	andeq	r0, r1, r0, lsl #2
     1f4:	013e0205 	teqeq	lr, r5, lsl #4
     1f8:	b6030800 	strlt	r0, [r3], -r0, lsl #16
     1fc:	01020102 	tsteq	r2, r2, lsl #2
     200:	00010100 	andeq	r0, r1, r0, lsl #2
     204:	01400205 	cmpeq	r0, r5, lsl #4
     208:	b9030800 	stmdblt	r3, {fp}
     20c:	01020102 	tsteq	r2, r2, lsl #2
     210:	00010100 	andeq	r0, r1, r0, lsl #2
     214:	01420205 	cmpeq	r2, r5, lsl #4
     218:	ed030800 	stc	8, cr0, [r3, #-0]
     21c:	24150102 	ldrcs	r0, [r5], #-258	; 0x102
     220:	01000402 	tsteq	r0, r2, lsl #8
     224:	02050001 	andeq	r0, r5, #1
     228:	0800014c 	stmdaeq	r0, {r2, r3, r6, r8}
     22c:	01039403 	tsteq	r3, r3, lsl #8
     230:	01000102 	tsteq	r0, r2, lsl #2
     234:	02050001 	andeq	r0, r5, #1
     238:	08000150 	stmdaeq	r0, {r4, r6, r8}
     23c:	01039803 	tsteq	r3, r3, lsl #16
     240:	08024b13 	stmdaeq	r2, {r0, r1, r4, r8, r9, fp, lr}
     244:	00010100 	andeq	r0, r1, r0, lsl #2
     248:	01680205 	cmneq	r8, r5, lsl #4
     24c:	9e030800 	cdpls	8, 0, cr0, cr3, cr0, {0}
     250:	01020103 	tsteq	r2, r3, lsl #2
     254:	00010100 	andeq	r0, r1, r0, lsl #2
     258:	016a0205 	cmneq	sl, r5, lsl #4
     25c:	a2030800 	andge	r0, r3, #0, 16
     260:	01020103 	tsteq	r2, r3, lsl #2
     264:	00010100 	andeq	r0, r1, r0, lsl #2
     268:	016c0205 	cmneq	ip, r5, lsl #4
     26c:	a6030800 	strge	r0, [r3], -r0, lsl #16
     270:	01020103 	tsteq	r2, r3, lsl #2
     274:	00010100 	andeq	r0, r1, r0, lsl #2
     278:	016e0205 	cmneq	lr, r5, lsl #4
     27c:	aa030800 	bge	c2284 <__Stack_Size+0xc1e84>
     280:	01020103 	tsteq	r2, r3, lsl #2
     284:	00010100 	andeq	r0, r1, r0, lsl #2
     288:	01700205 	cmneq	r0, r5, lsl #4
     28c:	ae030800 	cdpge	8, 0, cr0, cr3, cr0, {0}
     290:	01020103 	tsteq	r2, r3, lsl #2
     294:	00010100 	andeq	r0, r1, r0, lsl #2
     298:	01720205 	cmneq	r2, r5, lsl #4
     29c:	b2030800 	andlt	r0, r3, #0, 16
     2a0:	01020103 	tsteq	r2, r3, lsl #2
     2a4:	00010100 	andeq	r0, r1, r0, lsl #2
     2a8:	01740205 	cmneq	r4, r5, lsl #4
     2ac:	b6030800 	strlt	r0, [r3], -r0, lsl #16
     2b0:	02130103 	andseq	r0, r3, #-1073741824	; 0xc0000000
     2b4:	01010006 	tsteq	r1, r6
     2b8:	80020500 	andhi	r0, r2, r0, lsl #10
     2bc:	03080001 	movweq	r0, #32769	; 0x8001
     2c0:	2101029d 			; <UNDEFINED> instruction: 0x2101029d
     2c4:	2f1f2130 	svccs	0x001f2130
     2c8:	0b03211f 	bleq	c874c <__Stack_Size+0xc834c>
     2cc:	20750320 	rsbscs	r0, r5, r0, lsr #6
     2d0:	231d2322 	tstcs	sp, #-2013265920	; 0x88000000
     2d4:	92759291 	rsbsls	r9, r5, #268435465	; 0x10000009
     2d8:	2f3e7630 	svccs	0x003e7630
     2dc:	08212c21 	stmdaeq	r1!, {r0, r5, sl, fp, sp}
     2e0:	00010100 	andeq	r0, r1, r0, lsl #2
     2e4:	02280205 	eoreq	r0, r8, #1342177280	; 0x50000000
     2e8:	bc030800 	stclt	8, cr0, [r3], {-0}
     2ec:	1b250102 	blne	9406fc <__Stack_Size+0x9402fc>
     2f0:	8a3e7525 	bhi	f9d78c <__Stack_Size+0xf9d38c>
     2f4:	03212221 	teqeq	r1, #268435458	; 0x10000002
     2f8:	03312076 	teqeq	r1, #118	; 0x76
     2fc:	21212010 	teqcs	r1, r0, lsl r0
     300:	2221211e 	eorcs	r2, r1, #-2147483641	; 0x80000007
     304:	0b022131 	bleq	887d0 <__Stack_Size+0x883d0>
     308:	00010100 	andeq	r0, r1, r0, lsl #2
     30c:	02880205 	addeq	r0, r8, #1342177280	; 0x50000000
     310:	f6030800 			; <UNDEFINED> instruction: 0xf6030800
     314:	02130102 	andseq	r0, r3, #-2147483648	; 0x80000000
     318:	01010006 	tsteq	r1, r6
     31c:	94020500 	strls	r0, [r2], #-1280	; 0x500
     320:	03080002 	movweq	r0, #32770	; 0x8002
     324:	130102fa 	movwne	r0, #4858	; 0x12fa
     328:	01000602 	tsteq	r0, r2, lsl #12
     32c:	02050001 	andeq	r0, r5, #1
     330:	080002a0 	stmdaeq	r0, {r5, r7, r9}
     334:	0102fe03 	tsteq	r2, r3, lsl #28
     338:	5a313d13 	bpl	c4f78c <__Stack_Size+0xc4f38c>
     33c:	01000602 	tsteq	r0, r2, lsl #12
     340:	02050001 	andeq	r0, r5, #1
     344:	080002c0 	stmdaeq	r0, {r6, r7, r9}
     348:	01038703 	tsteq	r3, r3, lsl #14
     34c:	00060213 	andeq	r0, r6, r3, lsl r2
     350:	05000101 	streq	r0, [r0, #-257]	; 0x101
     354:	0002cc02 	andeq	ip, r2, r2, lsl #24
     358:	02e30308 	rsceq	r0, r3, #8, 6	; 0x20000000
     35c:	3d762101 	ldfcce	f2, [r6, #-4]!
     360:	0402214d 	streq	r2, [r2], #-333	; 0x14d
     364:	00010100 	andeq	r0, r1, r0, lsl #2
     368:	02f40205 	rscseq	r0, r4, #1342177280	; 0x50000000
     36c:	27030800 	strcs	r0, [r3, -r0, lsl #16]
     370:	20110301 	andscs	r0, r1, r1, lsl #6
     374:	02005b92 	andeq	r5, r0, #149504	; 0x24800
     378:	20060204 	andcs	r0, r6, r4, lsl #4
     37c:	3d888606 	stccc	6, cr8, [r8, #24]
     380:	2d21211f 	stfcss	f2, [r1, #-124]!	; 0xffffff84
     384:	032f302f 	teqeq	pc, #47	; 0x2f
     388:	032000dc 	teqeq	r0, #220	; 0xdc
     38c:	022e7fa8 	eoreq	r7, lr, #168, 30	; 0x2a0
     390:	0101000d 	tsteq	r1, sp
     394:	00020500 	andeq	r0, r2, r0, lsl #10
     398:	03000000 	movweq	r0, #0
     39c:	150101a5 	strne	r0, [r1, #-421]	; 0x1a5
     3a0:	01000202 	tsteq	r0, r2, lsl #4
     3a4:	02050001 	andeq	r0, r5, #1
     3a8:	08000370 	stmdaeq	r0, {r4, r5, r6, r8, r9}
     3ac:	0101ab03 	tsteq	r1, r3, lsl #22
     3b0:	023f3e14 	eorseq	r3, pc, #20, 28	; 0x140
     3b4:	01010008 	tsteq	r1, r8
     3b8:	8c020500 	cfstr32hi	mvfx0, [r2], {-0}
     3bc:	03080003 	movweq	r0, #32771	; 0x8003
     3c0:	170101b5 			; <UNDEFINED> instruction: 0x170101b5
     3c4:	32222c22 	eorcc	r2, r2, #8704	; 0x2200
     3c8:	01000602 	tsteq	r0, r2, lsl #12
     3cc:	02050001 	andeq	r0, r5, #1
     3d0:	080003a4 	stmdaeq	r0, {r2, r5, r7, r8, r9}
     3d4:	0101c303 	tsteq	r1, r3, lsl #6
     3d8:	84302131 	ldrthi	r2, [r0], #-305	; 0x131
     3dc:	2f312f40 	svccs	0x00312f40
     3e0:	312f4b31 	teqcc	pc, r1, lsr fp	; <UNPREDICTABLE>
     3e4:	2f2f3d3e 	svccs	0x002f3d3e
     3e8:	222f4b22 	eorcs	r4, pc, #34816	; 0x8800
     3ec:	502f222c 	eorpl	r2, pc, ip, lsr #4
     3f0:	01000702 	tsteq	r0, r2, lsl #14
     3f4:	02050001 	andeq	r0, r5, #1
     3f8:	08000428 	stmdaeq	r0, {r3, r5, sl}
     3fc:	0101f303 	tsteq	r1, r3, lsl #6
     400:	221f4016 	andscs	r4, pc, #22
     404:	3d21211e 	stfccs	f2, [r1, #-120]!	; 0xffffff88
     408:	00080223 	andeq	r0, r8, r3, lsr #4
     40c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     410:	00045002 	andeq	r5, r4, r2
     414:	02820308 	addeq	r0, r2, #8, 6	; 0x20000000
     418:	3d3d1301 	ldccc	3, cr1, [sp, #-4]!
     41c:	00060236 	andeq	r0, r6, r6, lsr r2
     420:	05000101 	streq	r0, [r0, #-257]	; 0x101
     424:	00046c02 	andeq	r6, r4, r2, lsl #24
     428:	00d50308 	sbcseq	r0, r5, r8, lsl #6
     42c:	02021401 	andeq	r1, r2, #16777216	; 0x1000000
     430:	00010100 	andeq	r0, r1, r0, lsl #2
     434:	04700205 	ldrbteq	r0, [r0], #-517	; 0x205
     438:	bc030800 	stclt	8, cr0, [r3], {-0}
     43c:	3d240103 	stfccs	f0, [r4, #-12]!
     440:	3d1f303d 	ldccc	0, cr3, [pc, #-244]	; 354 <_Minimum_Stack_Size+0x254>
     444:	0003022f 	andeq	r0, r3, pc, lsr #4
     448:	05000101 	streq	r0, [r0, #-257]	; 0x101
     44c:	00049402 	andeq	r9, r4, r2, lsl #8
     450:	028f0308 	addeq	r0, pc, #8, 6	; 0x20000000
     454:	4b302101 	blmi	c08860 <__Stack_Size+0xc08460>
     458:	211f2130 	tstcs	pc, r0, lsr r1	; <UNPREDICTABLE>
     45c:	022f303d 	eoreq	r3, pc, #61	; 0x3d
     460:	0101000d 	tsteq	r1, sp
     464:	d4020500 	strle	r0, [r2], #-1280	; 0x500
     468:	03080004 	movweq	r0, #32772	; 0x8004
     46c:	220103c7 	andcs	r0, r1, #469762051	; 0x1c000003
     470:	2f3d1d40 	svccs	0x003d1d40
     474:	03022f2f 	movweq	r2, #12079	; 0x2f2f
     478:	00010100 	andeq	r0, r1, r0, lsl #2
     47c:	04f80205 	ldrbteq	r0, [r8], #517	; 0x205
     480:	d0030800 	andle	r0, r3, r0, lsl #16
     484:	40210103 	eormi	r0, r1, r3, lsl #2
     488:	3d59321c 	lfmcc	f3, 2, [r9, #-112]	; 0xffffff90
     48c:	4b3c0d03 	blmi	f038a0 <__Stack_Size+0xf034a0>
     490:	423d4b50 	eorsmi	r4, sp, #80, 22	; 0x14000
     494:	5942345c 	stmdbpl	r2, {r2, r3, r4, r6, sl, ip, sp}^
     498:	3e4b5e3d 	mcrcc	14, 2, r5, cr11, cr13, {1}
     49c:	022a5f42 	eoreq	r5, sl, #264	; 0x108
     4a0:	0101000e 	tsteq	r1, lr
     4a4:	0000006e 	andeq	r0, r0, lr, rrx
     4a8:	00680002 	rsbeq	r0, r8, r2
     4ac:	01020000 	mrseq	r0, (UNDEF: 2)
     4b0:	000d0efb 	strdeq	r0, [sp], -fp
     4b4:	01010101 	tsteq	r1, r1, lsl #2
     4b8:	01000000 	mrseq	r0, (UNDEF: 0)
     4bc:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
     4c0:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
     4c4:	6c5f3233 	lfmvs	f3, 2, [pc], {51}	; 0x33
     4c8:	2e006269 	cdpcs	2, 0, cr6, cr0, cr9, {3}
     4cc:	6273752f 	rsbsvs	r7, r3, #197132288	; 0xbc00000
     4d0:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     4d4:	74730000 	ldrbtvc	r0, [r3], #-0
     4d8:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     4dc:	5f783031 	svcpl	0x00783031
     4e0:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
     4e4:	0100682e 	tsteq	r0, lr, lsr #16
     4e8:	73750000 	cmnvc	r5, #0
     4ec:	6f635f62 	svcvs	0x00635f62
     4f0:	682e6572 	stmdavs	lr!, {r1, r4, r5, r6, r8, sl, sp, lr}
     4f4:	00000200 	andeq	r0, r0, r0, lsl #4
     4f8:	2e627375 	mcrcs	3, 3, r7, cr2, cr5, {3}
     4fc:	00000068 	andeq	r0, r0, r8, rrx
     500:	62737500 	rsbsvs	r7, r3, #0, 10
     504:	7365645f 	cmnvc	r5, #1593835520	; 0x5f000000
     508:	70697263 	rsbvc	r7, r9, r3, ror #4
     50c:	2e726f74 	mrccs	15, 3, r6, cr2, cr4, {3}
     510:	00000063 	andeq	r0, r0, r3, rrx
     514:	009c0000 	addseq	r0, ip, r0
     518:	00020000 	andeq	r0, r2, r0
     51c:	00000069 	andeq	r0, r0, r9, rrx
     520:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     524:	0101000d 	tsteq	r1, sp
     528:	00000101 	andeq	r0, r0, r1, lsl #2
     52c:	00000100 	andeq	r0, r0, r0, lsl #2
     530:	732f2e01 	teqvc	pc, #1, 28
     534:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     538:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     53c:	616d0000 	cmnvs	sp, r0
     540:	632e6e69 	teqvs	lr, #1680	; 0x690
     544:	00000000 	andeq	r0, r0, r0
     548:	7274616d 	rsbsvc	r6, r4, #1073741851	; 0x4000001b
     54c:	682e7869 	stmdavs	lr!, {r0, r3, r5, r6, fp, ip, sp, lr}
     550:	00000000 	andeq	r0, r0, r0
     554:	2e627375 	mcrcs	3, 3, r7, cr2, cr5, {3}
     558:	00000068 	andeq	r0, r0, r8, rrx
     55c:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
     560:	0000682e 	andeq	r6, r0, lr, lsr #16
     564:	61680000 	cmnvs	r8, r0
     568:	61776472 	cmnvs	r7, r2, ror r4
     56c:	682e6572 	stmdavs	lr!, {r1, r4, r5, r6, r8, sl, sp, lr}
     570:	00000000 	andeq	r0, r0, r0
     574:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     578:	30316632 	eorscc	r6, r1, r2, lsr r6
     57c:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     580:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
     584:	00000100 	andeq	r0, r0, r0, lsl #2
     588:	02050000 	andeq	r0, r5, #0
     58c:	080005ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl}
     590:	24012803 	strcs	r2, [r1], #-2051	; 0x803
     594:	2f2f2f2f 	svccs	0x002f2f2f
     598:	66150330 			; <UNDEFINED> instruction: 0x66150330
     59c:	01040200 	mrseq	r0, R12_usr
     5a0:	02004a06 	andeq	r4, r0, #24576	; 0x6000
     5a4:	03060104 	movweq	r0, #24836	; 0x6104
     5a8:	034c3c10 	movteq	r3, #52240	; 0xcc10
     5ac:	504c3c0a 	subpl	r3, ip, sl, lsl #24
     5b0:	00050232 	andeq	r0, r5, r2, lsr r2
     5b4:	02e00101 	rsceq	r0, r0, #1073741824	; 0x40000000
     5b8:	00020000 	andeq	r0, r2, r0
     5bc:	00000058 	andeq	r0, r0, r8, asr r0
     5c0:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     5c4:	0101000d 	tsteq	r1, sp
     5c8:	00000101 	andeq	r0, r0, r1, lsl #2
     5cc:	00000100 	andeq	r0, r0, r0, lsl #2
     5d0:	732f2e01 	teqvc	pc, #1, 28
     5d4:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     5d8:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     5dc:	61680000 	cmnvs	r8, r0
     5e0:	61776472 	cmnvs	r7, r2, ror r4
     5e4:	632e6572 	teqvs	lr, #478150656	; 0x1c800000
     5e8:	00000000 	andeq	r0, r0, r0
     5ec:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     5f0:	30316632 	eorscc	r6, r1, r2, lsr r6
     5f4:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     5f8:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
     5fc:	00000100 	andeq	r0, r0, r0, lsl #2
     600:	64726168 	ldrbtvs	r6, [r2], #-360	; 0x168
     604:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0x177
     608:	0000682e 	andeq	r6, r0, lr, lsr #16
     60c:	73750000 	cmnvc	r5, #0
     610:	00682e62 	rsbeq	r2, r8, r2, ror #28
     614:	00000000 	andeq	r0, r0, r0
     618:	08020500 	stmdaeq	r2, {r8, sl}
     61c:	03080006 	movweq	r0, #32774	; 0x8006
     620:	3b14012c 	blcc	500ad8 <__Stack_Size+0x5006d8>
     624:	0004024b 	andeq	r0, r4, fp, asr #4
     628:	05000101 	streq	r0, [r0, #-257]	; 0x101
     62c:	00000002 	andeq	r0, r0, r2
     630:	01310300 	teqeq	r1, r0, lsl #6
     634:	04025d14 	streq	r5, [r2], #-3348	; 0xd14
     638:	00010100 	andeq	r0, r1, r0, lsl #2
     63c:	06200205 	strteq	r0, [r0], -r5, lsl #4
     640:	3a030800 	bcc	c2648 <__Stack_Size+0xc2248>
     644:	0b031601 	bleq	c5e50 <__Stack_Size+0xc5a50>
     648:	0006022e 	andeq	r0, r6, lr, lsr #4
     64c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     650:	00000002 	andeq	r0, r0, r2
     654:	00cc0300 	sbceq	r0, ip, r0, lsl #6
     658:	493d2e01 	ldmdbmi	sp!, {r0, r9, sl, fp, sp}
     65c:	0402003d 	streq	r0, [r2], #-61	; 0x3d
     660:	20063101 	andcs	r3, r6, r1, lsl #2
     664:	01040200 	mrseq	r0, R12_usr
     668:	02002206 	andeq	r2, r0, #1610612736	; 0x60000000
     66c:	00220204 	eoreq	r0, r2, r4, lsl #4
     670:	1e020402 	cdpne	4, 0, cr0, cr2, cr2, {0}
     674:	02005a33 	andeq	r5, r0, #208896	; 0x33000
     678:	20060104 	andcs	r0, r6, r4, lsl #2
     67c:	02040200 	andeq	r0, r4, #0, 4
     680:	02002206 	andeq	r2, r0, #1610612736	; 0x60000000
     684:	321e0204 	andscc	r0, lr, #4, 4	; 0x40000000
     688:	01000a02 	tsteq	r0, r2, lsl #20
     68c:	02050001 	andeq	r0, r5, #1
     690:	08000630 	stmdaeq	r0, {r4, r5, r9, sl}
     694:	0100e103 	tsteq	r0, r3, lsl #2
     698:	4b1f2113 	blmi	7c8aec <__Stack_Size+0x7c86ec>
     69c:	4c4b674b 	mcrrmi	7, 4, r6, fp, cr11
     6a0:	01000c02 	tsteq	r0, r2, lsl #24
     6a4:	02050001 	andeq	r0, r5, #1
     6a8:	08000678 	stmdaeq	r0, {r3, r4, r5, r6, r9, sl}
     6ac:	0100eb03 	tsteq	r0, r3, lsl #22
     6b0:	04020015 	streq	r0, [r2], #-21
     6b4:	424d5901 	submi	r5, sp, #16384	; 0x4000
     6b8:	04020085 	streq	r0, [r2], #-133	; 0x85
     6bc:	0c035101 	stfeqs	f5, [r3], {1}
     6c0:	0402004a 	streq	r0, [r2], #-74	; 0x4a
     6c4:	4b3e4b01 	blmi	f932d0 <__Stack_Size+0xf92ed0>
     6c8:	01000902 	tsteq	r0, r2, lsl #18
     6cc:	02050001 	andeq	r0, r5, #1
     6d0:	080006d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl}
     6d4:	01019603 	tsteq	r1, r3, lsl #12
     6d8:	7f940316 	svcvc	0x00940316
     6dc:	0009023c 	andeq	r0, r9, ip, lsr r2
     6e0:	05000101 	streq	r0, [r0, #-257]	; 0x101
     6e4:	0006f002 	andeq	pc, r6, r2
     6e8:	01a30308 			; <UNDEFINED> instruction: 0x01a30308
     6ec:	214b1401 	cmpcs	fp, r1, lsl #8
     6f0:	0402002f 	streq	r0, [r2], #-47	; 0x2f
     6f4:	023d2401 	eorseq	r2, sp, #16777216	; 0x1000000
     6f8:	01010003 	tsteq	r1, r3
     6fc:	0c020500 	cfstr32eq	mvfx0, [r2], {-0}
     700:	03080007 	movweq	r0, #32775	; 0x8007
     704:	130101b0 	movwne	r0, #4528	; 0x11b0
     708:	07023322 	streq	r3, [r2, -r2, lsr #6]
     70c:	00010100 	andeq	r0, r1, r0, lsl #2
     710:	07200205 	streq	r0, [r0, -r5, lsl #4]!
     714:	ba030800 	blt	c271c <__Stack_Size+0xc231c>
     718:	09030101 	stmdbeq	r3, {r0, r8}
     71c:	20770301 	rsbscs	r0, r7, r1, lsl #6
     720:	3e222425 	cdpcc	4, 2, cr2, cr2, cr5, {1}
     724:	01000502 	tsteq	r0, r2, lsl #10
     728:	02050001 	andeq	r0, r5, #1
     72c:	08000738 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl}
     730:	0101df03 	tsteq	r1, r3, lsl #30
     734:	316a5c14 	cmncc	sl, r4, lsl ip
     738:	01000902 	tsteq	r0, r2, lsl #18
     73c:	02050001 	andeq	r0, r5, #1
     740:	08000764 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl}
     744:	0101f103 	tsteq	r1, r3, lsl #2
     748:	5a2c2224 	bpl	b08fe0 <__Stack_Size+0xb08be0>
     74c:	2631368b 	ldrtcs	r3, [r1], -fp, lsl #13
     750:	0602503e 			; <UNDEFINED> instruction: 0x0602503e
     754:	00010100 	andeq	r0, r1, r0, lsl #2
     758:	07ac0205 	streq	r0, [ip, r5, lsl #4]!
     75c:	8f030800 	svchi	0x00030800
     760:	0c030102 	stfeqs	f0, [r3], {2}
     764:	20740301 	rsbscs	r0, r4, r1, lsl #6
     768:	24200c03 	strtcs	r0, [r0], #-3075	; 0xc03
     76c:	2c313d1c 	ldccs	13, cr3, [r1], #-112	; 0xffffff90
     770:	311d2331 	tstcc	sp, r1, lsr r3
     774:	231d243b 	tstcs	sp, #989855744	; 0x3b000000
     778:	212f3073 	teqcs	pc, r3, ror r0	; <UNPREDICTABLE>
     77c:	1f213122 	svcne	0x00213122
     780:	09024921 	stmdbeq	r2, {r0, r5, r8, fp, lr}
     784:	00010100 	andeq	r0, r1, r0, lsl #2
     788:	08180205 	ldmdaeq	r8, {r0, r2, r9}
     78c:	b2030800 	andlt	r0, r3, #0, 16
     790:	59140102 	ldmdbpl	r4, {r1, r8}
     794:	02302f2f 	eorseq	r2, r0, #47, 30	; 0xbc
     798:	01010007 	tsteq	r1, r7
     79c:	3c020500 	cfstr32cc	mvfx0, [r2], {-0}
     7a0:	03080008 	movweq	r0, #32776	; 0x8008
     7a4:	030101cb 	movweq	r0, #4555	; 0x11cb
     7a8:	032001b7 	teqeq	r0, #-1073741779	; 0xc000002d
     7ac:	032e7ec9 	teqeq	lr, #3216	; 0xc90
     7b0:	032001b7 	teqeq	r0, #-1073741779	; 0xc000002d
     7b4:	2f207ecf 	svccs	0x00207ecf
     7b8:	21303231 	teqcs	r0, r1, lsr r2
     7bc:	0004022d 	andeq	r0, r4, sp, lsr #4
     7c0:	05000101 	streq	r0, [r0, #-257]	; 0x101
     7c4:	00086402 	andeq	r6, r8, r2, lsl #8
     7c8:	02bc0308 	adcseq	r0, ip, #8, 6	; 0x20000000
     7cc:	02001601 	andeq	r1, r0, #1048576	; 0x100000
     7d0:	02400104 	subeq	r0, r0, #4, 2
     7d4:	01010007 	tsteq	r1, r7
     7d8:	78020500 	stmdavc	r2, {r8, sl}
     7dc:	03080008 	movweq	r0, #32776	; 0x8008
     7e0:	130102c8 	movwne	r0, #4808	; 0x12c8
     7e4:	0022211f 	eoreq	r2, r2, pc, lsl r1
     7e8:	30010402 	andcc	r0, r1, r2, lsl #8
     7ec:	02002167 	andeq	r2, r0, #-1073741799	; 0xc0000019
     7f0:	4f2f0104 	svcmi	0x002f0104
     7f4:	00070223 	andeq	r0, r7, r3, lsr #4
     7f8:	05000101 	streq	r0, [r0, #-257]	; 0x101
     7fc:	00000002 	andeq	r0, r0, r2
     800:	02d90300 	sbcseq	r0, r9, #0, 6
     804:	02002e01 	andeq	r2, r0, #1, 28
     808:	4b2f0104 	blmi	bc0c20 <__Stack_Size+0xbc0820>
     80c:	040221b1 	streq	r2, [r2], #-433	; 0x1b1
     810:	00010100 	andeq	r0, r1, r0, lsl #2
     814:	08ac0205 	stmiaeq	ip!, {r0, r2, r9}
     818:	e3030800 	movw	r0, #14336	; 0x3800
     81c:	2f220102 	svccs	0x00220102
     820:	211f2130 	tstcs	pc, r0, lsr r1	; <UNPREDICTABLE>
     824:	01040200 	mrseq	r0, R12_usr
     828:	02004b24 	andeq	r4, r0, #36, 22	; 0x9000
     82c:	3d3d0104 	ldfccs	f0, [sp, #-16]!
     830:	01040200 	mrseq	r0, R12_usr
     834:	232f3e3d 	teqcs	pc, #976	; 0x3d0
     838:	00090225 	andeq	r0, r9, r5, lsr #4
     83c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     840:	0008f802 	andeq	pc, r8, r2, lsl #16
     844:	02fe0308 	rscseq	r0, lr, #8, 6	; 0x20000000
     848:	06021601 	streq	r1, [r2], -r1, lsl #12
     84c:	00010100 	andeq	r0, r1, r0, lsl #2
     850:	09040205 	stmdbeq	r4, {r0, r2, r9}
     854:	85030800 	strhi	r0, [r3, #-2048]	; 0x800
     858:	3d140103 	ldfccs	f0, [r4, #-12]
     85c:	01000902 	tsteq	r0, r2, lsl #18
     860:	02050001 	andeq	r0, r5, #1
     864:	0800091c 	stmdaeq	r0, {r2, r3, r4, r8, fp}
     868:	01038e03 	tsteq	r3, r3, lsl #28
     86c:	4c302214 	lfmmi	f2, 4, [r0], #-80	; 0xffffffb0
     870:	01000202 	tsteq	r0, r2, lsl #4
     874:	02050001 	andeq	r0, r5, #1
     878:	08000930 	stmdaeq	r0, {r4, r5, r8, fp}
     87c:	01039a03 	tsteq	r3, r3, lsl #20
     880:	04024b14 	streq	r4, [r2], #-2836	; 0xb14
     884:	00010100 	andeq	r0, r1, r0, lsl #2
     888:	09400205 	stmdbeq	r0, {r0, r2, r9}^
     88c:	a0030800 	andge	r0, r3, r0, lsl #16
     890:	30150103 	andscc	r0, r5, r3, lsl #2
     894:	00090226 	andeq	r0, r9, r6, lsr #4
     898:	021b0101 	andseq	r0, fp, #1073741824	; 0x40000000
     89c:	00020000 	andeq	r0, r2, r0
     8a0:	00000082 	andeq	r0, r0, r2, lsl #1
     8a4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     8a8:	0101000d 	tsteq	r1, sp
     8ac:	00000101 	andeq	r0, r0, r1, lsl #2
     8b0:	00000100 	andeq	r0, r0, r0, lsl #2
     8b4:	732f2e01 	teqvc	pc, #1, 28
     8b8:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     8bc:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     8c0:	752f2e00 	strvc	r2, [pc, #-3584]!	; fffffac8 <BootRAM+0xef70269>
     8c4:	6c5f6273 	lfmvs	f6, 2, [pc], {115}	; 0x73
     8c8:	00006269 	andeq	r6, r0, r9, ror #4
     8cc:	2e756664 	cdpcs	6, 7, cr6, cr5, cr4, {3}
     8d0:	00000063 	andeq	r0, r0, r3, rrx
     8d4:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     8d8:	31663233 	cmncc	r6, r3, lsr r2
     8dc:	745f7830 	ldrbvc	r7, [pc], #-2096	; 8e4 <__Stack_Size+0x4e4>
     8e0:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
     8e4:	00010068 	andeq	r0, r1, r8, rrx
     8e8:	62737500 	rsbsvs	r7, r3, #0, 10
     8ec:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
     8f0:	00682e65 	rsbeq	r2, r8, r5, ror #28
     8f4:	64000002 	strvs	r0, [r0], #-2
     8f8:	682e7566 	stmdavs	lr!, {r1, r2, r5, r6, r8, sl, ip, sp, lr}
     8fc:	00000000 	andeq	r0, r0, r0
     900:	5f627375 	svcpl	0x00627375
     904:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
     908:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     90c:	73750000 	cmnvc	r5, #0
     910:	00682e62 	rsbeq	r2, r8, r2, ror #28
     914:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
     918:	77647261 	strbvc	r7, [r4, -r1, ror #4]!
     91c:	2e657261 	cdpcs	2, 6, cr7, cr5, cr1, {3}
     920:	00000068 	andeq	r0, r0, r8, rrx
     924:	05000000 	streq	r0, [r0, #-0]
     928:	00095802 	andeq	r5, r9, r2, lsl #16
     92c:	01370308 	teqeq	r7, r8, lsl #6
     930:	211c3213 	tstcs	ip, r3, lsl r2
     934:	21212121 	teqcs	r1, r1, lsr #2
     938:	211e2221 	tstcs	lr, r1, lsr #4
     93c:	214b2f2f 	cmpcs	fp, pc, lsr #30
     940:	022f211f 	eoreq	r2, pc, #-1073741817	; 0xc0000007
     944:	01010015 	tsteq	r1, r5, lsl r0
     948:	b4020500 	strlt	r0, [r2], #-1280	; 0x500
     94c:	03080009 	movweq	r0, #32777	; 0x8009
     950:	210102be 			; <UNDEFINED> instruction: 0x210102be
     954:	1f211f21 	svcne	0x00211f21
     958:	21221e23 	teqcs	r2, r3, lsr #28
     95c:	0e03222f 	cdpeq	2, 0, cr2, cr3, cr15, {1}
     960:	2e73032e 	cdpcs	3, 7, cr0, cr3, cr14, {1}
     964:	242f4230 	strtcs	r4, [pc], #-560	; 96c <__Stack_Size+0x56c>
     968:	0008022c 	andeq	r0, r8, ip, lsr #4
     96c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     970:	00000002 	andeq	r0, r0, r2
     974:	02d60300 	sbcseq	r0, r6, #0, 6
     978:	00010201 	andeq	r0, r1, r1, lsl #4
     97c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     980:	0009f802 	andeq	pc, r9, r2, lsl #16
     984:	02d90308 	sbcseq	r0, r9, #8, 6	; 0x20000000
     988:	4b211301 	blmi	845594 <__Stack_Size+0x845194>
     98c:	05022222 	streq	r2, [r2, #-546]	; 0x222
     990:	00010100 	andeq	r0, r1, r0, lsl #2
     994:	0a100205 	beq	4011b0 <__Stack_Size+0x400db0>
     998:	e2030800 	and	r0, r3, #0, 16
     99c:	21130102 	tstcs	r3, r2, lsl #2
     9a0:	0222224b 	eoreq	r2, r2, #-1342177276	; 0xb0000004
     9a4:	01010005 	tsteq	r1, r5
     9a8:	28020500 	stmdacs	r2, {r8, sl}
     9ac:	0308000a 	movweq	r0, #32778	; 0x800a
     9b0:	220102ec 	andcs	r0, r1, #236, 4	; 0xc000000e
     9b4:	2f4b211f 	svccs	0x004b211f
     9b8:	07023e22 	streq	r3, [r2, -r2, lsr #28]
     9bc:	00010100 	andeq	r0, r1, r0, lsl #2
     9c0:	0a500205 	beq	14011dc <__Stack_Size+0x1400ddc>
     9c4:	f6030800 			; <UNDEFINED> instruction: 0xf6030800
     9c8:	21210102 	teqcs	r1, r2, lsl #2
     9cc:	02842267 	addeq	r2, r4, #1879048198	; 0x70000006
     9d0:	01010009 	tsteq	r1, r9
     9d4:	84020500 	strhi	r0, [r2], #-1280	; 0x500
     9d8:	0308000a 	movweq	r0, #32778	; 0x800a
     9dc:	030102ff 	movweq	r0, #4863	; 0x12ff
     9e0:	1c242013 	stcne	0, cr2, [r4], #-76	; 0xffffffb4
     9e4:	0402005a 	streq	r0, [r2], #-90	; 0x5a
     9e8:	02003e01 	andeq	r3, r0, #1, 28
     9ec:	00590204 	subseq	r0, r9, r4, lsl #4
     9f0:	57020402 	strpl	r0, [r2, -r2, lsl #8]
     9f4:	0a025a33 	beq	972c8 <__Stack_Size+0x96ec8>
     9f8:	00010100 	andeq	r0, r1, r0, lsl #2
     9fc:	0ad00205 	beq	ff401218 <BootRAM+0xe3719b9>
     a00:	ca030800 	bgt	c2a08 <__Stack_Size+0xc2608>
     a04:	24310100 	ldrtcs	r0, [r1], #-256	; 0x100
     a08:	1f21321c 	svcne	0x0021321c
     a0c:	22221e23 	eorcs	r1, r2, #560	; 0x230
     a10:	304b5a22 	subcc	r5, fp, r2, lsr #20
     a14:	21232f1f 	teqcs	r3, pc, lsl pc
     a18:	2f30211f 	svccs	0x0030211f
     a1c:	44244c2f 	strtmi	r4, [r4], #-3119	; 0xc2f
     a20:	4c3d312f 	ldfmis	f3, [sp], #-188	; 0xffffff44
     a24:	4b3d3167 	blmi	f4cfc8 <__Stack_Size+0xf4cbc8>
     a28:	31312f25 	teqcc	r1, r5, lsr #30
     a2c:	313c0903 	teqcc	ip, r3, lsl #18
     a30:	2f581d03 	svccs	0x00581d03
     a34:	4c30353f 	cfldr32mi	mvfx3, [r0], #-252	; 0xffffff04
     a38:	3321211f 	teqcc	r1, #-1073741817	; 0xc0000007
     a3c:	312f5930 	teqcc	pc, r0, lsr r9	; <UNPREDICTABLE>
     a40:	30303e31 	eorscc	r3, r0, r1, lsr lr
     a44:	2f593143 	svccs	0x00593143
     a48:	3535432f 	ldrcc	r4, [r5, #-815]!	; 0x32f
     a4c:	3d305931 	ldccc	9, cr5, [r0, #-196]!	; 0xffffff3c
     a50:	211f3d1f 	tstcs	pc, pc, lsl sp	; <UNPREDICTABLE>
     a54:	4b764fc9 	blmi	1d94980 <__Stack_Size+0x1d94580>
     a58:	2f302f41 	svccs	0x00302f41
     a5c:	352f302f 	strcc	r3, [pc, #-47]!	; a35 <__Stack_Size+0x635>
     a60:	303d5a31 	eorscc	r5, sp, r1, lsr sl
     a64:	2f362f30 	svccs	0x00362f30
     a68:	1d022531 	cfstr32ne	mvfx2, [r2, #-196]	; 0xffffff3c
     a6c:	00010100 	andeq	r0, r1, r0, lsl #2
     a70:	00000205 	andeq	r0, r0, r5, lsl #4
     a74:	a0030000 	andge	r0, r3, r0
     a78:	2f130103 	svccs	0x00130103
     a7c:	01000402 	tsteq	r0, r2, lsl #8
     a80:	02050001 	andeq	r0, r5, #1
     a84:	00000000 	andeq	r0, r0, r0
     a88:	0103a403 	tsteq	r3, r3, lsl #8
     a8c:	00060213 	andeq	r0, r6, r3, lsl r2
     a90:	05000101 	streq	r0, [r0, #-257]	; 0x101
     a94:	000cdc02 	andeq	sp, ip, r2, lsl #24
     a98:	03a80308 			; <UNDEFINED> instruction: 0x03a80308
     a9c:	022f1301 	eoreq	r1, pc, #67108864	; 0x4000000
     aa0:	01010004 	tsteq	r1, r4
     aa4:	e8020500 	stmda	r2, {r8, sl}
     aa8:	0308000c 	movweq	r0, #32780	; 0x800c
     aac:	000103ac 	andeq	r0, r1, ip, lsr #7
     ab0:	15010402 	strne	r0, [r1, #-1026]	; 0x402
     ab4:	01000202 	tsteq	r0, r2, lsl #4
     ab8:	0004c701 	andeq	ip, r4, r1, lsl #14
     abc:	45000200 	strmi	r0, [r0, #-512]	; 0x200
     ac0:	02000000 	andeq	r0, r0, #0
     ac4:	0d0efb01 	vstreq	d15, [lr, #-4]
     ac8:	01010100 	mrseq	r0, (UNDEF: 17)
     acc:	00000001 	andeq	r0, r0, r1
     ad0:	01000001 	tsteq	r0, r1
     ad4:	5f627375 	svcpl	0x00627375
     ad8:	0062696c 	rsbeq	r6, r2, ip, ror #18
     adc:	62737500 	rsbsvs	r7, r3, #0, 10
     ae0:	6765725f 			; <UNDEFINED> instruction: 0x6765725f
     ae4:	00632e73 	rsbeq	r2, r3, r3, ror lr
     ae8:	75000001 	strvc	r0, [r0, #-1]
     aec:	745f6273 	ldrbvc	r6, [pc], #-627	; af4 <__Stack_Size+0x6f4>
     af0:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
     af4:	00010068 	andeq	r0, r1, r8, rrx
     af8:	62737500 	rsbsvs	r7, r3, #0, 10
     afc:	6765725f 			; <UNDEFINED> instruction: 0x6765725f
     b00:	00682e73 	rsbeq	r2, r8, r3, ror lr
     b04:	00000001 	andeq	r0, r0, r1
     b08:	00020500 	andeq	r0, r2, r0, lsl #10
     b0c:	03000000 	movweq	r0, #0
     b10:	02130122 	andseq	r0, r3, #-2147483640	; 0x80000008
     b14:	01010006 	tsteq	r1, r6
     b18:	00020500 	andeq	r0, r2, r0, lsl #10
     b1c:	03000000 	movweq	r0, #0
     b20:	2f13012e 	svccs	0x0013012e
     b24:	01000402 	tsteq	r0, r2, lsl #8
     b28:	02050001 	andeq	r0, r5, #1
     b2c:	00000000 	andeq	r0, r0, r0
     b30:	13013a03 	movwne	r3, #6659	; 0x1a03
     b34:	01000602 	tsteq	r0, r2, lsl #12
     b38:	02050001 	andeq	r0, r5, #1
     b3c:	00000000 	andeq	r0, r0, r0
     b40:	0100c603 	tsteq	r0, r3, lsl #12
     b44:	04022f13 	streq	r2, [r2], #-3859	; 0xf13
     b48:	00010100 	andeq	r0, r1, r0, lsl #2
     b4c:	00000205 	andeq	r0, r0, r5, lsl #4
     b50:	d2030000 	andle	r0, r3, #0
     b54:	2f130100 	svccs	0x00130100
     b58:	01000402 	tsteq	r0, r2, lsl #8
     b5c:	02050001 	andeq	r0, r5, #1
     b60:	00000000 	andeq	r0, r0, r0
     b64:	0100de03 	tsteq	r0, r3, lsl #28
     b68:	00060213 	andeq	r0, r6, r3, lsl r2
     b6c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     b70:	00000002 	andeq	r0, r0, r2
     b74:	00ea0300 	rsceq	r0, sl, r0, lsl #6
     b78:	022f1301 	eoreq	r1, pc, #67108864	; 0x4000000
     b7c:	01010004 	tsteq	r1, r4
     b80:	00020500 	andeq	r0, r2, r0, lsl #10
     b84:	03000000 	movweq	r0, #0
     b88:	130100f6 	movwne	r0, #4342	; 0x10f6
     b8c:	01000802 	tsteq	r0, r2, lsl #16
     b90:	02050001 	andeq	r0, r5, #1
     b94:	00000000 	andeq	r0, r0, r0
     b98:	01018203 	tsteq	r1, r3, lsl #4
     b9c:	04022f13 	streq	r2, [r2], #-3859	; 0xf13
     ba0:	00010100 	andeq	r0, r1, r0, lsl #2
     ba4:	00000205 	andeq	r0, r0, r5, lsl #4
     ba8:	8f030000 	svchi	0x00030000
     bac:	02130101 	andseq	r0, r3, #1073741824	; 0x40000000
     bb0:	01010007 	tsteq	r1, r7
     bb4:	00020500 	andeq	r0, r2, r0, lsl #10
     bb8:	03000000 	movweq	r0, #0
     bbc:	1301019b 	movwne	r0, #4507	; 0x119b
     bc0:	00020267 	andeq	r0, r2, r7, ror #4
     bc4:	05000101 	streq	r0, [r0, #-257]	; 0x101
     bc8:	00000002 	andeq	r0, r0, r2
     bcc:	01a80300 			; <UNDEFINED> instruction: 0x01a80300
     bd0:	0e021301 	cdpeq	3, 0, cr1, cr2, cr1, {0}
     bd4:	00010100 	andeq	r0, r1, r0, lsl #2
     bd8:	00000205 	andeq	r0, r0, r5, lsl #4
     bdc:	b4030000 	strlt	r0, [r3], #-0
     be0:	67130101 	ldrvs	r0, [r3, -r1, lsl #2]
     be4:	01000302 	tsteq	r0, r2, lsl #6
     be8:	02050001 	andeq	r0, r5, #1
     bec:	08000cec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, fp}
     bf0:	0101c103 	tsteq	r1, r3, lsl #2
     bf4:	00150213 	andseq	r0, r5, r3, lsl r2
     bf8:	05000101 	streq	r0, [r0, #-257]	; 0x101
     bfc:	00000002 	andeq	r0, r0, r2
     c00:	01ce0300 	biceq	r0, lr, r0, lsl #6
     c04:	15021301 	strne	r1, [r2, #-769]	; 0x301
     c08:	00010100 	andeq	r0, r1, r0, lsl #2
     c0c:	00000205 	andeq	r0, r0, r5, lsl #4
     c10:	db030000 	blle	c0c18 <__Stack_Size+0xc0818>
     c14:	41030101 	tstmi	r3, r1, lsl #2
     c18:	00c20301 	sbceq	r0, r2, r1, lsl #6
     c1c:	7fbe0358 	svcvc	0x00be0358
     c20:	00c20320 	sbceq	r0, r2, r0, lsr #6
     c24:	303e2220 	eorscc	r2, lr, r0, lsr #4
     c28:	01000502 	tsteq	r0, r2, lsl #10
     c2c:	02050001 	andeq	r0, r5, #1
     c30:	00000000 	andeq	r0, r0, r0
     c34:	0101f003 	tsteq	r1, r3
     c38:	03026713 	movweq	r6, #10003	; 0x2713
     c3c:	00010100 	andeq	r0, r1, r0, lsl #2
     c40:	00000205 	andeq	r0, r0, r5, lsl #4
     c44:	fc030000 	stc2	0, cr0, [r3], {-0}
     c48:	67130101 	ldrvs	r0, [r3, -r1, lsl #2]
     c4c:	01000302 	tsteq	r0, r2, lsl #6
     c50:	02050001 	andeq	r0, r5, #1
     c54:	00000000 	andeq	r0, r0, r0
     c58:	01028803 	tsteq	r2, r3, lsl #16
     c5c:	000f0213 	andeq	r0, pc, r3, lsl r2	; <UNPREDICTABLE>
     c60:	05000101 	streq	r0, [r0, #-257]	; 0x101
     c64:	000d1602 	andeq	r1, sp, r2, lsl #12
     c68:	02940308 	addseq	r0, r4, #8, 6	; 0x20000000
     c6c:	0f021301 	svceq	0x00021301
     c70:	00010100 	andeq	r0, r1, r0, lsl #2
     c74:	00000205 	andeq	r0, r0, r5, lsl #4
     c78:	a0030000 	andge	r0, r3, r0
     c7c:	02130102 	andseq	r0, r3, #-2147483648	; 0x80000000
     c80:	0101000f 	tsteq	r1, pc
     c84:	00020500 	andeq	r0, r2, r0, lsl #10
     c88:	03000000 	movweq	r0, #0
     c8c:	130102ac 	movwne	r0, #4780	; 0x12ac
     c90:	01000e02 	tsteq	r0, r2, lsl #28
     c94:	02050001 	andeq	r0, r5, #1
     c98:	08000d34 	stmdaeq	r0, {r2, r4, r5, r8, sl, fp}
     c9c:	0102b703 	tsteq	r2, r3, lsl #14
     ca0:	000e0213 	andeq	r0, lr, r3, lsl r2
     ca4:	05000101 	streq	r0, [r0, #-257]	; 0x101
     ca8:	00000002 	andeq	r0, r0, r2
     cac:	02c20300 	sbceq	r0, r2, #0, 6
     cb0:	0f021301 	svceq	0x00021301
     cb4:	00010100 	andeq	r0, r1, r0, lsl #2
     cb8:	00000205 	andeq	r0, r0, r5, lsl #4
     cbc:	cd030000 	stcgt	0, cr0, [r3, #-0]
     cc0:	02130102 	andseq	r0, r3, #-2147483648	; 0x80000000
     cc4:	0101000f 	tsteq	r1, pc
     cc8:	00020500 	andeq	r0, r2, r0, lsl #10
     ccc:	03000000 	movweq	r0, #0
     cd0:	130102d8 	movwne	r0, #4824	; 0x12d8
     cd4:	01000e02 	tsteq	r0, r2, lsl #28
     cd8:	02050001 	andeq	r0, r5, #1
     cdc:	00000000 	andeq	r0, r0, r0
     ce0:	0102e303 	tsteq	r2, r3, lsl #6
     ce4:	05028313 	streq	r8, [r2, #-787]	; 0x313
     ce8:	00010100 	andeq	r0, r1, r0, lsl #2
     cec:	00000205 	andeq	r0, r0, r5, lsl #4
     cf0:	ee030000 	cdp	0, 0, cr0, cr3, cr0, {0}
     cf4:	83130102 	tsthi	r3, #-2147483648	; 0x80000000
     cf8:	01000502 	tsteq	r0, r2, lsl #10
     cfc:	02050001 	andeq	r0, r5, #1
     d00:	00000000 	andeq	r0, r0, r0
     d04:	0102f903 	tsteq	r2, r3, lsl #18
     d08:	000c0213 	andeq	r0, ip, r3, lsl r2
     d0c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     d10:	00000002 	andeq	r0, r0, r2
     d14:	03840300 	orreq	r0, r4, #0, 6
     d18:	0e021301 	cdpeq	3, 0, cr1, cr2, cr1, {0}
     d1c:	00010100 	andeq	r0, r1, r0, lsl #2
     d20:	00000205 	andeq	r0, r0, r5, lsl #4
     d24:	8f030000 	svchi	0x00030000
     d28:	02130103 	andseq	r0, r3, #-1073741824	; 0xc0000000
     d2c:	01010010 	tsteq	r1, r0, lsl r0
     d30:	00020500 	andeq	r0, r2, r0, lsl #10
     d34:	03000000 	movweq	r0, #0
     d38:	1301039a 	movwne	r0, #5018	; 0x139a
     d3c:	01001002 	tsteq	r0, r2
     d40:	02050001 	andeq	r0, r5, #1
     d44:	08000d50 	stmdaeq	r0, {r4, r6, r8, sl, fp}
     d48:	0103a503 	tsteq	r3, r3, lsl #10
     d4c:	04020013 	streq	r0, [r2], #-19
     d50:	02820601 	addeq	r0, r2, #1048576	; 0x100000
     d54:	01010008 	tsteq	r1, r8
     d58:	70020500 	andvc	r0, r2, r0, lsl #10
     d5c:	0308000d 	movweq	r0, #32781	; 0x800d
     d60:	130103b0 	movwne	r0, #5040	; 0x13b0
     d64:	01040200 	mrseq	r0, R12_usr
     d68:	08028206 	stmdaeq	r2, {r1, r2, r9, pc}
     d6c:	00010100 	andeq	r0, r1, r0, lsl #2
     d70:	00000205 	andeq	r0, r0, r5, lsl #4
     d74:	bc030000 	stclt	0, cr0, [r3], {-0}
     d78:	02130103 	andseq	r0, r3, #-1073741824	; 0xc0000000
     d7c:	0101000f 	tsteq	r1, pc
     d80:	00020500 	andeq	r0, r2, r0, lsl #10
     d84:	03000000 	movweq	r0, #0
     d88:	130103c7 	movwne	r0, #5063	; 0x13c7
     d8c:	00030267 	andeq	r0, r3, r7, ror #4
     d90:	05000101 	streq	r0, [r0, #-257]	; 0x101
     d94:	00000002 	andeq	r0, r0, r2
     d98:	03d30300 	bicseq	r0, r3, #0, 6
     d9c:	10021301 	andne	r1, r2, r1, lsl #6
     da0:	00010100 	andeq	r0, r1, r0, lsl #2
     da4:	00000205 	andeq	r0, r0, r5, lsl #4
     da8:	df030000 	svcle	0x00030000
     dac:	02130103 	andseq	r0, r3, #-1073741824	; 0xc0000000
     db0:	01010010 	tsteq	r1, r0, lsl r0
     db4:	90020500 	andls	r0, r2, r0, lsl #10
     db8:	0308000d 	movweq	r0, #32781	; 0x800d
     dbc:	130103ea 	movwne	r0, #5098	; 0x13ea
     dc0:	0004029f 	muleq	r4, pc, r2	; <UNPREDICTABLE>
     dc4:	05000101 	streq	r0, [r0, #-257]	; 0x101
     dc8:	000dac02 	andeq	sl, sp, r2, lsl #24
     dcc:	03f50308 	mvnseq	r0, #8, 6	; 0x20000000
     dd0:	02831301 	addeq	r1, r3, #67108864	; 0x4000000
     dd4:	01010006 	tsteq	r1, r6
     dd8:	c8020500 	stmdagt	r2, {r8, sl}
     ddc:	0308000d 	movweq	r0, #32781	; 0x800d
     de0:	13010481 	movwne	r0, #5249	; 0x1481
     de4:	01000e02 	tsteq	r0, r2, lsl #28
     de8:	02050001 	andeq	r0, r5, #1
     dec:	00000000 	andeq	r0, r0, r0
     df0:	01048d03 	tsteq	r4, r3, lsl #26
     df4:	04020013 	streq	r0, [r2], #-19
     df8:	002e0601 	eoreq	r0, lr, r1, lsl #12
     dfc:	9e020402 	cdpls	4, 0, cr0, cr2, cr2, {0}
     e00:	01000702 	tsteq	r0, r2, lsl #14
     e04:	02050001 	andeq	r0, r5, #1
     e08:	08000de4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, fp}
     e0c:	01049903 	tsteq	r4, r3, lsl #18
     e10:	04020013 	streq	r0, [r2], #-19
     e14:	00ac0601 	adceq	r0, ip, r1, lsl #12
     e18:	9e020402 	cdpls	4, 0, cr0, cr2, cr2, {0}
     e1c:	01000b02 	tsteq	r0, r2, lsl #22
     e20:	02050001 	andeq	r0, r5, #1
     e24:	00000000 	andeq	r0, r0, r0
     e28:	0104a403 	tsteq	r4, r3, lsl #8
     e2c:	07029113 	smladeq	r2, r3, r1, r9
     e30:	00010100 	andeq	r0, r1, r0, lsl #2
     e34:	00000205 	andeq	r0, r0, r5, lsl #4
     e38:	af030000 	svcge	0x00030000
     e3c:	91130104 	tstls	r3, r4, lsl #2
     e40:	01000702 	tsteq	r0, r2, lsl #14
     e44:	02050001 	andeq	r0, r5, #1
     e48:	00000000 	andeq	r0, r0, r0
     e4c:	0104bc03 	tsteq	r4, r3, lsl #24
     e50:	001b0221 	andseq	r0, fp, r1, lsr #4
     e54:	05000101 	streq	r0, [r0, #-257]	; 0x101
     e58:	00000002 	andeq	r0, r0, r2
     e5c:	04c80300 	strbeq	r0, [r8], #768	; 0x300
     e60:	10021301 	andne	r1, r2, r1, lsl #6
     e64:	00010100 	andeq	r0, r1, r0, lsl #2
     e68:	00000205 	andeq	r0, r0, r5, lsl #4
     e6c:	d4030000 	strle	r0, [r3], #-0
     e70:	02130104 	andseq	r0, r3, #4, 2
     e74:	01010010 	tsteq	r1, r0, lsl r0
     e78:	00020500 	andeq	r0, r2, r0, lsl #10
     e7c:	03000000 	movweq	r0, #0
     e80:	130104df 	movwne	r0, #5343	; 0x14df
     e84:	0004029f 	muleq	r4, pc, r2	; <UNPREDICTABLE>
     e88:	05000101 	streq	r0, [r0, #-257]	; 0x101
     e8c:	00000002 	andeq	r0, r0, r2
     e90:	04ea0300 	strbteq	r0, [sl], #768	; 0x300
     e94:	02831301 	addeq	r1, r3, #67108864	; 0x4000000
     e98:	01010006 	tsteq	r1, r6
     e9c:	00020500 	andeq	r0, r2, r0, lsl #10
     ea0:	03000000 	movweq	r0, #0
     ea4:	130104f6 	movwne	r0, #5366	; 0x14f6
     ea8:	0200211f 	andeq	r2, r0, #-1073741817	; 0xc0000007
     eac:	20060104 	andcs	r0, r6, r4, lsl #2
     eb0:	02040200 	andeq	r0, r4, #0, 4
     eb4:	02005808 	andeq	r5, r0, #8, 16	; 0x80000
     eb8:	00f20104 	rscseq	r0, r2, r4, lsl #2
     ebc:	9e020402 	cdpls	4, 0, cr0, cr2, cr2, {0}
     ec0:	01040200 	mrseq	r0, R12_usr
     ec4:	0402002e 	streq	r0, [r2], #-46	; 0x2e
     ec8:	02120802 	andseq	r0, r2, #131072	; 0x20000
     ecc:	0101000e 	tsteq	r1, lr
     ed0:	00020500 	andeq	r0, r2, r0, lsl #10
     ed4:	03000000 	movweq	r0, #0
     ed8:	13010582 	movwne	r0, #5506	; 0x1582
     edc:	01040200 	mrseq	r0, R12_usr
     ee0:	02002e06 	andeq	r2, r0, #6, 28	; 0x60
     ee4:	4a080204 	bmi	2016fc <__Stack_Size+0x2012fc>
     ee8:	01040200 	mrseq	r0, R12_usr
     eec:	000e0290 	muleq	lr, r0, r2
     ef0:	05000101 	streq	r0, [r0, #-257]	; 0x101
     ef4:	00000002 	andeq	r0, r0, r2
     ef8:	058e0300 	streq	r0, [lr, #768]	; 0x300
     efc:	02001301 	andeq	r1, r0, #67108864	; 0x4000000
     f00:	2e060104 	adfcss	f0, f6, f4
     f04:	02040200 	andeq	r0, r4, #0, 4
     f08:	02004a08 	andeq	r4, r0, #8, 20	; 0x8000
     f0c:	02900104 	addseq	r0, r0, #4, 2
     f10:	0101000e 	tsteq	r1, lr
     f14:	00020500 	andeq	r0, r2, r0, lsl #10
     f18:	03000000 	movweq	r0, #0
     f1c:	1301059a 	movwne	r0, #5530	; 0x159a
     f20:	00070291 	muleq	r7, r1, r2
     f24:	05000101 	streq	r0, [r0, #-257]	; 0x101
     f28:	00000002 	andeq	r0, r0, r2
     f2c:	05a60300 	streq	r0, [r6, #768]!	; 0x300
     f30:	02911301 	addseq	r1, r1, #67108864	; 0x4000000
     f34:	01010007 	tsteq	r1, r7
     f38:	00020500 	andeq	r0, r2, r0, lsl #10
     f3c:	03000000 	movweq	r0, #0
     f40:	130105b2 	movwne	r0, #5554	; 0x15b2
     f44:	25489fbc 	strbcs	r9, [r8, #-4028]	; 0xfbc
     f48:	01000702 	tsteq	r0, r2, lsl #14
     f4c:	02050001 	andeq	r0, r5, #1
     f50:	00000000 	andeq	r0, r0, r0
     f54:	0105c303 	tsteq	r5, r3, lsl #6
     f58:	30bc3013 	adcscc	r3, ip, r3, lsl r0
     f5c:	01000d02 	tsteq	r0, r2, lsl #26
     f60:	02050001 	andeq	r0, r5, #1
     f64:	00000000 	andeq	r0, r0, r0
     f68:	0105d603 	tsteq	r5, r3, lsl #12
     f6c:	00030216 	andeq	r0, r3, r6, lsl r2
     f70:	05000101 	streq	r0, [r0, #-257]	; 0x101
     f74:	00000002 	andeq	r0, r0, r2
     f78:	05e30300 	strbeq	r0, [r3, #768]!	; 0x300
     f7c:	02301601 	eorseq	r1, r0, #1048576	; 0x100000
     f80:	01010003 	tsteq	r1, r3
     f84:	000000b4 	strheq	r0, [r0], -r4
     f88:	00600002 	rsbeq	r0, r0, r2
     f8c:	01020000 	mrseq	r0, (UNDEF: 2)
     f90:	000d0efb 	strdeq	r0, [sp], -fp
     f94:	01010101 	tsteq	r1, r1, lsl #2
     f98:	01000000 	mrseq	r0, (UNDEF: 0)
     f9c:	75010000 	strvc	r0, [r1, #-0]
     fa0:	6c5f6273 	lfmvs	f6, 2, [pc], {115}	; 0x73
     fa4:	00006269 	andeq	r6, r0, r9, ror #4
     fa8:	5f627375 	svcpl	0x00627375
     fac:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
     fb0:	00010063 	andeq	r0, r1, r3, rrx
     fb4:	62737500 	rsbsvs	r7, r3, #0, 10
     fb8:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     fbc:	00682e65 	rsbeq	r2, r8, r5, ror #28
     fc0:	75000001 	strvc	r0, [r0, #-1]
     fc4:	725f6273 	subsvc	r6, pc, #805306375	; 0x30000007
     fc8:	2e736765 	cdpcs	7, 7, cr6, cr3, cr5, {3}
     fcc:	00010068 	andeq	r0, r1, r8, rrx
     fd0:	62737500 	rsbsvs	r7, r3, #0, 10
     fd4:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
     fd8:	00682e74 	rsbeq	r2, r8, r4, ror lr
     fdc:	75000001 	strvc	r0, [r0, #-1]
     fe0:	635f6273 	cmpvs	pc, #805306375	; 0x30000007
     fe4:	2e65726f 	cdpcs	2, 6, cr7, cr5, cr15, {3}
     fe8:	00010068 	andeq	r0, r1, r8, rrx
     fec:	05000000 	streq	r0, [r0, #-0]
     ff0:	000e2402 	andeq	r2, lr, r2, lsl #8
     ff4:	01290308 	teqeq	r9, r8, lsl #6
     ff8:	593e8423 	ldmdbpl	lr!, {r0, r1, r5, sl, pc}
     ffc:	3d1f3d36 	ldccc	13, cr3, [pc, #-216]	; f2c <__Stack_Size+0xb2c>
    1000:	0395914b 	orrseq	r9, r5, #-1073741806	; 0xc0000012
    1004:	30213c17 	eorcc	r3, r1, r7, lsl ip
    1008:	59304259 	ldmdbpl	r0!, {r0, r3, r4, r6, r9, lr}
    100c:	30593043 	subscc	r3, r9, r3, asr #32
    1010:	03f31308 	mvnseq	r1, #8, 6	; 0x20000000
    1014:	31672009 	cmncc	r7, r9
    1018:	933f5c5b 	teqls	pc, #23296	; 0x5b00
    101c:	1602311d 			; <UNDEFINED> instruction: 0x1602311d
    1020:	00010100 	andeq	r0, r1, r0, lsl #2
    1024:	00000205 	andeq	r0, r0, r5, lsl #4
    1028:	9e030000 	cdpls	0, 0, cr0, cr3, cr0, {0}
    102c:	76230101 	strtvc	r0, [r3], -r1, lsl #2
    1030:	31675a3e 	cmncc	r7, lr, lsr sl
    1034:	5b313f5b 	blpl	c50da8 <__Stack_Size+0xc509a8>
    1038:	01010008 	tsteq	r1, r8
    103c:	00000063 	andeq	r0, r0, r3, rrx
    1040:	00450002 	subeq	r0, r5, r2
    1044:	01020000 	mrseq	r0, (UNDEF: 2)
    1048:	000d0efb 	strdeq	r0, [sp], -fp
    104c:	01010101 	tsteq	r1, r1, lsl #2
    1050:	01000000 	mrseq	r0, (UNDEF: 0)
    1054:	75010000 	strvc	r0, [r1, #-0]
    1058:	6c5f6273 	lfmvs	f6, 2, [pc], {115}	; 0x73
    105c:	00006269 	andeq	r6, r0, r9, ror #4
    1060:	5f627375 	svcpl	0x00627375
    1064:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    1068:	0100632e 	tsteq	r0, lr, lsr #6
    106c:	73750000 	cmnvc	r5, #0
    1070:	79745f62 	ldmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    1074:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
    1078:	00000100 	andeq	r0, r0, r0, lsl #2
    107c:	5f627375 	svcpl	0x00627375
    1080:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
    1084:	0100682e 	tsteq	r0, lr, lsr #16
    1088:	00000000 	andeq	r0, r0, r0
    108c:	0f780205 	svceq	0x00780205
    1090:	35030800 	strcc	r0, [r3, #-2048]	; 0x800
    1094:	1d312101 	ldfnes	f2, [r1, #-4]!
    1098:	233d2f21 	teqcs	sp, #33, 30	; 0x84
    109c:	0f02231d 	svceq	0x0002231d
    10a0:	50010100 	andpl	r0, r1, r0, lsl #2
    10a4:	02000003 	andeq	r0, r0, #3
    10a8:	00007b00 	andeq	r7, r0, r0, lsl #22
    10ac:	fb010200 	blx	418b6 <__Stack_Size+0x414b6>
    10b0:	01000d0e 	tsteq	r0, lr, lsl #26
    10b4:	00010101 	andeq	r0, r1, r1, lsl #2
    10b8:	00010000 	andeq	r0, r1, r0
    10bc:	73750100 	cmnvc	r5, #0, 2
    10c0:	696c5f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    10c4:	75000062 	strvc	r0, [r0, #-98]	; 0x62
    10c8:	635f6273 	cmpvs	pc, #805306375	; 0x30000007
    10cc:	2e65726f 	cdpcs	2, 6, cr7, cr5, cr15, {3}
    10d0:	00010063 	andeq	r0, r1, r3, rrx
    10d4:	62737500 	rsbsvs	r7, r3, #0, 10
    10d8:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    10dc:	00682e65 	rsbeq	r2, r8, r5, ror #28
    10e0:	75000001 	strvc	r0, [r0, #-1]
    10e4:	645f6273 	ldrbvs	r6, [pc], #-627	; 10ec <__Stack_Size+0xcec>
    10e8:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    10ec:	00000100 	andeq	r0, r0, r0, lsl #2
    10f0:	5f627375 	svcpl	0x00627375
    10f4:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
    10f8:	0100682e 	tsteq	r0, lr, lsr #16
    10fc:	73750000 	cmnvc	r5, #0
    1100:	6e695f62 	cdpvs	15, 6, cr5, cr9, cr2, {3}
    1104:	682e7469 	stmdavs	lr!, {r0, r3, r5, r6, sl, ip, sp, lr}
    1108:	00000100 	andeq	r0, r0, r0, lsl #2
    110c:	5f627375 	svcpl	0x00627375
    1110:	2e6d656d 	cdpcs	5, 6, cr6, cr13, cr13, {3}
    1114:	00010068 	andeq	r0, r1, r8, rrx
    1118:	62737500 	rsbsvs	r7, r3, #0, 10
    111c:	6765725f 			; <UNDEFINED> instruction: 0x6765725f
    1120:	00682e73 	rsbeq	r2, r8, r3, ror lr
    1124:	00000001 	andeq	r0, r0, r1
    1128:	b0020500 	andlt	r0, r2, r0, lsl #10
    112c:	0308000f 	movweq	r0, #32783	; 0x800f
    1130:	222f0135 	eorcs	r0, pc, #1073741837	; 0x4000000d
    1134:	2f4b223e 	svccs	0x004b223e
    1138:	01000502 	tsteq	r0, r2, lsl #10
    113c:	02050001 	andeq	r0, r5, #1
    1140:	08000fd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, fp}
    1144:	0100e303 	tsteq	r0, r3, lsl #6
    1148:	223e222f 	eorscs	r2, lr, #-268435454	; 0xf0000002
    114c:	05022f4b 	streq	r2, [r2, #-3915]	; 0xf4b
    1150:	00010100 	andeq	r0, r1, r0, lsl #2
    1154:	0ff80205 	svceq	0x00f80205
    1158:	9b030800 	blls	c3160 <__Stack_Size+0xc2d60>
    115c:	222f0101 	eorcs	r0, pc, #1073741824	; 0x40000000
    1160:	1d23233d 	stcne	3, cr2, [r3, #-244]!	; 0xffffff0c
    1164:	22235b31 	eorcs	r5, r3, #50176	; 0xc400
    1168:	404e3040 	submi	r3, lr, r0, asr #32
    116c:	40223133 	eormi	r3, r2, r3, lsr r1
    1170:	231d3147 	tstcs	sp, #-1073741807	; 0xc0000011
    1174:	0b03424c 	bleq	d1aac <__Stack_Size+0xd16ac>
    1178:	60034b58 	andvs	r4, r3, r8, asr fp
    117c:	2021032e 	eorcs	r0, r1, lr, lsr #6
    1180:	01000702 	tsteq	r0, r2, lsl #14
    1184:	02050001 	andeq	r0, r5, #1
    1188:	08001088 	stmdaeq	r0, {r3, r7, ip}
    118c:	0103e003 	tsteq	r3, r3
    1190:	2f2f1f13 	svccs	0x002f1f13
    1194:	02003321 	andeq	r3, r0, #-2080374784	; 0x84000000
    1198:	20060104 	andcs	r0, r6, r4, lsl #2
    119c:	924d3006 	subls	r3, sp, #6
    11a0:	21352d34 	teqcs	r5, r4, lsr sp
    11a4:	4c847651 	stcmi	6, cr7, [r4], {81}	; 0x51
    11a8:	2f2f2a24 	svccs	0x002f2a24
    11ac:	23231d30 	teqcs	r3, #48, 26	; 0xc00
    11b0:	01001202 	tsteq	r0, r2, lsl #4
    11b4:	02050001 	andeq	r0, r5, #1
    11b8:	08001130 	stmdaeq	r0, {r4, r5, r8, ip}
    11bc:	0100ca03 	tsteq	r0, r3, lsl #20
    11c0:	591f2122 	ldmdbpl	pc, {r1, r5, r8, sp}	; <UNPREDICTABLE>
    11c4:	4b21302f 	blmi	84d288 <__Stack_Size+0x84ce88>
    11c8:	08022232 	stmdaeq	r2, {r1, r4, r5, r9, sp}
    11cc:	00010100 	andeq	r0, r1, r0, lsl #2
    11d0:	11680205 	cmnne	r8, r5, lsl #4
    11d4:	f8030800 			; <UNDEFINED> instruction: 0xf8030800
    11d8:	84240100 	strthi	r0, [r4], #-256	; 0x100
    11dc:	0402003e 	streq	r0, [r2], #-62	; 0x3e
    11e0:	06200601 	strteq	r0, [r0], -r1, lsl #12
    11e4:	224b342f 	subcs	r3, fp, #788529152	; 0x2f000000
    11e8:	252f2f1e 	strcs	r2, [pc, #-3870]!	; 2d2 <_Minimum_Stack_Size+0x1d2>
    11ec:	00070221 	andeq	r0, r7, r1, lsr #4
    11f0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    11f4:	0011b002 	andseq	fp, r1, r2
    11f8:	01e90308 	mvneq	r0, r8, lsl #6
    11fc:	3e402101 	dvfccs	f2, f0, f1
    1200:	3d35224b 	lfmcc	f2, 4, [r5, #-300]!	; 0xfffffed4
    1204:	200f0342 	andcs	r0, pc, r2, asr #6
    1208:	43207203 	teqmi	r0, #805306368	; 0x30000000
    120c:	2075035f 	rsbscs	r0, r5, pc, asr r3
    1210:	00314032 	eorseq	r4, r1, r2, lsr r0
    1214:	06010402 	streq	r0, [r1], -r2, lsl #8
    1218:	032f062e 	teqeq	pc, #48234496	; 0x2e00000
    121c:	23472e09 	movtcs	r2, #32265	; 0x7e09
    1220:	4b4c231d 	blmi	1309e9c <__Stack_Size+0x1309a9c>
    1224:	6b235a5e 	blvs	8d7ba4 <__Stack_Size+0x8d77a4>
    1228:	314b942f 	cmpcc	fp, pc, lsr #8
    122c:	000a0221 	andeq	r0, sl, r1, lsr #4
    1230:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1234:	00128002 	andseq	r8, r2, r2
    1238:	02c20308 	sbceq	r0, r2, #8, 6	; 0x20000000
    123c:	0f032601 	svceq	0x00032601
    1240:	20710320 	rsbscs	r0, r1, r0, lsr #6
    1244:	03200f03 	teqeq	r0, #3, 30
    1248:	43212071 	teqmi	r1, #113	; 0x71
    124c:	31403254 	cmpcc	r0, r4, asr r2
    1250:	0402002f 	streq	r0, [r2], #-47	; 0x2f
    1254:	062e0601 	strteq	r0, [lr], -r1, lsl #12
    1258:	2e090321 	cdpcs	3, 0, cr0, cr9, cr1, {1}
    125c:	231d3147 	tstcs	sp, #-1073741807	; 0xc0000011
    1260:	034b8588 	movteq	r8, #46472	; 0xb588
    1264:	12032e6f 	andne	r2, r3, #1776	; 0x6f0
    1268:	00070220 	andeq	r0, r7, r0, lsr #4
    126c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1270:	00130402 	andseq	r0, r3, r2, lsl #8
    1274:	02f80308 	rscseq	r0, r8, #8, 6	; 0x20000000
    1278:	4c672101 	stfmie	f2, [r7], #-4
    127c:	01000702 	tsteq	r0, r2, lsl #14
    1280:	02050001 	andeq	r0, r5, #1
    1284:	08001328 	stmdaeq	r0, {r3, r5, r8, r9, ip}
    1288:	01039203 	tsteq	r3, r3, lsl #4
    128c:	3d223d15 	stccc	13, cr3, [r2, #-84]!	; 0xffffffac
    1290:	04022f23 	streq	r2, [r2], #-3875	; 0xf23
    1294:	00010100 	andeq	r0, r1, r0, lsl #2
    1298:	13440205 	movtne	r0, #16901	; 0x4205
    129c:	c9030800 	stmdbgt	r3, {fp}
    12a0:	68210107 	stmdavs	r1!, {r0, r1, r2, r8}
    12a4:	02404b5a 	subeq	r4, r0, #92160	; 0x16800
    12a8:	0101000d 	tsteq	r1, sp
    12ac:	84020500 	strhi	r0, [r2], #-1280	; 0x500
    12b0:	03080013 	movweq	r0, #32787	; 0x8013
    12b4:	280106cc 	stmdacs	r1, {r2, r3, r6, r7, r9, sl}
    12b8:	563e2c3e 			; <UNDEFINED> instruction: 0x563e2c3e
    12bc:	30302f5c 	eorscc	r2, r0, ip, asr pc
    12c0:	032f3130 	teqeq	pc, #48, 2
    12c4:	4e4a7dbd 	mcrmi	13, 2, r7, cr10, cr13, {5}
    12c8:	4f304030 	svcmi	0x00304030
    12cc:	033d3d29 	teqeq	sp, #2624	; 0xa40
    12d0:	03304a0c 	teqeq	r0, #12, 20	; 0xc000
    12d4:	03593c3c 	cmpeq	r9, #60, 24	; 0x3c00
    12d8:	3e3d3c44 	cdpcc	12, 3, cr3, cr13, cr4, {2}
    12dc:	3d3d3044 	ldccc	0, cr3, [sp, #-272]!	; 0xfffffef0
    12e0:	3c0b033e 	stccc	3, cr0, [fp], {62}	; 0x3e
    12e4:	31413031 	cmpcc	r1, r1, lsr r0
    12e8:	09033033 	stmdbeq	r3, {r0, r1, r4, r5, ip, sp}
    12ec:	2e0a032e 	cdpcs	3, 0, cr0, cr10, cr14, {1}
    12f0:	75039c36 	strvc	r9, [r3, #-3126]	; 0xc36
    12f4:	2010032e 	andscs	r0, r0, lr, lsr #6
    12f8:	303c1903 	eorscc	r1, ip, r3, lsl #18
    12fc:	3e302f3e 	mrccc	15, 1, r2, cr0, cr14, {1}
    1300:	3d303e30 	ldccc	14, cr3, [r0, #-192]!	; 0xffffff40
    1304:	695a4230 	ldmdbvs	sl, {r4, r5, r9, lr}^
    1308:	75305e4b 	ldrvc	r5, [r0, #-3659]!	; 0xe4b
    130c:	0e03306d 	cdpeq	0, 0, cr3, cr3, cr13, {3}
    1310:	20720320 	rsbscs	r0, r2, r0, lsr #6
    1314:	75035f43 	strvc	r5, [r3, #-3907]	; 0xf43
    1318:	31403220 	cmpcc	r0, r0, lsr #4
    131c:	3c090359 	stccc	3, cr0, [r9], {89}	; 0x59
    1320:	59305030 	ldmdbpl	r0!, {r4, r5, ip, lr}
    1324:	2289674b 	addcs	r6, r9, #19660800	; 0x12c0000
    1328:	322f233d 	eorcc	r2, pc, #-201326592	; 0xf4000000
    132c:	69413067 	stmdbvs	r1, {r0, r1, r2, r5, r6, ip, sp}^
    1330:	4d413f31 	stclmi	15, cr3, [r1, #-196]	; 0xffffff3c
    1334:	23084c31 	movwcs	r4, #35889	; 0x8c31
    1338:	5a305a30 	bpl	c17c00 <__Stack_Size+0xc17800>
    133c:	2f404b40 	svccs	0x00404b40
    1340:	2f4a2f03 	svccs	0x004a2f03
    1344:	2e7ed603 	cdpcs	6, 7, cr13, cr14, cr3, {0}
    1348:	032e2c03 	teqeq	lr, #768	; 0x300
    134c:	0c022e0b 	stceq	14, cr2, [r2], {11}
    1350:	00010100 	andeq	r0, r1, r0, lsl #2
    1354:	16600205 	strbtne	r0, [r0], -r5, lsl #4
    1358:	a0030800 	andge	r0, r3, r0, lsl #16
    135c:	3e210107 	sufccs	f0, f1, f7
    1360:	01040200 	mrseq	r0, R12_usr
    1364:	03062e06 	movweq	r2, #28166	; 0x6e06
    1368:	1e2e7c8a 	cdpne	12, 2, cr7, cr14, cr10, {4}
    136c:	59263322 	stmdbpl	r6!, {r1, r5, r8, r9, ip, sp}
    1370:	222f211f 	eorcs	r2, pc, #-1073741817	; 0xc0000007
    1374:	3077301e 	rsbscc	r3, r7, lr, lsl r0
    1378:	1f2f1f21 	svcne	0x002f1f21
    137c:	4c3f2f21 	ldcmi	15, cr2, [pc], #-132	; 1300 <__Stack_Size+0xf00>
    1380:	3d4e2240 	sfmcc	f2, 2, [lr, #-256]	; 0xffffff00
    1384:	9e03d303 	cdpls	3, 0, cr13, cr3, cr3, {0}
    1388:	0351303f 	cmpeq	r1, #63	; 0x3f
    138c:	2d312009 	ldccs	0, cr2, [r1, #-36]!	; 0xffffffdc
    1390:	01000f02 	tsteq	r0, r2, lsl #30
    1394:	02050001 	andeq	r0, r5, #1
    1398:	08001728 	stmdaeq	r0, {r3, r5, r8, r9, sl, ip}
    139c:	0107dd03 	tsteq	r7, r3, lsl #26
    13a0:	02003122 	andeq	r3, r0, #-2147483640	; 0x80000008
    13a4:	20060104 	andcs	r0, r6, r4, lsl #2
    13a8:	02040200 	andeq	r0, r4, #0, 4
    13ac:	02007606 	andeq	r7, r0, #6291456	; 0x600000
    13b0:	32640204 	rsbcc	r0, r4, #4, 4	; 0x40000000
    13b4:	01000902 	tsteq	r0, r2, lsl #18
    13b8:	02050001 	andeq	r0, r5, #1
    13bc:	08001760 	stmdaeq	r0, {r5, r6, r8, r9, sl, ip}
    13c0:	0106f803 	tsteq	r6, r3, lsl #16
    13c4:	02003e21 	andeq	r3, r0, #528	; 0x210
    13c8:	2e060104 	adfcss	f0, f6, f4
    13cc:	3f303006 	svccc	0x00303006
    13d0:	04020030 	streq	r0, [r2], #-48	; 0x30
    13d4:	02003d01 	andeq	r3, r0, #1, 26	; 0x40
    13d8:	311f0104 	tstcc	pc, r4, lsl #2
    13dc:	23504c3d 	cmpcs	r0, #15616	; 0x3d00
    13e0:	09022d31 	stmdbeq	r2, {r0, r4, r5, r8, sl, fp, sp}
    13e4:	00010100 	andeq	r0, r1, r0, lsl #2
    13e8:	00000205 	andeq	r0, r0, r5, lsl #4
    13ec:	f1030000 			; <UNDEFINED> instruction: 0xf1030000
    13f0:	01020107 	tsteq	r2, r7, lsl #2
    13f4:	8f010100 	svchi	0x00010100
    13f8:	02000000 	andeq	r0, r0, #0
    13fc:	00003600 	andeq	r3, r0, r0, lsl #12
    1400:	fb010200 	blx	41c0a <__Stack_Size+0x4180a>
    1404:	01000d0e 	tsteq	r0, lr, lsl #26
    1408:	00010101 	andeq	r0, r1, r1, lsl #2
    140c:	00010000 	andeq	r0, r1, r0
    1410:	73750100 	cmnvc	r5, #0, 2
    1414:	696c5f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    1418:	75000062 	strvc	r0, [r0, #-98]	; 0x62
    141c:	6d5f6273 	lfmvs	f6, 2, [pc, #-460]	; 1258 <__Stack_Size+0xe58>
    1420:	632e6d65 	teqvs	lr, #6464	; 0x1940
    1424:	00000100 	andeq	r0, r0, r0, lsl #2
    1428:	5f627375 	svcpl	0x00627375
    142c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    1430:	0100682e 	tsteq	r0, lr, lsr #16
    1434:	00000000 	andeq	r0, r0, r0
    1438:	17bc0205 	ldrne	r0, [ip, r5, lsl #4]!
    143c:	23030800 	movwcs	r0, #14336	; 0x3800
    1440:	232b2401 	teqcs	fp, #16777216	; 0x1000000
    1444:	0021232b 	eoreq	r2, r1, fp, lsr #6
    1448:	06010402 	streq	r0, [r1], -r2, lsl #8
    144c:	04020020 	streq	r0, [r2], #-32
    1450:	004e0602 	subeq	r0, lr, r2, lsl #12
    1454:	2c020402 	cfstrscs	mvf0, [r2], {2}
    1458:	02040200 	andeq	r0, r4, #0, 4
    145c:	04020030 	streq	r0, [r2], #-48	; 0x30
    1460:	024e2f02 	subeq	r2, lr, #2, 30
    1464:	01010001 	tsteq	r1, r1
    1468:	ec020500 	cfstr32	mvfx0, [r2], {-0}
    146c:	03080017 	movweq	r0, #32791	; 0x8017
    1470:	2b24013c 	blcs	901968 <__Stack_Size+0x901568>
    1474:	21232b23 	teqcs	r3, r3, lsr #22
    1478:	01040200 	mrseq	r0, R12_usr
    147c:	02002006 	andeq	r2, r0, #6
    1480:	30060204 	andcc	r0, r6, r4, lsl #4
    1484:	00010269 	andeq	r0, r1, r9, ror #4
    1488:	Address 0x0000000000001488 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
  18:	0800013c 	stmdaeq	r0, {r2, r3, r4, r5, r8}
  1c:	00000002 	andeq	r0, r0, r2
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
  20:	0000000c 	andeq	r0, r0, ip
  24:	00000000 	andeq	r0, r0, r0
  28:	0800013e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8}
    if ((wEPVal & EP_CTR_RX) != 0)
  2c:	00000002 	andeq	r0, r0, r2
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
  30:	0000000c 	andeq	r0, r0, ip
  34:	00000000 	andeq	r0, r0, r0
  38:	08000140 	stmdaeq	r0, {r6, r8}

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
  3c:	00000002 	andeq	r0, r0, r2

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
  40:	0000000c 	andeq	r0, r0, ip
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
  44:	00000000 	andeq	r0, r0, r0
  48:	08000142 	stmdaeq	r0, {r1, r6, r8}
  4c:	0000000a 	andeq	r0, r0, sl

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
  50:	0000000c 	andeq	r0, r0, ip
  54:	00000000 	andeq	r0, r0, r0
  58:	0800014c 	stmdaeq	r0, {r2, r3, r6, r8}
  5c:	00000002 	andeq	r0, r0, r2
  60:	0000000c 	andeq	r0, r0, ip
  64:	00000000 	andeq	r0, r0, r0
  68:	08000150 	stmdaeq	r0, {r4, r6, r8}
  6c:	00000018 	andeq	r0, r0, r8, lsl r0
  70:	0000000c 	andeq	r0, r0, ip
  74:	00000000 	andeq	r0, r0, r0
  78:	08000168 	stmdaeq	r0, {r3, r5, r6, r8}
  7c:	00000002 	andeq	r0, r0, r2
  80:	0000000c 	andeq	r0, r0, ip
  84:	00000000 	andeq	r0, r0, r0
  88:	0800016a 	stmdaeq	r0, {r1, r3, r5, r6, r8}
  8c:	00000002 	andeq	r0, r0, r2
  90:	0000000c 	andeq	r0, r0, ip
  94:	00000000 	andeq	r0, r0, r0
  98:	0800016c 	stmdaeq	r0, {r2, r3, r5, r6, r8}
  9c:	00000002 	andeq	r0, r0, r2
  a0:	0000000c 	andeq	r0, r0, ip
  a4:	00000000 	andeq	r0, r0, r0
  a8:	0800016e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8}
  ac:	00000002 	andeq	r0, r0, r2
  b0:	0000000c 	andeq	r0, r0, ip
  b4:	00000000 	andeq	r0, r0, r0
  b8:	08000170 	stmdaeq	r0, {r4, r5, r6, r8}
  bc:	00000002 	andeq	r0, r0, r2
  c0:	0000000c 	andeq	r0, r0, ip
  c4:	00000000 	andeq	r0, r0, r0
  c8:	08000172 	stmdaeq	r0, {r1, r4, r5, r6, r8}
  cc:	00000002 	andeq	r0, r0, r2
  d0:	0000000c 	andeq	r0, r0, ip
  d4:	00000000 	andeq	r0, r0, r0
  d8:	08000174 	stmdaeq	r0, {r2, r4, r5, r6, r8}
  dc:	0000000c 	andeq	r0, r0, ip
  e0:	00000018 	andeq	r0, r0, r8, lsl r0
  e4:	00000000 	andeq	r0, r0, r0
  e8:	08000180 	stmdaeq	r0, {r7, r8}
  ec:	000000a8 	andeq	r0, r0, r8, lsr #1
  f0:	40080e41 	andmi	r0, r8, r1, asr #28
  f4:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
  f8:	00000001 	andeq	r0, r0, r1
  fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 100:	00000000 	andeq	r0, r0, r0
 104:	08000228 	stmdaeq	r0, {r3, r5, r9}
 108:	00000060 	andeq	r0, r0, r0, rrx
 10c:	40100e41 	andsmi	r0, r0, r1, asr #28
 110:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
 114:	02854003 	addeq	r4, r5, #3
 118:	00018e40 	andeq	r8, r1, r0, asr #28
 11c:	0000000c 	andeq	r0, r0, ip
 120:	00000000 	andeq	r0, r0, r0
 124:	08000288 	stmdaeq	r0, {r3, r7, r9}
 128:	0000000c 	andeq	r0, r0, ip
 12c:	0000000c 	andeq	r0, r0, ip
 130:	00000000 	andeq	r0, r0, r0
 134:	08000294 	stmdaeq	r0, {r2, r4, r7, r9}
 138:	0000000c 	andeq	r0, r0, ip
 13c:	0000000c 	andeq	r0, r0, ip
 140:	00000000 	andeq	r0, r0, r0
 144:	080002a0 	stmdaeq	r0, {r5, r7, r9}
 148:	00000020 	andeq	r0, r0, r0, lsr #32
 14c:	0000000c 	andeq	r0, r0, ip
 150:	00000000 	andeq	r0, r0, r0
 154:	080002c0 	stmdaeq	r0, {r6, r7, r9}
 158:	0000000c 	andeq	r0, r0, ip
 15c:	00000018 	andeq	r0, r0, r8, lsl r0
 160:	00000000 	andeq	r0, r0, r0
 164:	080002cc 	stmdaeq	r0, {r2, r3, r6, r7, r9}
 168:	00000028 	andeq	r0, r0, r8, lsr #32
 16c:	40080e41 	andmi	r0, r8, r1, asr #28
 170:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
 174:	00000001 	andeq	r0, r0, r1
 178:	00000024 	andeq	r0, r0, r4, lsr #32
 17c:	00000000 	andeq	r0, r0, r0
 180:	080002f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9}
 184:	0000007c 	andeq	r0, r0, ip, ror r0
 188:	40180e41 	andsmi	r0, r8, r1, asr #28
 18c:	81400680 	smlalbbhi	r0, r0, r0, r6	; <UNPREDICTABLE>
 190:	04824005 	streq	r4, [r2], #5
 194:	40038440 	andmi	r8, r3, r0, asr #8
 198:	8e400285 	cdphi	2, 4, cr0, cr0, cr5, {4}
 19c:	00000001 	andeq	r0, r0, r1
 1a0:	0000000c 	andeq	r0, r0, ip
	...
 1ac:	00000004 	andeq	r0, r0, r4
 1b0:	0000000c 	andeq	r0, r0, ip
 1b4:	00000000 	andeq	r0, r0, r0
 1b8:	08000370 	stmdaeq	r0, {r4, r5, r6, r8, r9}
 1bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1c0:	0000000c 	andeq	r0, r0, ip
 1c4:	00000000 	andeq	r0, r0, r0
 1c8:	0800038c 	stmdaeq	r0, {r2, r3, r7, r8, r9}
 1cc:	00000018 	andeq	r0, r0, r8, lsl r0
 1d0:	00000018 	andeq	r0, r0, r8, lsl r0
 1d4:	00000000 	andeq	r0, r0, r0
 1d8:	080003a4 	stmdaeq	r0, {r2, r5, r7, r8, r9}
 1dc:	00000084 	andeq	r0, r0, r4, lsl #1
 1e0:	40080e41 	andmi	r0, r8, r1, asr #28
 1e4:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 1e8:	00000001 	andeq	r0, r0, r1
 1ec:	0000000c 	andeq	r0, r0, ip
 1f0:	00000000 	andeq	r0, r0, r0
 1f4:	08000428 	stmdaeq	r0, {r3, r5, sl}
 1f8:	00000028 	andeq	r0, r0, r8, lsr #32
 1fc:	0000000c 	andeq	r0, r0, ip
 200:	00000000 	andeq	r0, r0, r0
 204:	08000450 	stmdaeq	r0, {r4, r6, sl}
 208:	0000001c 	andeq	r0, r0, ip, lsl r0
 20c:	0000000c 	andeq	r0, r0, ip
 210:	00000000 	andeq	r0, r0, r0
 214:	0800046c 	stmdaeq	r0, {r2, r3, r5, r6, sl}
 218:	00000004 	andeq	r0, r0, r4
 21c:	0000001c 	andeq	r0, r0, ip, lsl r0
 220:	00000000 	andeq	r0, r0, r0
 224:	08000470 	stmdaeq	r0, {r4, r5, r6, sl}
 228:	00000024 	andeq	r0, r0, r4, lsr #32
 22c:	40100e41 	andsmi	r0, r0, r1, asr #28
 230:	81400480 	smlalbbhi	r0, r0, r0, r4	; <UNPREDICTABLE>
 234:	02824003 	addeq	r4, r2, #3
 238:	00018e40 	andeq	r8, r1, r0, asr #28
 23c:	00000018 	andeq	r0, r0, r8, lsl r0
 240:	00000000 	andeq	r0, r0, r0
 244:	08000494 	stmdaeq	r0, {r2, r4, r7, sl}
 248:	00000040 	andeq	r0, r0, r0, asr #32
 24c:	40080e41 	andmi	r0, r8, r1, asr #28
 250:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 254:	00000001 	andeq	r0, r0, r1
 258:	0000001c 	andeq	r0, r0, ip, lsl r0
 25c:	00000000 	andeq	r0, r0, r0
 260:	080004d4 	stmdaeq	r0, {r2, r4, r6, r7, sl}
 264:	00000022 	andeq	r0, r0, r2, lsr #32
 268:	40100e41 	andsmi	r0, r0, r1, asr #28
 26c:	81400480 	smlalbbhi	r0, r0, r0, r4	; <UNPREDICTABLE>
 270:	02824003 	addeq	r4, r2, #3
 274:	00018e40 	andeq	r8, r1, r0, asr #28
 278:	0000001c 	andeq	r0, r0, ip, lsl r0
 27c:	00000000 	andeq	r0, r0, r0
 280:	080004f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl}
 284:	000000b4 	strheq	r0, [r0], -r4
 288:	40100e41 	andsmi	r0, r0, r1, asr #28
 28c:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
 290:	02864003 	addeq	r4, r6, #3
 294:	00018e40 	andeq	r8, r1, r0, asr #28
 298:	0000000c 	andeq	r0, r0, ip
 29c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2a0:	7c020001 	stcvc	0, cr0, [r2], {1}
 2a4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2a8:	00000018 	andeq	r0, r0, r8, lsl r0
 2ac:	00000298 	muleq	r0, r8, r2
 2b0:	080005ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl}
 2b4:	0000005c 	andeq	r0, r0, ip, asr r0
 2b8:	40080e41 	andmi	r0, r8, r1, asr #28
 2bc:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
 2c0:	00000001 	andeq	r0, r0, r1
 2c4:	0000000c 	andeq	r0, r0, ip
 2c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2cc:	7c020001 	stcvc	0, cr0, [r2], {1}
 2d0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2d4:	0000000c 	andeq	r0, r0, ip
 2d8:	000002c4 	andeq	r0, r0, r4, asr #5
 2dc:	08000608 	stmdaeq	r0, {r3, r9, sl}
 2e0:	00000016 	andeq	r0, r0, r6, lsl r0
 2e4:	0000000c 	andeq	r0, r0, ip
 2e8:	000002c4 	andeq	r0, r0, r4, asr #5
 2ec:	00000000 	andeq	r0, r0, r0
 2f0:	00000012 	andeq	r0, r0, r2, lsl r0
 2f4:	0000000c 	andeq	r0, r0, ip
 2f8:	000002c4 	andeq	r0, r0, r4, asr #5
 2fc:	08000620 	stmdaeq	r0, {r5, r9, sl}
 300:	00000010 	andeq	r0, r0, r0, lsl r0
 304:	00000028 	andeq	r0, r0, r8, lsr #32
 308:	000002c4 	andeq	r0, r0, r4, asr #5
 30c:	00000000 	andeq	r0, r0, r0
 310:	00000050 	andeq	r0, r0, r0, asr r0
 314:	40200e42 	eormi	r0, r0, r2, asr #28
 318:	85400884 	strbhi	r0, [r0, #-2180]	; 0x884
 31c:	06864007 	streq	r4, [r6], r7
 320:	40058740 	andmi	r8, r5, r0, asr #14
 324:	89400488 	stmdbhi	r0, {r3, r7, sl}^
 328:	028a4003 	addeq	r4, sl, #3
 32c:	00018e40 	andeq	r8, r1, r0, asr #28
 330:	0000000c 	andeq	r0, r0, ip
 334:	000002c4 	andeq	r0, r0, r4, asr #5
 338:	08000630 	stmdaeq	r0, {r4, r5, r9, sl}
 33c:	00000048 	andeq	r0, r0, r8, asr #32
 340:	0000000c 	andeq	r0, r0, ip
 344:	000002c4 	andeq	r0, r0, r4, asr #5
 348:	08000678 	stmdaeq	r0, {r3, r4, r5, r6, r9, sl}
 34c:	00000060 	andeq	r0, r0, r0, rrx
 350:	0000000c 	andeq	r0, r0, ip
 354:	000002c4 	andeq	r0, r0, r4, asr #5
 358:	080006d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl}
 35c:	00000018 	andeq	r0, r0, r8, lsl r0
 360:	0000000c 	andeq	r0, r0, ip
 364:	000002c4 	andeq	r0, r0, r4, asr #5
 368:	080006f0 	stmdaeq	r0, {r4, r5, r6, r7, r9, sl}
 36c:	0000001c 	andeq	r0, r0, ip, lsl r0
 370:	0000000c 	andeq	r0, r0, ip
 374:	000002c4 	andeq	r0, r0, r4, asr #5
 378:	0800070c 	stmdaeq	r0, {r2, r3, r8, r9, sl}
 37c:	00000014 	andeq	r0, r0, r4, lsl r0
 380:	00000018 	andeq	r0, r0, r8, lsl r0
 384:	000002c4 	andeq	r0, r0, r4, asr #5
 388:	08000720 	stmdaeq	r0, {r5, r8, r9, sl}
 38c:	00000018 	andeq	r0, r0, r8, lsl r0
 390:	40080e42 	andmi	r0, r8, r2, asr #28
 394:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
 398:	00000001 	andeq	r0, r0, r1
 39c:	0000000c 	andeq	r0, r0, ip
 3a0:	000002c4 	andeq	r0, r0, r4, asr #5
 3a4:	08000738 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl}
 3a8:	0000002c 	andeq	r0, r0, ip, lsr #32
 3ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b0:	000002c4 	andeq	r0, r0, r4, asr #5
 3b4:	08000764 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl}
 3b8:	00000048 	andeq	r0, r0, r8, asr #32
 3bc:	40100e41 	andsmi	r0, r0, r1, asr #28
 3c0:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
 3c4:	02854003 	addeq	r4, r5, #3
 3c8:	00018e40 	andeq	r8, r1, r0, asr #28
 3cc:	00000018 	andeq	r0, r0, r8, lsl r0
 3d0:	000002c4 	andeq	r0, r0, r4, asr #5
 3d4:	080007ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl}
 3d8:	0000006c 	andeq	r0, r0, ip, rrx
 3dc:	400c0e42 	andmi	r0, ip, r2, asr #28
 3e0:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
 3e4:	018e4002 	orreq	r4, lr, r2
 3e8:	0000000c 	andeq	r0, r0, ip
 3ec:	000002c4 	andeq	r0, r0, r4, asr #5
 3f0:	08000818 	stmdaeq	r0, {r3, r4, fp}
 3f4:	00000024 	andeq	r0, r0, r4, lsr #32
 3f8:	00000018 	andeq	r0, r0, r8, lsl r0
 3fc:	000002c4 	andeq	r0, r0, r4, asr #5
 400:	0800083c 	stmdaeq	r0, {r2, r3, r4, r5, fp}
 404:	00000028 	andeq	r0, r0, r8, lsr #32
 408:	40080e41 	andmi	r0, r8, r1, asr #28
 40c:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 410:	00000001 	andeq	r0, r0, r1
 414:	0000000c 	andeq	r0, r0, ip
 418:	000002c4 	andeq	r0, r0, r4, asr #5
 41c:	08000864 	stmdaeq	r0, {r2, r5, r6, fp}
 420:	00000014 	andeq	r0, r0, r4, lsl r0
 424:	00000018 	andeq	r0, r0, r8, lsl r0
 428:	000002c4 	andeq	r0, r0, r4, asr #5
 42c:	08000878 	stmdaeq	r0, {r3, r4, r5, r6, fp}
 430:	00000034 	andeq	r0, r0, r4, lsr r0
 434:	40080e42 	andmi	r0, r8, r2, asr #28
 438:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 43c:	00000001 	andeq	r0, r0, r1
 440:	0000001c 	andeq	r0, r0, ip, lsl r0
 444:	000002c4 	andeq	r0, r0, r4, asr #5
 448:	00000000 	andeq	r0, r0, r0
 44c:	00000030 	andeq	r0, r0, r0, lsr r0
 450:	40100e42 	andsmi	r0, r0, r2, asr #28
 454:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
 458:	02854003 	addeq	r4, r5, #3
 45c:	00018e40 	andeq	r8, r1, r0, asr #28
 460:	00000024 	andeq	r0, r0, r4, lsr #32
 464:	000002c4 	andeq	r0, r0, r4, asr #5
 468:	080008ac 	stmdaeq	r0, {r2, r3, r5, r7, fp}
 46c:	0000004c 	andeq	r0, r0, ip, asr #32
 470:	40180e41 	andsmi	r0, r8, r1, asr #28
 474:	81400680 	smlalbbhi	r0, r0, r0, r6	; <UNPREDICTABLE>
 478:	04824005 	streq	r4, [r2], #5
 47c:	40038440 	andmi	r8, r3, r0, asr #8
 480:	8e400285 	cdphi	2, 4, cr0, cr0, cr5, {4}
 484:	00000001 	andeq	r0, r0, r1
 488:	0000000c 	andeq	r0, r0, ip
 48c:	000002c4 	andeq	r0, r0, r4, asr #5
 490:	080008f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, fp}
 494:	0000000c 	andeq	r0, r0, ip
 498:	0000000c 	andeq	r0, r0, ip
 49c:	000002c4 	andeq	r0, r0, r4, asr #5
 4a0:	08000904 	stmdaeq	r0, {r2, r8, fp}
 4a4:	00000018 	andeq	r0, r0, r8, lsl r0
 4a8:	0000000c 	andeq	r0, r0, ip
 4ac:	000002c4 	andeq	r0, r0, r4, asr #5
 4b0:	0800091c 	stmdaeq	r0, {r2, r3, r4, r8, fp}
 4b4:	00000012 	andeq	r0, r0, r2, lsl r0
 4b8:	0000000c 	andeq	r0, r0, ip
 4bc:	000002c4 	andeq	r0, r0, r4, asr #5
 4c0:	08000930 	stmdaeq	r0, {r4, r5, r8, fp}
 4c4:	00000010 	andeq	r0, r0, r0, lsl r0
 4c8:	0000000c 	andeq	r0, r0, ip
 4cc:	000002c4 	andeq	r0, r0, r4, asr #5
 4d0:	08000940 	stmdaeq	r0, {r6, r8, fp}
 4d4:	00000018 	andeq	r0, r0, r8, lsl r0
 4d8:	0000000c 	andeq	r0, r0, ip
 4dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 4e0:	7c020001 	stcvc	0, cr0, [r2], {1}
 4e4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 4e8:	0000000c 	andeq	r0, r0, ip
 4ec:	000004d8 	ldrdeq	r0, [r0], -r8
 4f0:	08000958 	stmdaeq	r0, {r3, r4, r6, r8, fp}
 4f4:	0000005c 	andeq	r0, r0, ip, asr r0
 4f8:	00000018 	andeq	r0, r0, r8, lsl r0
 4fc:	000004d8 	ldrdeq	r0, [r0], -r8
 500:	080009b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, fp}
 504:	00000044 	andeq	r0, r0, r4, asr #32
 508:	40080e41 	andmi	r0, r8, r1, asr #28
 50c:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
 510:	00000001 	andeq	r0, r0, r1
 514:	0000000c 	andeq	r0, r0, ip
 518:	000004d8 	ldrdeq	r0, [r0], -r8
 51c:	00000000 	andeq	r0, r0, r0
 520:	00000002 	andeq	r0, r0, r2
 524:	0000000c 	andeq	r0, r0, ip
 528:	000004d8 	ldrdeq	r0, [r0], -r8
 52c:	080009f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, fp}
 530:	00000018 	andeq	r0, r0, r8, lsl r0
 534:	0000000c 	andeq	r0, r0, ip
 538:	000004d8 	ldrdeq	r0, [r0], -r8
 53c:	08000a10 	stmdaeq	r0, {r4, r9, fp}
 540:	00000018 	andeq	r0, r0, r8, lsl r0
 544:	0000000c 	andeq	r0, r0, ip
 548:	000004d8 	ldrdeq	r0, [r0], -r8
 54c:	08000a28 	stmdaeq	r0, {r3, r5, r9, fp}
 550:	00000028 	andeq	r0, r0, r8, lsr #32
 554:	0000000c 	andeq	r0, r0, ip
 558:	000004d8 	ldrdeq	r0, [r0], -r8
 55c:	08000a50 	stmdaeq	r0, {r4, r6, r9, fp}
 560:	00000034 	andeq	r0, r0, r4, lsr r0
 564:	0000001c 	andeq	r0, r0, ip, lsl r0
 568:	000004d8 	ldrdeq	r0, [r0], -r8
 56c:	08000a84 	stmdaeq	r0, {r2, r7, r9, fp}
 570:	0000004c 	andeq	r0, r0, ip, asr #32
 574:	40100e41 	andsmi	r0, r0, r1, asr #28
 578:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
 57c:	02864003 	addeq	r4, r6, #3
 580:	00018e40 	andeq	r8, r1, r0, asr #28
 584:	00000024 	andeq	r0, r0, r4, lsr #32
 588:	000004d8 	ldrdeq	r0, [r0], -r8
 58c:	08000ad0 	stmdaeq	r0, {r4, r6, r7, r9, fp}
 590:	0000020c 	andeq	r0, r0, ip, lsl #4
 594:	40180e42 	andsmi	r0, r8, r2, asr #28
 598:	85400684 	strbhi	r0, [r0, #-1668]	; 0x684
 59c:	04864005 	streq	r4, [r6], #5
 5a0:	40038740 	andmi	r8, r3, r0, asr #14
 5a4:	8e400288 	cdphi	2, 4, cr0, cr0, cr8, {4}
 5a8:	00000001 	andeq	r0, r0, r1
 5ac:	0000000c 	andeq	r0, r0, ip
 5b0:	000004d8 	ldrdeq	r0, [r0], -r8
 5b4:	00000000 	andeq	r0, r0, r0
 5b8:	0000000c 	andeq	r0, r0, ip
 5bc:	0000000c 	andeq	r0, r0, ip
 5c0:	000004d8 	ldrdeq	r0, [r0], -r8
 5c4:	00000000 	andeq	r0, r0, r0
 5c8:	0000000c 	andeq	r0, r0, ip
 5cc:	0000000c 	andeq	r0, r0, ip
 5d0:	000004d8 	ldrdeq	r0, [r0], -r8
 5d4:	08000cdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, sl, fp}
 5d8:	0000000c 	andeq	r0, r0, ip
 5dc:	0000000c 	andeq	r0, r0, ip
 5e0:	000004d8 	ldrdeq	r0, [r0], -r8
 5e4:	08000ce8 	stmdaeq	r0, {r3, r5, r6, r7, sl, fp}
 5e8:	00000004 	andeq	r0, r0, r4
 5ec:	0000000c 	andeq	r0, r0, ip
 5f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 5f4:	7c020001 	stcvc	0, cr0, [r2], {1}
 5f8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 5fc:	0000000c 	andeq	r0, r0, ip
 600:	000005ec 	andeq	r0, r0, ip, ror #11
 604:	00000000 	andeq	r0, r0, r0
 608:	0000000c 	andeq	r0, r0, ip
 60c:	0000000c 	andeq	r0, r0, ip
 610:	000005ec 	andeq	r0, r0, ip, ror #11
 614:	00000000 	andeq	r0, r0, r0
 618:	0000000c 	andeq	r0, r0, ip
 61c:	0000000c 	andeq	r0, r0, ip
 620:	000005ec 	andeq	r0, r0, ip, ror #11
 624:	00000000 	andeq	r0, r0, r0
 628:	0000000c 	andeq	r0, r0, ip
 62c:	0000000c 	andeq	r0, r0, ip
 630:	000005ec 	andeq	r0, r0, ip, ror #11
 634:	00000000 	andeq	r0, r0, r0
 638:	0000000c 	andeq	r0, r0, ip
 63c:	0000000c 	andeq	r0, r0, ip
 640:	000005ec 	andeq	r0, r0, ip, ror #11
 644:	00000000 	andeq	r0, r0, r0
 648:	0000000c 	andeq	r0, r0, ip
 64c:	0000000c 	andeq	r0, r0, ip
 650:	000005ec 	andeq	r0, r0, ip, ror #11
 654:	00000000 	andeq	r0, r0, r0
 658:	0000000c 	andeq	r0, r0, ip
 65c:	0000000c 	andeq	r0, r0, ip
 660:	000005ec 	andeq	r0, r0, ip, ror #11
 664:	00000000 	andeq	r0, r0, r0
 668:	0000000c 	andeq	r0, r0, ip
 66c:	0000000c 	andeq	r0, r0, ip
 670:	000005ec 	andeq	r0, r0, ip, ror #11
 674:	00000000 	andeq	r0, r0, r0
 678:	00000010 	andeq	r0, r0, r0, lsl r0
 67c:	0000000c 	andeq	r0, r0, ip
 680:	000005ec 	andeq	r0, r0, ip, ror #11
 684:	00000000 	andeq	r0, r0, r0
 688:	0000000c 	andeq	r0, r0, ip
 68c:	0000000c 	andeq	r0, r0, ip
 690:	000005ec 	andeq	r0, r0, ip, ror #11
 694:	00000000 	andeq	r0, r0, r0
 698:	0000000e 	andeq	r0, r0, lr
 69c:	0000000c 	andeq	r0, r0, ip
 6a0:	000005ec 	andeq	r0, r0, ip, ror #11
 6a4:	00000000 	andeq	r0, r0, r0
 6a8:	00000010 	andeq	r0, r0, r0, lsl r0
 6ac:	0000000c 	andeq	r0, r0, ip
 6b0:	000005ec 	andeq	r0, r0, ip, ror #11
 6b4:	00000000 	andeq	r0, r0, r0
 6b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6bc:	0000000c 	andeq	r0, r0, ip
 6c0:	000005ec 	andeq	r0, r0, ip, ror #11
 6c4:	00000000 	andeq	r0, r0, r0
 6c8:	00000012 	andeq	r0, r0, r2, lsl r0
 6cc:	0000000c 	andeq	r0, r0, ip
 6d0:	000005ec 	andeq	r0, r0, ip, ror #11
 6d4:	08000cec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, fp}
 6d8:	0000002a 	andeq	r0, r0, sl, lsr #32
 6dc:	0000000c 	andeq	r0, r0, ip
 6e0:	000005ec 	andeq	r0, r0, ip, ror #11
 6e4:	00000000 	andeq	r0, r0, r0
 6e8:	0000002a 	andeq	r0, r0, sl, lsr #32
 6ec:	0000000c 	andeq	r0, r0, ip
 6f0:	000005ec 	andeq	r0, r0, ip, ror #11
 6f4:	00000000 	andeq	r0, r0, r0
 6f8:	00000024 	andeq	r0, r0, r4, lsr #32
 6fc:	0000000c 	andeq	r0, r0, ip
 700:	000005ec 	andeq	r0, r0, ip, ror #11
 704:	00000000 	andeq	r0, r0, r0
 708:	00000012 	andeq	r0, r0, r2, lsl r0
 70c:	0000000c 	andeq	r0, r0, ip
 710:	000005ec 	andeq	r0, r0, ip, ror #11
 714:	00000000 	andeq	r0, r0, r0
 718:	00000012 	andeq	r0, r0, r2, lsl r0
 71c:	0000000c 	andeq	r0, r0, ip
 720:	000005ec 	andeq	r0, r0, ip, ror #11
 724:	00000000 	andeq	r0, r0, r0
 728:	0000001e 	andeq	r0, r0, lr, lsl r0
 72c:	0000000c 	andeq	r0, r0, ip
 730:	000005ec 	andeq	r0, r0, ip, ror #11
 734:	08000d16 	stmdaeq	r0, {r1, r2, r4, r8, sl, fp}
 738:	0000001e 	andeq	r0, r0, lr, lsl r0
 73c:	0000000c 	andeq	r0, r0, ip
 740:	000005ec 	andeq	r0, r0, ip, ror #11
 744:	00000000 	andeq	r0, r0, r0
 748:	0000001e 	andeq	r0, r0, lr, lsl r0
 74c:	0000000c 	andeq	r0, r0, ip
 750:	000005ec 	andeq	r0, r0, ip, ror #11
 754:	00000000 	andeq	r0, r0, r0
 758:	0000001c 	andeq	r0, r0, ip, lsl r0
 75c:	0000000c 	andeq	r0, r0, ip
 760:	000005ec 	andeq	r0, r0, ip, ror #11
 764:	08000d34 	stmdaeq	r0, {r2, r4, r5, r8, sl, fp}
 768:	0000001c 	andeq	r0, r0, ip, lsl r0
 76c:	0000000c 	andeq	r0, r0, ip
 770:	000005ec 	andeq	r0, r0, ip, ror #11
 774:	00000000 	andeq	r0, r0, r0
 778:	0000001e 	andeq	r0, r0, lr, lsl r0
 77c:	0000000c 	andeq	r0, r0, ip
 780:	000005ec 	andeq	r0, r0, ip, ror #11
 784:	00000000 	andeq	r0, r0, r0
 788:	0000001e 	andeq	r0, r0, lr, lsl r0
 78c:	0000000c 	andeq	r0, r0, ip
 790:	000005ec 	andeq	r0, r0, ip, ror #11
 794:	00000000 	andeq	r0, r0, r0
 798:	0000001c 	andeq	r0, r0, ip, lsl r0
 79c:	0000000c 	andeq	r0, r0, ip
 7a0:	000005ec 	andeq	r0, r0, ip, ror #11
 7a4:	00000000 	andeq	r0, r0, r0
 7a8:	0000001a 	andeq	r0, r0, sl, lsl r0
 7ac:	0000000c 	andeq	r0, r0, ip
 7b0:	000005ec 	andeq	r0, r0, ip, ror #11
 7b4:	00000000 	andeq	r0, r0, r0
 7b8:	0000001a 	andeq	r0, r0, sl, lsl r0
 7bc:	0000000c 	andeq	r0, r0, ip
 7c0:	000005ec 	andeq	r0, r0, ip, ror #11
 7c4:	00000000 	andeq	r0, r0, r0
 7c8:	00000018 	andeq	r0, r0, r8, lsl r0
 7cc:	0000000c 	andeq	r0, r0, ip
 7d0:	000005ec 	andeq	r0, r0, ip, ror #11
 7d4:	00000000 	andeq	r0, r0, r0
 7d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 7dc:	0000000c 	andeq	r0, r0, ip
 7e0:	000005ec 	andeq	r0, r0, ip, ror #11
 7e4:	00000000 	andeq	r0, r0, r0
 7e8:	00000020 	andeq	r0, r0, r0, lsr #32
 7ec:	0000000c 	andeq	r0, r0, ip
 7f0:	000005ec 	andeq	r0, r0, ip, ror #11
 7f4:	00000000 	andeq	r0, r0, r0
 7f8:	00000020 	andeq	r0, r0, r0, lsr #32
 7fc:	0000000c 	andeq	r0, r0, ip
 800:	000005ec 	andeq	r0, r0, ip, ror #11
 804:	08000d50 	stmdaeq	r0, {r4, r6, r8, sl, fp}
 808:	00000020 	andeq	r0, r0, r0, lsr #32
 80c:	0000000c 	andeq	r0, r0, ip
 810:	000005ec 	andeq	r0, r0, ip, ror #11
 814:	08000d70 	stmdaeq	r0, {r4, r5, r6, r8, sl, fp}
 818:	00000020 	andeq	r0, r0, r0, lsr #32
 81c:	0000000c 	andeq	r0, r0, ip
 820:	000005ec 	andeq	r0, r0, ip, ror #11
 824:	00000000 	andeq	r0, r0, r0
 828:	0000001e 	andeq	r0, r0, lr, lsl r0
 82c:	0000000c 	andeq	r0, r0, ip
 830:	000005ec 	andeq	r0, r0, ip, ror #11
 834:	00000000 	andeq	r0, r0, r0
 838:	00000012 	andeq	r0, r0, r2, lsl r0
 83c:	0000000c 	andeq	r0, r0, ip
 840:	000005ec 	andeq	r0, r0, ip, ror #11
 844:	00000000 	andeq	r0, r0, r0
 848:	00000020 	andeq	r0, r0, r0, lsr #32
 84c:	0000000c 	andeq	r0, r0, ip
 850:	000005ec 	andeq	r0, r0, ip, ror #11
 854:	00000000 	andeq	r0, r0, r0
 858:	00000020 	andeq	r0, r0, r0, lsr #32
 85c:	0000000c 	andeq	r0, r0, ip
 860:	000005ec 	andeq	r0, r0, ip, ror #11
 864:	08000d90 	stmdaeq	r0, {r4, r7, r8, sl, fp}
 868:	0000001c 	andeq	r0, r0, ip, lsl r0
 86c:	0000000c 	andeq	r0, r0, ip
 870:	000005ec 	andeq	r0, r0, ip, ror #11
 874:	08000dac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, fp}
 878:	0000001c 	andeq	r0, r0, ip, lsl r0
 87c:	0000000c 	andeq	r0, r0, ip
 880:	000005ec 	andeq	r0, r0, ip, ror #11
 884:	08000dc8 	stmdaeq	r0, {r3, r6, r7, r8, sl, fp}
 888:	0000001c 	andeq	r0, r0, ip, lsl r0
 88c:	0000000c 	andeq	r0, r0, ip
 890:	000005ec 	andeq	r0, r0, ip, ror #11
 894:	00000000 	andeq	r0, r0, r0
 898:	00000026 	andeq	r0, r0, r6, lsr #32
 89c:	0000000c 	andeq	r0, r0, ip
 8a0:	000005ec 	andeq	r0, r0, ip, ror #11
 8a4:	08000de4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, fp}
 8a8:	00000040 	andeq	r0, r0, r0, asr #32
 8ac:	0000000c 	andeq	r0, r0, ip
 8b0:	000005ec 	andeq	r0, r0, ip, ror #11
 8b4:	00000000 	andeq	r0, r0, r0
 8b8:	00000020 	andeq	r0, r0, r0, lsr #32
 8bc:	0000000c 	andeq	r0, r0, ip
 8c0:	000005ec 	andeq	r0, r0, ip, ror #11
 8c4:	00000000 	andeq	r0, r0, r0
 8c8:	00000020 	andeq	r0, r0, r0, lsr #32
 8cc:	00000018 	andeq	r0, r0, r8, lsl r0
 8d0:	000005ec 	andeq	r0, r0, ip, ror #11
 8d4:	00000000 	andeq	r0, r0, r0
 8d8:	00000038 	andeq	r0, r0, r8, lsr r0
 8dc:	40080e41 	andmi	r0, r8, r1, asr #28
 8e0:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 8e4:	00000001 	andeq	r0, r0, r1
 8e8:	0000000c 	andeq	r0, r0, ip
 8ec:	000005ec 	andeq	r0, r0, ip, ror #11
 8f0:	00000000 	andeq	r0, r0, r0
 8f4:	00000020 	andeq	r0, r0, r0, lsr #32
 8f8:	0000000c 	andeq	r0, r0, ip
 8fc:	000005ec 	andeq	r0, r0, ip, ror #11
 900:	00000000 	andeq	r0, r0, r0
 904:	00000020 	andeq	r0, r0, r0, lsr #32
 908:	0000000c 	andeq	r0, r0, ip
 90c:	000005ec 	andeq	r0, r0, ip, ror #11
 910:	00000000 	andeq	r0, r0, r0
 914:	0000001c 	andeq	r0, r0, ip, lsl r0
 918:	0000000c 	andeq	r0, r0, ip
 91c:	000005ec 	andeq	r0, r0, ip, ror #11
 920:	00000000 	andeq	r0, r0, r0
 924:	0000001c 	andeq	r0, r0, ip, lsl r0
 928:	00000018 	andeq	r0, r0, r8, lsl r0
 92c:	000005ec 	andeq	r0, r0, ip, ror #11
 930:	00000000 	andeq	r0, r0, r0
 934:	000000a8 	andeq	r0, r0, r8, lsr #1
 938:	40080e42 	andmi	r0, r8, r2, asr #28
 93c:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 940:	00000001 	andeq	r0, r0, r1
 944:	0000000c 	andeq	r0, r0, ip
 948:	000005ec 	andeq	r0, r0, ip, ror #11
 94c:	00000000 	andeq	r0, r0, r0
 950:	0000005c 	andeq	r0, r0, ip, asr r0
 954:	0000000c 	andeq	r0, r0, ip
 958:	000005ec 	andeq	r0, r0, ip, ror #11
 95c:	00000000 	andeq	r0, r0, r0
 960:	0000005c 	andeq	r0, r0, ip, asr r0
 964:	0000000c 	andeq	r0, r0, ip
 968:	000005ec 	andeq	r0, r0, ip, ror #11
 96c:	00000000 	andeq	r0, r0, r0
 970:	00000020 	andeq	r0, r0, r0, lsr #32
 974:	0000000c 	andeq	r0, r0, ip
 978:	000005ec 	andeq	r0, r0, ip, ror #11
 97c:	00000000 	andeq	r0, r0, r0
 980:	00000020 	andeq	r0, r0, r0, lsr #32
 984:	0000000c 	andeq	r0, r0, ip
 988:	000005ec 	andeq	r0, r0, ip, ror #11
 98c:	00000000 	andeq	r0, r0, r0
 990:	00000044 	andeq	r0, r0, r4, asr #32
 994:	0000000c 	andeq	r0, r0, ip
 998:	000005ec 	andeq	r0, r0, ip, ror #11
 99c:	00000000 	andeq	r0, r0, r0
 9a0:	0000003a 	andeq	r0, r0, sl, lsr r0
 9a4:	0000000c 	andeq	r0, r0, ip
 9a8:	000005ec 	andeq	r0, r0, ip, ror #11
 9ac:	00000000 	andeq	r0, r0, r0
 9b0:	00000006 	andeq	r0, r0, r6
 9b4:	0000000c 	andeq	r0, r0, ip
 9b8:	000005ec 	andeq	r0, r0, ip, ror #11
 9bc:	00000000 	andeq	r0, r0, r0
 9c0:	0000000a 	andeq	r0, r0, sl
 9c4:	0000000c 	andeq	r0, r0, ip
 9c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 9cc:	7c020001 	stcvc	0, cr0, [r2], {1}
 9d0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 9d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 9d8:	000009c4 	andeq	r0, r0, r4, asr #19
 9dc:	08000e24 	stmdaeq	r0, {r2, r5, r9, sl, fp}
 9e0:	00000154 	andeq	r0, r0, r4, asr r1
 9e4:	40100e41 	andsmi	r0, r0, r1, asr #28
 9e8:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
 9ec:	02864003 	addeq	r4, r6, #3
 9f0:	00018e40 	andeq	r8, r1, r0, asr #28
 9f4:	00000018 	andeq	r0, r0, r8, lsl r0
 9f8:	000009c4 	andeq	r0, r0, r4, asr #19
 9fc:	00000000 	andeq	r0, r0, r0
 a00:	00000070 	andeq	r0, r0, r0, ror r0
 a04:	40080e41 	andmi	r0, r8, r1, asr #28
 a08:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
 a0c:	00000001 	andeq	r0, r0, r1
 a10:	0000000c 	andeq	r0, r0, ip
 a14:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 a18:	7c020001 	stcvc	0, cr0, [r2], {1}
 a1c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 a20:	00000018 	andeq	r0, r0, r8, lsl r0
 a24:	00000a10 	andeq	r0, r0, r0, lsl sl
 a28:	08000f78 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sl, fp}
 a2c:	00000038 	andeq	r0, r0, r8, lsr r0
 a30:	40080e41 	andmi	r0, r8, r1, asr #28
 a34:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
 a38:	00000001 	andeq	r0, r0, r1
 a3c:	0000000c 	andeq	r0, r0, ip
 a40:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 a44:	7c020001 	stcvc	0, cr0, [r2], {1}
 a48:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 a4c:	00000018 	andeq	r0, r0, r8, lsl r0
 a50:	00000a3c 	andeq	r0, r0, ip, lsr sl
 a54:	08000fb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, fp}
 a58:	00000024 	andeq	r0, r0, r4, lsr #32
 a5c:	40080e41 	andmi	r0, r8, r1, asr #28
 a60:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 a64:	00000001 	andeq	r0, r0, r1
 a68:	00000018 	andeq	r0, r0, r8, lsl r0
 a6c:	00000a3c 	andeq	r0, r0, ip, lsr sl
 a70:	08000fd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, fp}
 a74:	00000024 	andeq	r0, r0, r4, lsr #32
 a78:	40080e41 	andmi	r0, r8, r1, asr #28
 a7c:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 a80:	00000001 	andeq	r0, r0, r1
 a84:	00000018 	andeq	r0, r0, r8, lsl r0
 a88:	00000a3c 	andeq	r0, r0, ip, lsr sl
 a8c:	08000ff8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl, fp}
 a90:	00000090 	muleq	r0, r0, r0
 a94:	40080e41 	andmi	r0, r8, r1, asr #28
 a98:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 a9c:	00000001 	andeq	r0, r0, r1
 aa0:	00000028 	andeq	r0, r0, r8, lsr #32
 aa4:	00000a3c 	andeq	r0, r0, ip, lsr sl
 aa8:	08001088 	stmdaeq	r0, {r3, r7, ip}
 aac:	000000a8 	andeq	r0, r0, r8, lsr #1
 ab0:	40200e43 	eormi	r0, r0, r3, asr #28
 ab4:	84400883 	strbhi	r0, [r0], #-2179	; 0x883
 ab8:	06854007 	streq	r4, [r5], r7
 abc:	40058640 	andmi	r8, r5, r0, asr #12
 ac0:	88400487 	stmdahi	r0, {r0, r1, r2, r7, sl}^
 ac4:	02894003 	addeq	r4, r9, #3
 ac8:	00018e40 	andeq	r8, r1, r0, asr #28
 acc:	00000018 	andeq	r0, r0, r8, lsl r0
 ad0:	00000a3c 	andeq	r0, r0, ip, lsr sl
 ad4:	08001130 	stmdaeq	r0, {r4, r5, r8, ip}
 ad8:	00000038 	andeq	r0, r0, r8, lsr r0
 adc:	40080e41 	andmi	r0, r8, r1, asr #28
 ae0:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 ae4:	00000001 	andeq	r0, r0, r1
 ae8:	0000001c 	andeq	r0, r0, ip, lsl r0
 aec:	00000a3c 	andeq	r0, r0, ip, lsr sl
 af0:	08001168 	stmdaeq	r0, {r3, r5, r6, r8, ip}
 af4:	00000048 	andeq	r0, r0, r8, asr #32
 af8:	40100e41 	andsmi	r0, r0, r1, asr #28
 afc:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
 b00:	02854003 	addeq	r4, r5, #3
 b04:	00018e40 	andeq	r8, r1, r0, asr #28
 b08:	0000001c 	andeq	r0, r0, ip, lsl r0
 b0c:	00000a3c 	andeq	r0, r0, ip, lsr sl
 b10:	080011b0 	stmdaeq	r0, {r4, r5, r7, r8, ip}
 b14:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 b18:	40100e41 	andsmi	r0, r0, r1, asr #28
 b1c:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
 b20:	02854003 	addeq	r4, r5, #3
 b24:	00018e40 	andeq	r8, r1, r0, asr #28
 b28:	0000001c 	andeq	r0, r0, ip, lsl r0
 b2c:	00000a3c 	andeq	r0, r0, ip, lsr sl
 b30:	08001280 	stmdaeq	r0, {r7, r9, ip}
 b34:	00000084 	andeq	r0, r0, r4, lsl #1
 b38:	40100e41 	andsmi	r0, r0, r1, asr #28
 b3c:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
 b40:	02854003 	addeq	r4, r5, #3
 b44:	00018e40 	andeq	r8, r1, r0, asr #28
 b48:	00000018 	andeq	r0, r0, r8, lsl r0
 b4c:	00000a3c 	andeq	r0, r0, ip, lsr sl
 b50:	08001304 	stmdaeq	r0, {r2, r8, r9, ip}
 b54:	00000024 	andeq	r0, r0, r4, lsr #32
 b58:	40080e41 	andmi	r0, r8, r1, asr #28
 b5c:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
 b60:	00000001 	andeq	r0, r0, r1
 b64:	0000000c 	andeq	r0, r0, ip
 b68:	00000a3c 	andeq	r0, r0, ip, lsr sl
 b6c:	08001328 	stmdaeq	r0, {r3, r5, r8, r9, ip}
 b70:	0000001c 	andeq	r0, r0, ip, lsl r0
 b74:	00000018 	andeq	r0, r0, r8, lsl r0
 b78:	00000a3c 	andeq	r0, r0, ip, lsr sl
 b7c:	08001344 	stmdaeq	r0, {r2, r6, r8, r9, ip}
 b80:	00000040 	andeq	r0, r0, r0, asr #32
 b84:	40080e41 	andmi	r0, r8, r1, asr #28
 b88:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
 b8c:	00000001 	andeq	r0, r0, r1
 b90:	00000024 	andeq	r0, r0, r4, lsr #32
 b94:	00000a3c 	andeq	r0, r0, ip, lsr sl
 b98:	08001384 	stmdaeq	r0, {r2, r7, r8, r9, ip}
 b9c:	000002dc 	ldrdeq	r0, [r0], -ip
 ba0:	40180e41 	andsmi	r0, r8, r1, asr #28
 ba4:	81400680 	smlalbbhi	r0, r0, r0, r6	; <UNPREDICTABLE>
 ba8:	04844005 	streq	r4, [r4], #5
 bac:	40038540 	andmi	r8, r3, r0, asr #10
 bb0:	8e400286 	cdphi	2, 4, cr0, cr0, cr6, {4}
 bb4:	00000001 	andeq	r0, r0, r1
 bb8:	00000024 	andeq	r0, r0, r4, lsr #32
 bbc:	00000a3c 	andeq	r0, r0, ip, lsr sl
 bc0:	08001660 	stmdaeq	r0, {r5, r6, r9, sl, ip}
 bc4:	000000c8 	andeq	r0, r0, r8, asr #1
 bc8:	40180e41 	andsmi	r0, r8, r1, asr #28
 bcc:	84400683 	strbhi	r0, [r0], #-1667	; 0x683
 bd0:	04854005 	streq	r4, [r5], #5
 bd4:	40038640 	andmi	r8, r3, r0, asr #12
 bd8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 bdc:	00000001 	andeq	r0, r0, r1
 be0:	00000018 	andeq	r0, r0, r8, lsl r0
 be4:	00000a3c 	andeq	r0, r0, ip, lsr sl
 be8:	08001728 	stmdaeq	r0, {r3, r5, r8, r9, sl, ip}
 bec:	00000038 	andeq	r0, r0, r8, lsr r0
 bf0:	400c0e41 	andmi	r0, ip, r1, asr #28
 bf4:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
 bf8:	018e4002 	orreq	r4, lr, r2
 bfc:	00000018 	andeq	r0, r0, r8, lsl r0
 c00:	00000a3c 	andeq	r0, r0, ip, lsr sl
 c04:	08001760 	stmdaeq	r0, {r5, r6, r8, r9, sl, ip}
 c08:	0000005c 	andeq	r0, r0, ip, asr r0
 c0c:	40080e41 	andmi	r0, r8, r1, asr #28
 c10:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 c14:	00000001 	andeq	r0, r0, r1
 c18:	0000000c 	andeq	r0, r0, ip
 c1c:	00000a3c 	andeq	r0, r0, ip, lsr sl
 c20:	00000000 	andeq	r0, r0, r0
 c24:	00000002 	andeq	r0, r0, r2
 c28:	0000000c 	andeq	r0, r0, ip
 c2c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 c30:	7c020001 	stcvc	0, cr0, [r2], {1}
 c34:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 c38:	00000018 	andeq	r0, r0, r8, lsl r0
 c3c:	00000c28 	andeq	r0, r0, r8, lsr #24
 c40:	080017bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, ip}
 c44:	00000030 	andeq	r0, r0, r0, lsr r0
 c48:	400c0e41 	andmi	r0, ip, r1, asr #28
 c4c:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
 c50:	018e4002 	orreq	r4, lr, r2
 c54:	00000018 	andeq	r0, r0, r8, lsl r0
 c58:	00000c28 	andeq	r0, r0, r8, lsr #24
 c5c:	080017ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, ip}
 c60:	00000024 	andeq	r0, r0, r4, lsr #32
 c64:	40080e41 	andmi	r0, r8, r1, asr #28
 c68:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 c6c:	00000001 	andeq	r0, r0, r1

Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	4349564e 	movtmi	r5, #38478	; 0x964e
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	5152495f 	cmppl	r2, pc, asr r9
       8:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
       c:	436c656e 	cmnmi	ip, #461373440	; 0x1b800000
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      10:	7300646d 	movwvc	r6, #1133	; 0x46d
      14:	6e497274 	mcrvs	2, 2, r7, cr9, cr4, {3}
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	00786564 	rsbseq	r6, r8, r4, ror #10
      1c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
      24:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
      28:	64416563 	strbvs	r6, [r1], #-1379	; 0x563
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	45700073 	ldrbmi	r0, [r0, #-115]!	; 0x73
      34:	746e4970 	strbtvc	r4, [lr], #-2416	; 0x970
      38:	004e495f 	subeq	r4, lr, pc, asr r9

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	5645445f 			; <UNDEFINED> instruction: 0x5645445f

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	5f454349 	svcpl	0x00454349
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	4f464e49 	svcmi	0x00464e49
      48:	65446200 	strbvs	r6, [r4, #-512]	; 0x200
      4c:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
      54:	73750065 	cmnvc	r5, #101	; 0x65
      58:	626e4562 	rsbvs	r4, lr, #411041792	; 0x18800000
      5c:	00525349 	subseq	r5, r2, r9, asr #6
      60:	55534552 	ldrbpl	r4, [r3, #-1362]	; 0x552
      64:	575f454d 	ldrbpl	r4, [pc, -sp, asr #10]
      68:	00544941 	subseq	r4, r4, r1, asr #18
      6c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
      70:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
      74:	50646e45 	rsbpl	r6, r4, r5, asr #28
      78:	746e696f 	strbtvc	r6, [lr], #-2415	; 0x96f
      7c:	74616546 	strbtvc	r6, [r1], #-1350	; 0x546
      80:	00657275 	rsbeq	r7, r5, r5, ror r2
      84:	49756664 	ldmdbmi	r5!, {r2, r5, r6, r9, sl, sp, lr}^
      88:	0074696e 	rsbseq	r6, r4, lr, ror #18
      8c:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xe4f
      90:	72637365 	rsbvc	r7, r3, #-1811939327	; 0x94000001
      94:	6f747069 	svcvs	0x00747069
      98:	73750072 	cmnvc	r5, #114	; 0x72
      9c:	73755362 	cmnvc	r5, #-2013265919	; 0x88000001
      a0:	646e6570 	strbtvs	r6, [lr], #-1392	; 0x570
      a4:	53456200 	movtpl	r6, #20992	; 0x5200
      a8:	6e63464f 	cdpvs	6, 6, cr4, cr3, cr15, {2}
      ac:	73750074 	cmnvc	r5, #116	; 0x74
      b0:	73655262 	cmnvc	r5, #536870918	; 0x20000006
      b4:	00656d75 	rsbeq	r6, r5, r5, ror sp
      b8:	50535553 	subspl	r5, r3, r3, asr r5
      bc:	45444e45 	strbmi	r4, [r4, #-3653]	; 0xe45
      c0:	45520044 	ldrbmi	r0, [r2, #-68]	; 0x44
      c4:	454d5553 	strbmi	r5, [sp, #-1363]	; 0x553
      c8:	4154535f 	cmpmi	r4, pc, asr r3
      cc:	75005452 	strvc	r5, [r0, #-1106]	; 0x452
      d0:	65536273 	ldrbvs	r6, [r3, #-627]	; 0x273
      d4:	76654474 			; <UNDEFINED> instruction: 0x76654474
      d8:	46656369 	strbtmi	r6, [r5], -r9, ror #6
      dc:	75746165 	ldrbvc	r6, [r4, #-357]!	; 0x165
      e0:	43006572 	movwmi	r6, #1394	; 0x572
      e4:	4479706f 	ldrbtmi	r7, [r9], #-111	; 0x6f
      e8:	00617461 	rsbeq	r7, r1, r1, ror #8
      ec:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
      f0:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
      f4:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
      f8:	63616672 	cmnvs	r1, #119537664	; 0x7200000
      fc:	45440065 	strbmi	r0, [r4, #-101]	; 0x65
     100:	45434956 	strbmi	r4, [r3, #-2390]	; 0x956
     104:	4345525f 	movtmi	r5, #21087	; 0x525f
     108:	45495049 	strbmi	r5, [r9, #-73]	; 0x49
     10c:	5000544e 	andpl	r5, r0, lr, asr #8
     110:	5245574f 	subpl	r5, r5, #20709376	; 0x13c0000
     114:	75004445 	strvc	r4, [r0, #-1093]	; 0x445
     118:	632e6273 	teqvs	lr, #805306375	; 0x30000007
     11c:	62737500 	rsbsvs	r7, r3, #0, 10
     120:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
     124:	6544676e 	strbvs	r6, [r4, #-1902]	; 0x76e
     128:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
     12c:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
     130:	62737500 	rsbsvs	r7, r3, #0, 10
     134:	44746547 	ldrbtmi	r6, [r4], #-1351	; 0x547
     138:	63697665 	cmnvs	r9, #105906176	; 0x6500000
     13c:	73654465 	cmnvc	r5, #1694498816	; 0x65000000
     140:	70697263 	rsbvc	r7, r9, r3, ror #4
     144:	00726f74 	rsbseq	r6, r2, r4, ror pc
     148:	77425355 	smlsldvc	r5, r2, r5, r3
     14c:	65646e49 	strbvs	r6, [r4, #-3657]!	; 0xe49
     150:	76007378 			; <UNDEFINED> instruction: 0x76007378
     154:	00363175 	eorseq	r3, r6, r5, ror r1
     158:	20554e47 	subscs	r4, r5, r7, asr #28
     15c:	2e342043 	cdpcs	0, 3, cr2, cr4, cr3, {2}
     160:	20332e38 	eorscs	r2, r3, r8, lsr lr
     164:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
     168:	38323230 	ldmdacc	r2!, {r4, r5, r9, ip, sp}
     16c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0x820
     170:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
     174:	5b202965 	blpl	80a710 <__Stack_Size+0x80a310>
     178:	2f4d5241 	svccs	0x004d5241
     17c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
     180:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
     184:	385f342d 	ldmdacc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
     188:	6172622d 	cmnvs	r2, sp, lsr #4
     18c:	2068636e 	rsbcs	r6, r8, lr, ror #6
     190:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
     194:	6e6f6973 	mcrvs	9, 3, r6, cr15, cr3, {3}
     198:	38303220 	ldmdacc	r0!, {r5, r9, ip, sp}
     19c:	5d323233 	lfmpl	f3, 4, [r2, #-204]!	; 0xffffff34
     1a0:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xd20
     1a4:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
     1a8:	636d2d20 	cmnvs	sp, #32, 26	; 0x800
     1ac:	633d7570 	teqvs	sp, #112, 10	; 0x1c000000
     1b0:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0x26f
     1b4:	336d2d78 	cmncc	sp, #120, 26	; 0x1e00
     1b8:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xd20
     1bc:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
     1c0:	746e692d 	strbtvc	r6, [lr], #-2349	; 0x92d
     1c4:	6f777265 	svcvs	0x00777265
     1c8:	2d206b72 	vstmdbcs	r0!, {d6-<overflow reg d62>}
     1cc:	4f2d2067 	svcmi	0x002d2067
     1d0:	662d2073 			; <UNDEFINED> instruction: 0x662d2073
     1d4:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
     1d8:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     1dc:	6365732d 	cmnvs	r5, #-1275068416	; 0xb4000000
     1e0:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     1e4:	662d2073 			; <UNDEFINED> instruction: 0x662d2073
     1e8:	61746164 	cmnvs	r4, r4, ror #2
     1ec:	6365732d 	cmnvs	r5, #-1275068416	; 0xb4000000
     1f0:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     1f4:	6f6c0073 	svcvs	0x006c0073
     1f8:	6920676e 	stmdbvs	r0!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
     1fc:	7500746e 	strvc	r7, [r0, #-1134]	; 0x46e
     200:	65476273 	strbvs	r6, [r7, #-627]	; 0x273
     204:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
     208:	44676966 	strbtmi	r6, [r7], #-2406	; 0x966
     20c:	72637365 	rsbvc	r7, r3, #-1811939327	; 0x94000001
     210:	6f747069 	svcvs	0x00747069
     214:	53550072 	cmppl	r5, #114	; 0x72
     218:	65526242 	ldrbvs	r6, [r2, #-578]	; 0x242
     21c:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
     220:	53550074 	cmppl	r5, #116	; 0x74
     224:	4f4e5f42 	svcmi	0x004e5f42
     228:	45525f54 	ldrbmi	r5, [r2, #-3924]	; 0xf54
     22c:	00594441 	subseq	r4, r9, r1, asr #8
     230:	74734977 	ldrbtvc	r4, [r3], #-2423	; 0x977
     234:	45520072 	ldrbmi	r0, [r2, #-114]	; 0x72
     238:	454d5553 	strbmi	r5, [sp, #-1363]	; 0x553
     23c:	5458455f 	ldrbpl	r4, [r8], #-1375	; 0x55f
     240:	414e5245 	cmpmi	lr, r5, asr #4
     244:	6544004c 	strbvs	r0, [r4, #-76]	; 0x4c
     248:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
     24c:	6261545f 	rsbvs	r5, r1, #1593835520	; 0x5f000000
     250:	7300656c 	movwvc	r6, #1388	; 0x56c
     254:	70757465 	rsbsvc	r7, r5, r5, ror #8
     258:	00425355 	subeq	r5, r2, r5, asr r3
     25c:	47627375 			; <UNDEFINED> instruction: 0x47627375
     260:	6f437465 	svcvs	0x00437465
     264:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     268:	74617275 	strbtvc	r7, [r1], #-629	; 0x275
     26c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     270:	746e4962 	strbtvc	r4, [lr], #-2402	; 0x962
     274:	6b636150 	blvs	18d87bc <__Stack_Size+0x18d83bc>
     278:	00464f53 	subeq	r4, r6, r3, asr pc
     27c:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
     280:	616d726f 	cmnvs	sp, pc, ror #4
     284:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     288:	4d726300 	ldclmi	3, cr6, [r2, #-0]
     28c:	006b7361 	rsbeq	r7, fp, r1, ror #6
     290:	5f627355 	svcpl	0x00627355
     294:	6e654c77 	mcrvs	12, 3, r4, cr5, cr7, {3}
     298:	00687467 	rsbeq	r7, r8, r7, ror #8
     29c:	73655265 	cmnvc	r5, #1342177286	; 0x50000006
     2a0:	53656d75 	cmnpl	r5, #7488	; 0x1d40
     2a4:	61567465 	cmpvs	r6, r5, ror #8
     2a8:	4e49006c 	cdpmi	0, 4, cr0, cr9, cr12, {3}
     2ac:	46524554 			; <UNDEFINED> instruction: 0x46524554
     2b0:	5f454341 	svcpl	0x00454341
     2b4:	49434552 	stmdbmi	r3, {r1, r4, r6, r8, sl, lr}^
     2b8:	4e454950 	mcrmi	9, 2, r4, cr5, cr0, {2}
     2bc:	43770054 	cmnmi	r7, #84	; 0x54
     2c0:	0052544e 	subseq	r5, r2, lr, asr #8
     2c4:	46746567 	ldrbtmi	r6, [r4], -r7, ror #10
     2c8:	6873616c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sp, lr}^
     2cc:	65676150 	strbvs	r6, [r7, #-336]!	; 0x150
     2d0:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0x953
     2d4:	4e4f5000 	cdpmi	0, 4, cr5, cr15, cr0, {0}
     2d8:	45445f45 	strbmi	r5, [r4, #-3909]	; 0xf45
     2dc:	49524353 	ldmdbmi	r2, {r0, r1, r4, r6, r8, r9, lr}^
     2e0:	524f5450 	subpl	r5, pc, #80, 8	; 0x50000000
     2e4:	62737500 	rsbsvs	r7, r3, #0, 10
     2e8:	44746553 	ldrbtmi	r6, [r4], #-1363	; 0x553
     2ec:	63697665 	cmnvs	r9, #105906176	; 0x6500000
     2f0:	64644165 	strbtvs	r4, [r4], #-357	; 0x165
     2f4:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     2f8:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     2fc:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
     300:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
     304:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
     308:	00657275 	rsbeq	r7, r5, r5, ror r2
     30c:	53627375 	cmnpl	r2, #-738197503	; 0xd4000001
     310:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
     314:	74754f73 	ldrbtvc	r4, [r5], #-3955	; 0xf73
     318:	62735500 	rsbsvs	r5, r3, #0, 10
     31c:	664f775f 			; <UNDEFINED> instruction: 0x664f775f
     320:	74657366 	strbtvc	r7, [r5], #-870	; 0x366
     324:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
     328:	61647055 	qdsubvs	r7, r5, r4
     32c:	79426574 	stmdbvc	r2, {r2, r4, r5, r6, r8, sl, sp, lr}^
     330:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0x552
     334:	00747365 	rsbseq	r7, r4, r5, ror #6
     338:	41545441 	cmpmi	r4, r1, asr #8
     33c:	44454843 	strbmi	r4, [r5], #-2115	; 0x843
     340:	62737500 	rsbsvs	r7, r3, #0, 10
     344:	61446f4e 	cmpvs	r4, lr, asr #30
     348:	65536174 	ldrbvs	r6, [r3, #-372]	; 0x174
     34c:	00707574 	rsbseq	r7, r0, r4, ror r5
     350:	4349564e 	movtmi	r5, #38478	; 0x964e
     354:	5152495f 	cmppl	r2, pc, asr r9
     358:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     35c:	536c656e 	cmnpl	ip, #461373440	; 0x1b800000
     360:	72506275 	subsvc	r6, r0, #1342177287	; 0x50000007
     364:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     368:	5f007974 	svcpl	0x00007974
     36c:	49434552 	stmdbmi	r3, {r1, r4, r6, r8, sl, lr}^
     370:	4e454950 	mcrmi	9, 2, r4, cr5, cr0, {2}
     374:	59545f54 	ldmdbpl	r4, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
     378:	6c004550 	cfstr32vs	mvfx4, [r0], {80}	; 0x50
     37c:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     380:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     384:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
     388:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
     38c:	52544300 	subspl	r4, r4, #0, 6
     390:	00504c5f 	subseq	r4, r0, pc, asr ip
     394:	53627375 	cmnpl	r2, #-738197503	; 0xd4000001
     398:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
     39c:	006e4973 	rsbeq	r4, lr, r3, ror r9
     3a0:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
     3a4:	5f746e65 	svcpl	0x00746e65
     3a8:	74616546 	strbtvc	r6, [r1], #-1350	; 0x546
     3ac:	00657275 	rsbeq	r7, r5, r5, ror r2
     3b0:	61746f54 	cmnvs	r4, r4, asr pc
     3b4:	6f435f6c 	svcvs	0x00435f6c
     3b8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     3bc:	74617275 	strbtvc	r7, [r1], #-629	; 0x275
     3c0:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     3c4:	52627375 	rsbpl	r7, r2, #-738197503	; 0xd4000001
     3c8:	74657365 	strbtvc	r7, [r5], #-869	; 0x365
     3cc:	62737500 	rsbsvs	r7, r3, #0, 10
     3d0:	49627344 	stmdbmi	r2!, {r2, r6, r8, r9, ip, sp, lr}^
     3d4:	73005253 	movwvc	r5, #595	; 0x253
     3d8:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xf68
     3dc:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
     3e0:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0x769
     3e4:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
     3e8:	53550074 	cmppl	r5, #116	; 0x74
     3ec:	52455f42 	subpl	r5, r5, #264	; 0x108
     3f0:	00524f52 	subseq	r4, r2, r2, asr pc
     3f4:	55534552 	ldrbpl	r4, [r3, #-1362]	; 0x552
     3f8:	4f5f454d 	svcmi	0x005f454d
     3fc:	75004646 	strvc	r4, [r0, #-1606]	; 0x646
     400:	755f3631 	ldrbvc	r3, [pc, #-1585]	; fffffdd7 <BootRAM+0xef70578>
     404:	73550038 	cmpvc	r5, #56	; 0x38
     408:	435f7265 	cmpmi	pc, #1342177286	; 0x50000006
     40c:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
     410:	74616546 	strbtvc	r6, [r1], #-1350	; 0x546
     414:	00657275 	rsbeq	r7, r5, r5, ror r2
     418:	77425355 	smlsldvc	r5, r2, r5, r3
     41c:	756c6156 	strbvc	r6, [ip, #-342]!	; 0x156
     420:	4f007365 	svcmi	0x00007365
     424:	52454854 	subpl	r4, r5, #84, 16	; 0x540000
     428:	4345525f 	movtmi	r5, #21087	; 0x525f
     42c:	45495049 	strbmi	r5, [r9, #-73]	; 0x49
     430:	6200544e 	andvs	r5, r0, #1308622848	; 0x4e000000
     434:	006c6f6f 	rsbeq	r6, ip, pc, ror #30
     438:	61725477 	cmnvs	r2, r7, ror r4
     43c:	6566736e 	strbvs	r7, [r6, #-878]!	; 0x36e
     440:	7a695372 	bvc	1a55210 <__Stack_Size+0x1a54e10>
     444:	75760065 	ldrbvc	r0, [r6, #-101]!	; 0x65
     448:	4e003233 	mcrmi	2, 0, r3, cr0, cr3, {1}
     44c:	5f434956 	svcpl	0x00434956
     450:	43515249 	cmpmi	r1, #-1879048188	; 0x90000004
     454:	6e6e6168 	powvsez	f6, f6, #0.0
     458:	5f006c65 	svcpl	0x00006c65
     45c:	67655277 			; <UNDEFINED> instruction: 0x67655277
     460:	006c6156 	rsbeq	r6, ip, r6, asr r1
     464:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
     468:	63616672 	cmnvs	r1, #119537664	; 0x7200000
     46c:	564e0065 	strbpl	r0, [lr], -r5, rrx
     470:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     474:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
     478:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
     47c:	6572506c 	ldrbvs	r5, [r2, #-108]!	; 0x6c
     480:	74706d65 	ldrbtvc	r6, [r0], #-3429	; 0xd65
     484:	506e6f69 	rsbpl	r6, lr, r9, ror #30
     488:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
     48c:	00797469 	rsbseq	r7, r9, r9, ror #8
     490:	4349564e 	movtmi	r5, #38478	; 0x964e
     494:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     498:	70795474 	rsbsvc	r5, r9, r4, ror r4
     49c:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     4a0:	72754300 	rsbsvc	r4, r5, #0, 6
     4a4:	746e6572 	strbtvc	r6, [lr], #-1394	; 0x572
     4a8:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
     4ac:	75676966 	strbvc	r6, [r7, #-2406]!	; 0x966
     4b0:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     4b4:	75006e6f 	strvc	r6, [r0, #-3695]	; 0xe6f
     4b8:	70416273 	subvc	r6, r1, r3, ror r2
     4bc:	696e4970 	stmdbvs	lr!, {r4, r5, r6, r8, fp, lr}^
     4c0:	49770074 	ldmdbmi	r7!, {r2, r4, r5, r6}^
     4c4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     4c8:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0x572
     4cc:	73614d5f 	cmnvc	r1, #6080	; 0x17c0
     4d0:	7375006b 	cmnvc	r5, #107	; 0x6b
     4d4:	74655362 	strbtvc	r5, [r5], #-866	; 0x362
     4d8:	70646e45 	rsbvc	r6, r4, r5, asr #28
     4dc:	746e696f 	strbtvc	r6, [lr], #-2415	; 0x96f
     4e0:	74616546 	strbtvc	r6, [r1], #-1350	; 0x546
     4e4:	00657275 	rsbeq	r7, r5, r5, ror r2
     4e8:	73616c43 	cmnvc	r1, #17152	; 0x4300
     4ec:	65475f73 	strbvs	r5, [r7, #-3955]	; 0xf73
     4f0:	6e495f74 	mcrvs	15, 2, r5, cr9, cr4, {3}
     4f4:	66726574 			; <UNDEFINED> instruction: 0x66726574
     4f8:	5f656361 	svcpl	0x00656361
     4fc:	74746553 	ldrbtvc	r6, [r4], #-1363	; 0x553
     500:	00676e69 	rsbeq	r6, r7, r9, ror #28
     504:	55756664 	ldrbpl	r6, [r5, #-1636]!	; 0x664
     508:	74616470 	strbtvc	r6, [r1], #-1136	; 0x470
     50c:	52794265 	rsbspl	r4, r9, #1342177286	; 0x50000006
     510:	74657365 	strbtvc	r7, [r5], #-869	; 0x365
     514:	7a697300 	bvc	1a5d11c <__Stack_Size+0x1a5cd1c>
     518:	70797465 	rsbsvc	r7, r9, r5, ror #8
     51c:	6c430065 	mcrrvs	0, 6, r0, r3, cr5
     520:	5f737361 	svcpl	0x00737361
     524:	61746144 	cmnvs	r4, r4, asr #2
     528:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
     52c:	70007075 	andvc	r7, r0, r5, ror r0
     530:	706f7250 	rsbvc	r7, pc, r0, asr r2	; <UNPREDICTABLE>
     534:	79747265 	ldmdbvc	r4!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     538:	42535500 	subsmi	r5, r3, #0, 10
     53c:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     540:	445f0074 	ldrbmi	r0, [pc], #-116	; 548 <__Stack_Size+0x148>
     544:	43495645 	movtmi	r5, #38469	; 0x9645
     548:	54535f45 	ldrbpl	r5, [r3], #-3909	; 0xf45
     54c:	00455441 	subeq	r5, r5, r1, asr #8
     550:	62425355 	subvs	r5, r2, #1409286145	; 0x54000001
     554:	7165526d 	cmnvc	r5, sp, ror #4
     558:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0x575
     55c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     560:	62737500 	rsbsvs	r7, r3, #0, 10
     564:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xf50
     568:	006e4f72 	rsbeq	r4, lr, r2, ror pc
     56c:	6f697067 	svcvs	0x00697067
     570:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
     574:	625f6574 	subsvs	r6, pc, #116, 10	; 0x1d000000
     578:	52007469 	andpl	r7, r0, #1761607680	; 0x69000000
     57c:	5f504578 	svcpl	0x00504578
     580:	66667562 	strbtvs	r7, [r6], -r2, ror #10
     584:	52007265 	andpl	r7, r0, #1342177286	; 0x50000006
     588:	4d555345 	ldclmi	3, cr5, [r5, #-276]	; 0xfffffeec
     58c:	53455f45 	movtpl	r5, #24389	; 0x5f45
     590:	4400464f 	strmi	r4, [r0], #-1615	; 0x64f
     594:	72637365 	rsbvc	r7, r3, #-1811939327	; 0x94000001
     598:	6f747069 	svcvs	0x00747069
     59c:	69535f72 	ldmdbvs	r3, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     5a0:	5500657a 	strpl	r6, [r0, #-1402]	; 0x57a
     5a4:	5f726573 	svcpl	0x00726573
     5a8:	44746553 	ldrbtmi	r6, [r4], #-1363	; 0x553
     5ac:	63697665 	cmnvs	r9, #105906176	; 0x6500000
     5b0:	61654665 	cmnvs	r5, r5, ror #12
     5b4:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
     5b8:	65735500 	ldrbvs	r5, [r3, #-1280]!	; 0x500
     5bc:	65535f72 	ldrbvs	r5, [r3, #-3954]	; 0xf72
     5c0:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
     5c4:	75676966 	strbvc	r6, [r7, #-2406]!	; 0x966
     5c8:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     5cc:	46006e6f 	strmi	r6, [r0], -pc, ror #28
     5d0:	45534c41 	ldrbmi	r4, [r3, #-3137]	; 0xc41
     5d4:	65735500 	ldrbvs	r5, [r3, #-1280]!	; 0x500
     5d8:	65475f72 	strbvs	r5, [r7, #-3954]	; 0xf72
     5dc:	746e4974 	strbtvc	r4, [lr], #-2420	; 0x974
     5e0:	61667265 	cmnvs	r6, r5, ror #4
     5e4:	44006563 	strmi	r6, [r0], #-1379	; 0x563
     5e8:	63697665 	cmnvs	r9, #105906176	; 0x6500000
     5ec:	72505f65 	subsvc	r5, r0, #404	; 0x194
     5f0:	7265706f 	rsbvc	r7, r5, #111	; 0x6f
     5f4:	52007974 	andpl	r7, r0, #116, 18	; 0x1d0000
     5f8:	4d555345 	ldclmi	3, cr5, [r5, #-276]	; 0xfffffeec
     5fc:	4e4f5f45 	cdpmi	15, 4, cr5, cr15, cr5, {2}
     600:	62737500 	rsbsvs	r7, r3, #0, 10
     604:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
     608:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xe75
     60c:	616e6f69 	cmnvs	lr, r9, ror #30
     610:	7365446c 	cmnvc	r5, #108, 8	; 0x6c000000
     614:	70697263 	rsbvc	r7, r9, r3, ror #4
     618:	00726f74 	rsbseq	r6, r2, r4, ror pc
     61c:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
     620:	5f746e65 	svcpl	0x00746e65
     624:	65746c41 	ldrbvs	r6, [r4, #-3137]!	; 0xc41
     628:	74616e72 	strbtvc	r6, [r1], #-3698	; 0xe72
     62c:	74655365 	strbtvc	r5, [r5], #-869	; 0x365
     630:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
     634:	62737500 	rsbsvs	r7, r3, #0, 10
     638:	61746144 	cmnvs	r4, r4, asr #2
     63c:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0x553
     640:	6e750070 	mrcvs	0, 3, r0, cr5, cr0, {3}
     644:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
     648:	63206465 	teqvs	r0, #1694498816	; 0x65000000
     64c:	00726168 	rsbseq	r6, r2, r8, ror #2
     650:	4553555f 	ldrbmi	r5, [r3, #-1375]	; 0x55f
     654:	54535f52 	ldrbpl	r5, [r3], #-3922	; 0xf52
     658:	41444e41 	cmpmi	r4, r1, asr #28
     65c:	525f4452 	subspl	r4, pc, #1375731712	; 0x52000000
     660:	45555145 	ldrbmi	r5, [r5, #-325]	; 0x145
     664:	00535453 	subseq	r5, r3, r3, asr r4
     668:	5f425355 	svcpl	0x00425355
     66c:	435f504c 	cmpmi	pc, #76	; 0x4c
     670:	5f314e41 	svcpl	0x00314e41
     674:	5f305852 	svcpl	0x00305852
     678:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     67c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     680:	64007265 	strvs	r7, [r0], #-613	; 0x265
     684:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     688:	65735500 	ldrbvs	r5, [r3, #-1280]!	; 0x500
     68c:	65475f72 	strbvs	r5, [r7, #-3954]	; 0xf72
     690:	61745374 	cmnvs	r4, r4, ror r3
     694:	00737574 	rsbseq	r7, r3, r4, ror r5
     698:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
     69c:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
     6a0:	38750074 	ldmdacc	r5!, {r2, r4, r5, r6}^
     6a4:	6273755f 	rsbsvs	r7, r3, #398458880	; 0x17c00000
     6a8:	636e7546 	cmnvs	lr, #293601280	; 0x11800000
     6ac:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     6b0:	65446c61 	strbvs	r6, [r4, #-3169]	; 0xc61
     6b4:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
     6b8:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
     6bc:	65735500 	ldrbvs	r5, [r3, #-1280]!	; 0x500
     6c0:	65475f72 	strbvs	r5, [r7, #-3954]	; 0xf72
     6c4:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
     6c8:	75676966 	strbvc	r6, [r7, #-2406]!	; 0x966
     6cc:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     6d0:	52006e6f 	andpl	r6, r0, #1776	; 0x6f0
     6d4:	4d555345 	ldclmi	3, cr5, [r5, #-276]	; 0xfffffeec
     6d8:	414c5f45 	cmpmi	ip, r5, asr #30
     6dc:	00524554 	subseq	r4, r2, r4, asr r5
     6e0:	47627375 			; <UNDEFINED> instruction: 0x47627375
     6e4:	6e497465 	cdpvs	4, 4, cr7, cr9, cr5, {3}
     6e8:	66726574 			; <UNDEFINED> instruction: 0x66726574
     6ec:	53656361 	cmnpl	r5, #-2080374783	; 0x84000001
     6f0:	69747465 	ldmdbvs	r4!, {r0, r2, r5, r6, sl, ip, sp, lr}^
     6f4:	4300676e 	movwmi	r6, #1902	; 0x76e
     6f8:	7373616c 	cmnvc	r3, #108, 2
     6fc:	446f4e5f 	strbtmi	r4, [pc], #-3679	; 704 <__Stack_Size+0x304>
     700:	5f617461 	svcpl	0x00617461
     704:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0x553
     708:	766e0070 			; <UNDEFINED> instruction: 0x766e0070
     70c:	6e496369 	cdpvs	3, 4, cr6, cr9, cr9, {3}
     710:	43007469 	movwmi	r7, #1129	; 0x469
     714:	5f6c7274 	svcpl	0x006c7274
     718:	6f666e49 	svcvs	0x00666e49
     71c:	73655200 	cmnvc	r5, #0, 4
     720:	53656d75 	cmnpl	r5, #7488	; 0x1d40
     724:	62737500 	rsbsvs	r7, r3, #0, 10
     728:	49746553 	ldmdbmi	r4!, {r0, r1, r4, r6, r8, sl, sp, lr}^
     72c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     730:	65636166 	strbvs	r6, [r3, #-358]!	; 0x166
     734:	45525f00 	ldrbmi	r5, [r2, #-3840]	; 0xf00
     738:	544c5553 	strbpl	r5, [ip], #-1363	; 0x553
     73c:	55525400 	ldrbpl	r5, [r2, #-1024]	; 0x400
     740:	445f0045 	ldrbmi	r0, [pc], #-69	; 748 <__Stack_Size+0x348>
     744:	43495645 	movtmi	r5, #38469	; 0x9645
     748:	52505f45 	subspl	r5, r0, #276	; 0x114
     74c:	7500504f 	strvc	r5, [r0, #-79]	; 0x4f
     750:	65536273 	ldrbvs	r6, [r3, #-627]	; 0x273
     754:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
     758:	75676966 	strbvc	r6, [r7, #-2406]!	; 0x966
     75c:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     760:	43006e6f 	movwmi	r6, #3695	; 0xe6f
     764:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
     768:	6174535f 	cmnvs	r4, pc, asr r3
     76c:	5f737574 	svcpl	0x00737574
     770:	0074754f 	rsbseq	r7, r4, pc, asr #10
     774:	5f425355 	svcpl	0x00425355
     778:	55534e55 	ldrbpl	r4, [r3, #-3669]	; 0xe55
     77c:	524f5050 	subpl	r5, pc, #80	; 0x50
     780:	6c610054 	stclvs	0, cr0, [r1], #-336	; 0xfffffeb0
     784:	74655374 	strbtvc	r5, [r5], #-884	; 0x374
     788:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
     78c:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
     790:	78525045 	ldmdavc	r2, {r0, r2, r6, ip, lr}^
     794:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
     798:	72500074 	subsvc	r0, r0, #116	; 0x74
     79c:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
     7a0:	74535f73 	ldrbvc	r5, [r3], #-3955	; 0xf73
     7a4:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     7a8:	004e495f 	subeq	r4, lr, pc, asr r9
     7ac:	636f7250 	cmnvs	pc, #80, 4
     7b0:	5f737365 	svcpl	0x00737365
     7b4:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     7b8:	4f5f7375 	svcmi	0x005f7375
     7bc:	75005455 	strvc	r5, [r0, #-1109]	; 0x455
     7c0:	65526273 	ldrbvs	r6, [r2, #-627]	; 0x273
     7c4:	656d7573 	strbvs	r7, [sp, #-1395]!	; 0x573
     7c8:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     7cc:	45445f00 	strbmi	r5, [r4, #-3840]	; 0xf00
     7d0:	45434956 	strbmi	r4, [r3, #-2390]	; 0x956
     7d4:	62737500 	rsbsvs	r7, r3, #0, 10
     7d8:	42627344 	rsbmi	r7, r2, #68, 6	; 0x10000001
     7dc:	70007375 	andvc	r7, r0, r5, ror r3
     7e0:	6e497045 	cdpvs	0, 4, cr7, cr9, cr5, {2}
     7e4:	554f5f74 	strbpl	r5, [pc, #-3956]	; fffff878 <BootRAM+0xef70019>
     7e8:	65720054 	ldrbvs	r0, [r2, #-84]!	; 0x54
     7ec:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
     7f0:	4e450074 	mcrmi	0, 2, r0, cr5, cr4, {3}
     7f4:	494f5044 	stmdbmi	pc, {r2, r6, ip, lr}^	; <UNPREDICTABLE>
     7f8:	525f544e 	subspl	r5, pc, #1308622848	; 0x4e000000
     7fc:	50494345 	subpl	r4, r9, r5, asr #6
     800:	544e4549 	strbpl	r4, [lr], #-1353	; 0x549
     804:	62737500 	rsbsvs	r7, r3, #0, 10
     808:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     80c:	42535500 	subsmi	r5, r3, #0, 10
     810:	6e654c77 	mcrvs	12, 3, r4, cr5, cr7, {3}
     814:	73687467 	cmnvc	r8, #1728053248	; 0x67000000
     818:	62737500 	rsbsvs	r7, r3, #0, 10
     81c:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
     820:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
     824:	73654467 	cmnvc	r5, #1728053248	; 0x67000000
     828:	70697263 	rsbvc	r7, r9, r3, ror #4
     82c:	00726f74 	rsbseq	r6, r2, r4, ror pc
     830:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
     834:	64726164 	ldrbtvs	r6, [r2], #-356	; 0x164
     838:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
     83c:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
     840:	74706972 	ldrbtvc	r6, [r0], #-2418	; 0x972
     844:	6144726f 	cmpvs	r4, pc, ror #4
     848:	43006174 	movwmi	r6, #372	; 0x174
     84c:	49464e4f 	stmdbmi	r6, {r0, r1, r2, r3, r6, r9, sl, fp, lr}^
     850:	45525547 	ldrbmi	r5, [r2, #-1351]	; 0x547
     854:	73750044 	cmnvc	r5, #68	; 0x44
     858:	776f5062 	strbvc	r5, [pc, -r2, rrx]!
     85c:	664f7265 	strbvs	r7, [pc], -r5, ror #4
     860:	6d2f0066 	stcvs	0, cr0, [pc, #-408]!	; 6d0 <__Stack_Size+0x2d0>
     864:	61696465 	cmnvs	r9, r5, ror #8
     868:	5f66732f 	svcpl	0x0066732f
     86c:	48746947 	ldmdami	r4!, {r0, r1, r2, r6, r8, fp, sp, lr}^
     870:	4d2f6275 	sfmmi	f6, 4, [pc, #-468]!	; 6a4 <__Stack_Size+0x2a4>
     874:	69727461 	ldmdbvs	r2!, {r0, r5, r6, sl, ip, sp, lr}^
     878:	6f422078 	svcvs	0x00422078
     87c:	6f6c746f 	svcvs	0x006c746f
     880:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
     884:	72754300 	rsbsvc	r4, r5, #0, 6
     888:	746e6572 	strbtvc	r6, [lr], #-1394	; 0x572
     88c:	746e495f 	strbtvc	r4, [lr], #-2399	; 0x95f
     890:	61667265 	cmnvs	r6, r5, ror #4
     894:	75006563 	strvc	r6, [r0, #-1379]	; 0x563
     898:	65476273 	strbvs	r6, [r7, #-627]	; 0x273
     89c:	746e4974 	strbtvc	r4, [lr], #-2420	; 0x974
     8a0:	61667265 	cmnvs	r6, r5, ror #4
     8a4:	75006563 	strvc	r6, [r0, #-1379]	; 0x563
     8a8:	73755f38 	cmnvc	r5, #56, 30	; 0xe0
     8ac:	6e6f4362 	cdpvs	3, 6, cr4, cr15, cr2, {3}
     8b0:	44676966 	strbtmi	r6, [r7], #-2406	; 0x966
     8b4:	72637365 	rsbvc	r7, r3, #-1811939327	; 0x94000001
     8b8:	6f747069 	svcvs	0x00747069
     8bc:	55464472 	strbpl	r4, [r6, #-1138]	; 0x472
     8c0:	44444100 	strbmi	r4, [r4], #-256	; 0x100
     8c4:	53534552 	cmppl	r3, #343932928	; 0x14800000
     8c8:	52004445 	andpl	r4, r0, #1157627904	; 0x45000000
     8cc:	4d555345 	ldclmi	3, cr5, [r5, #-276]	; 0xfffffeec
     8d0:	4e495f45 	cdpmi	15, 4, cr5, cr9, cr5, {2}
     8d4:	4e524554 	mrcmi	5, 2, r4, cr2, cr4, {2}
     8d8:	5f004c41 	svcpl	0x00004c41
     8dc:	55534552 	ldrbpl	r4, [r3, #-1362]	; 0x552
     8e0:	535f454d 	cmppl	pc, #322961408	; 0x13400000
     8e4:	45544154 	ldrbmi	r4, [r4, #-340]	; 0x154
     8e8:	42535500 	subsmi	r5, r3, #0, 10
     8ec:	4355535f 	cmpmi	r5, #2080374785	; 0x7c000001
     8f0:	53534543 	cmppl	r3, #281018368	; 0x10c00000
     8f4:	434e5500 	movtmi	r5, #58624	; 0xe500
     8f8:	454e4e4f 	strbmi	r4, [lr, #-3663]	; 0xe4f
     8fc:	44455443 	strbmi	r5, [r5], #-1091	; 0x443
     900:	62737500 	rsbsvs	r7, r3, #0, 10
     904:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
     908:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
     90c:	455f0073 	ldrbmi	r0, [pc, #-115]	; 8a1 <__Stack_Size+0x4a1>
     910:	4f50444e 	svcmi	0x0050444e
     914:	5f544e49 	svcpl	0x00544e49
     918:	4f464e49 	svcmi	0x00464e49
     91c:	62737500 	rsbsvs	r7, r3, #0, 10
     920:	61656c43 	cmnvs	r5, r3, asr #24
     924:	61654672 	smcvs	21602	; 0x5462
     928:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
     92c:	746f5400 	strbtvc	r5, [pc], #-1024	; 934 <__Stack_Size+0x534>
     930:	455f6c61 	ldrbmi	r6, [pc, #-3169]	; fffffcd7 <BootRAM+0xef70478>
     934:	6f70646e 	svcvs	0x0070646e
     938:	00746e69 	rsbseq	r6, r4, r9, ror #28
     93c:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xf43
     940:	536c6f72 	cmnpl	ip, #456	; 0x1c8
     944:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
     948:	706f4300 	rsbvc	r4, pc, r0, lsl #6
     94c:	756f5279 	strbvc	r5, [pc, #-633]!	; 6db <__Stack_Size+0x2db>
     950:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0x974
     954:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
     958:	78525045 	ldmdavc	r2, {r0, r2, r6, ip, lr}^
     95c:	696c6156 	stmdbvs	ip!, {r1, r2, r4, r6, r8, sp, lr}^
     960:	6f6e0064 	svcvs	0x006e0064
     964:	6e696874 	mcrvs	8, 3, r6, cr9, cr4, {3}
     968:	6f725067 	svcvs	0x00725067
     96c:	38750063 	ldmdacc	r5!, {r0, r1, r5, r6}^
     970:	6273755f 	rsbsvs	r7, r3, #398458880	; 0x17c00000
     974:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
     978:	6556676e 	ldrbvs	r6, [r6, #-1902]	; 0x76e
     97c:	726f646e 	rsbvc	r6, pc, #1845493760	; 0x6e000000
     980:	5f387500 	svcpl	0x00387500
     984:	53627375 	cmnpl	r2, #-738197503	; 0xd4000001
     988:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
     98c:	746e4967 	strbtvc	r4, [lr], #-2407	; 0x967
     990:	61667265 	cmnvs	r6, r5, ror #4
     994:	75006563 	strvc	r6, [r0, #-1379]	; 0x563
     998:	73755f38 	cmnvc	r5, #56, 30	; 0xe0
     99c:	76654462 	strbtvc	r4, [r5], -r2, ror #8
     9a0:	44656369 	strbtmi	r6, [r5], #-873	; 0x369
     9a4:	72637365 	rsbvc	r7, r3, #-1811939327	; 0x94000001
     9a8:	6f747069 	svcvs	0x00747069
     9ac:	55464472 	strbpl	r4, [r6, #-1138]	; 0x472
     9b0:	5f387500 	svcpl	0x00387500
     9b4:	53627375 	cmnpl	r2, #-738197503	; 0xd4000001
     9b8:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
     9bc:	72655367 	rsbvc	r5, r5, #-1677721599	; 0x9c000001
     9c0:	006c6169 	rsbeq	r6, ip, r9, ror #2
     9c4:	755f3875 	ldrbvc	r3, [pc, #-2165]	; 157 <_Minimum_Stack_Size+0x57>
     9c8:	74536273 	ldrbvc	r6, [r3], #-627	; 0x273
     9cc:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
     9d0:	30746c41 	rsbscc	r6, r4, r1, asr #24
     9d4:	5f387500 	svcpl	0x00387500
     9d8:	53627375 	cmnpl	r2, #-738197503	; 0xd4000001
     9dc:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
     9e0:	6f725067 	svcvs	0x00725067
     9e4:	74637564 	strbtvc	r7, [r3], #-1380	; 0x564
     9e8:	5f387500 	svcpl	0x00387500
     9ec:	53627375 	cmnpl	r2, #-738197503	; 0xd4000001
     9f0:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
     9f4:	6e614c67 	cdpvs	12, 6, cr4, cr1, cr7, {3}
     9f8:	00644967 	rsbeq	r4, r4, r7, ror #18
     9fc:	5f627375 	svcpl	0x00627375
     a00:	63736564 	cmnvs	r3, #100, 10	; 0x19000000
     a04:	74706972 	ldrbtvc	r6, [r0], #-2418	; 0x972
     a08:	632e726f 	teqvs	lr, #-268435450	; 0xf0000006
     a0c:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
     a10:	696e6946 	stmdbvs	lr!, {r1, r2, r6, r8, fp, sp, lr}^
     a14:	70556873 	subsvc	r6, r5, r3, ror r8
     a18:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xf6c
     a1c:	74616d00 	strbtvc	r6, [r1], #-3328	; 0xd00
     a20:	5f786972 	svcpl	0x00786972
     a24:	6f666e69 	svcvs	0x00666e69
     a28:	6d756a00 	vldmdbvs	r5!, {s13-s12}
     a2c:	556f5470 	strbpl	r5, [pc, #-1136]!	; 5c4 <__Stack_Size+0x1c4>
     a30:	00726573 	rsbseq	r6, r2, r3, ror r5
     a34:	7274616d 	rsbsvc	r6, r4, #1073741851	; 0x4000001b
     a38:	625f7869 	subsvs	r7, pc, #6881280	; 0x690000
     a3c:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
     a40:	74657300 	strbtvc	r7, [r5], #-768	; 0x300
     a44:	454c7075 	strbmi	r7, [ip, #-117]	; 0x75
     a48:	646e4144 	strbtvs	r4, [lr], #-324	; 0x144
     a4c:	74747542 	ldrbtvc	r7, [r4], #-1346	; 0x542
     a50:	63006e6f 	movwvs	r6, #3695	; 0xe6f
     a54:	6b636568 	blvs	18d9ffc <__Stack_Size+0x18d9bfc>
     a58:	43646e41 	cmnmi	r4, #1040	; 0x410
     a5c:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
     a60:	746f6f42 	strbtvc	r6, [pc], #-3906	; a68 <__Stack_Size+0x668>
     a64:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xf6c
     a68:	6c467265 	sfmvs	f7, 2, [r6], {101}	; 0x65
     a6c:	64006761 	strvs	r6, [r0], #-1889	; 0x761
     a70:	5f746e6f 	svcpl	0x00746e6f
     a74:	74696177 	strbtvc	r6, [r9], #-375	; 0x177
     a78:	6f6f6200 	svcvs	0x006f6200
     a7c:	616f6c74 	smcvs	63172	; 0xf6c4
     a80:	5f726564 	svcpl	0x00726564
     a84:	6f666e69 	svcvs	0x00666e69
     a88:	74616d00 	strbtvc	r6, [r1], #-3328	; 0xd00
     a8c:	5f786972 	svcpl	0x00786972
     a90:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xf6d
     a94:	6863006c 	stmdavs	r3!, {r2, r3, r5, r6}^
     a98:	556b6365 	strbpl	r6, [fp, #-869]!	; 0x365
     a9c:	43726573 	cmnmi	r2, #482344960	; 0x1cc00000
     aa0:	0065646f 	rsbeq	r6, r5, pc, ror #8
     aa4:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0x973
     aa8:	65526d65 	ldrbvs	r6, [r2, #-3429]	; 0xd65
     aac:	00746573 	rsbseq	r6, r4, r3, ror r5
     ab0:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
     ab4:	74747542 	ldrbtvc	r7, [r4], #-1346	; 0x542
     ab8:	74536e6f 	ldrbvc	r6, [r3], #-3695	; 0xe6f
     abc:	00657461 	rsbeq	r7, r5, r1, ror #8
     ac0:	75746573 	ldrbvc	r6, [r4, #-1395]!	; 0x573
     ac4:	414c4670 	hvcmi	50272	; 0xc460
     ac8:	73004853 	movwvc	r4, #2131	; 0x853
     acc:	70757465 	rsbsvc	r7, r5, r5, ror #8
     ad0:	004b4c43 	subeq	r4, fp, r3, asr #24
     ad4:	6e69616d 	powvsez	f6, f1, #5.0
     ad8:	6f6f6200 	svcvs	0x006f6200
     adc:	616f6c74 	smcvs	63172	; 0xf6c4
     ae0:	5f726564 	svcpl	0x00726564
     ae4:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
     ae8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     aec:	755f6f6e 	ldrbvc	r6, [pc, #-3950]	; fffffb86 <BootRAM+0xef70327>
     af0:	5f726573 	svcpl	0x00726573
     af4:	706d756a 	rsbvc	r7, sp, sl, ror #10
     af8:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
     afc:	00632e6e 	rsbeq	r2, r3, lr, ror #28
     b00:	7274616d 	rsbsvc	r6, r4, #1073741851	; 0x4000001b
     b04:	765f7869 	ldrbvc	r7, [pc], -r9, ror #16
     b08:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     b0c:	73006e6f 	movwvc	r6, #3695	; 0xe6f
     b10:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0x379
     b14:	7261486d 	rsbvc	r4, r1, #7143424	; 0x6d0000
     b18:	73655264 	cmnvc	r5, #100, 4	; 0x40000006
     b1c:	64007465 	strvs	r7, [r0], #-1125	; 0x465
     b20:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     b24:	756f635f 	strbvc	r6, [pc, #-863]!	; 7cd <__Stack_Size+0x3cd>
     b28:	6400746e 	strvs	r7, [r0], #-1134	; 0x46e
     b2c:	70557566 	subsvc	r7, r5, r6, ror #10
     b30:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xf6c
     b34:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
     b38:	00646574 	rsbeq	r6, r4, r4, ror r5
     b3c:	4d746573 	cfldr64mi	mvdx6, [r4, #-460]!	; 0xfffffe34
     b40:	6e417073 	mcrvs	0, 2, r7, cr1, cr3, {3}
     b44:	6d754a64 	vldmdbvs	r5!, {s9-s108}
     b48:	43490070 	movtmi	r0, #36976	; 0x9070
     b4c:	70005250 	andvc	r5, r0, r0, asr r2
     b50:	41656761 	cmnmi	r5, r1, ror #14
     b54:	00726464 	rsbseq	r6, r2, r4, ror #8
     b58:	73706d74 	cmnvc	r0, #116, 26	; 0x1d00
     b5c:	72006275 	andvc	r6, r0, #1342177287	; 0x50000007
     b60:	61566d77 	cmpvs	r6, r7, ror sp
     b64:	5349006c 	movtpl	r0, #36972	; 0x906c
     b68:	72005250 	andvc	r5, r0, #80, 4
     b6c:	50646165 	rsbpl	r6, r4, r5, ror #2
     b70:	66006e69 	strvs	r6, [r0], -r9, ror #28
     b74:	6873616c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sp, lr}^
     b78:	73617245 	cmnvc	r1, #1342177284	; 0x50000004
     b7c:	67615065 	strbvs	r5, [r1, -r5, rrx]!
     b80:	72007365 	andvc	r7, r0, #-1811939327	; 0x94000001
     b84:	00657461 	rsbeq	r7, r5, r1, ror #8
     b88:	6f727473 	svcvs	0x00727473
     b8c:	69506562 	ldmdbvs	r0, {r1, r5, r6, r8, sl, sp, lr}^
     b90:	6461006e 	strbtvs	r0, [r1], #-110	; 0x6e
     b94:	52007264 	andpl	r7, r0, #100, 4	; 0x40000006
     b98:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     b9c:	31444556 	cmpcc	r4, r6, asr r5
     ba0:	45520030 	ldrbmi	r0, [r2, #-48]	; 0x30
     ba4:	56524553 			; <UNDEFINED> instruction: 0x56524553
     ba8:	31314445 	teqcc	r1, r5, asr #8
     bac:	706d7400 	rsbvc	r7, sp, r0, lsl #8
     bb0:	00676572 	rsbeq	r6, r7, r2, ror r5
     bb4:	74617473 	strbtvc	r7, [r1], #-1139	; 0x473
     bb8:	50410065 	subpl	r0, r1, r5, rrx
     bbc:	53523242 	cmppl	r2, #536870916	; 0x20000004
     bc0:	74005254 	strvc	r5, [r0], #-596	; 0x254
     bc4:	7270706d 	rsbsvc	r7, r0, #109	; 0x6d
     bc8:	6c660065 	stclvs	0, cr0, [r6], #-404	; 0xfffffe6c
     bcc:	55687361 	strbpl	r7, [r8, #-865]!	; 0x361
     bd0:	636f6c6e 	cmnvs	pc, #28160	; 0x6e00
     bd4:	6567006b 	strbvs	r0, [r7, #-107]!	; 0x6b
     bd8:	616c4674 	smcvs	50276	; 0xc464
     bdc:	6e456873 	mcrvs	8, 2, r6, cr5, cr3, {3}
     be0:	46420064 	strbmi	r0, [r2], -r4, rrx
     be4:	72005241 	andvc	r5, r0, #268435460	; 0x10000004
     be8:	4349564e 	movtmi	r5, #38478	; 0x964e
     bec:	69766e00 	ldmdbvs	r6!, {r9, sl, fp, sp, lr}^
     bf0:	73694463 	cmnvc	r9, #1660944384	; 0x63000000
     bf4:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
     bf8:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
     bfc:	70757272 	rsbsvc	r7, r5, r2, ror r2
     c00:	76007374 			; <UNDEFINED> instruction: 0x76007374
     c04:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xc61
     c08:	4f545600 	svcmi	0x00545600
     c0c:	756a0052 	strbvc	r0, [sl, #-82]!	; 0x52
     c10:	6441706d 	strbvs	r7, [r1], #-109	; 0x6d
     c14:	52007264 	andpl	r7, r0, #100, 4	; 0x40000006
     c18:	525f4343 	subspl	r4, pc, #201326593	; 0xc000001
     c1c:	74536765 	ldrbvc	r6, [r3], #-1893	; 0x765
     c20:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
     c24:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     c28:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
     c2c:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
     c30:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
     c34:	53434900 	movtpl	r4, #14592	; 0x3900
     c38:	6d740052 	ldclvs	0, cr0, [r4, #-328]!	; 0xfffffeb8
     c3c:	73616d70 	cmnvc	r1, #112, 26	; 0x1c00
     c40:	4841006b 	stmdami	r1, {r0, r1, r3, r5, r6}^
     c44:	524e4542 	subpl	r4, lr, #276824064	; 0x10800000
     c48:	52494100 	subpl	r4, r9, #0, 2
     c4c:	4d005243 	sfmmi	f5, 4, [r0, #-268]	; 0xfffffef4
     c50:	5241464d 	subpl	r4, r1, #80740352	; 0x4d00000
     c54:	57686c00 	strbpl	r6, [r8, -r0, lsl #24]!
     c58:	0064726f 	rsbeq	r7, r4, pc, ror #4
     c5c:	73616c66 	cmnvc	r1, #26112	; 0x6600
     c60:	636f4c68 	cmnvs	pc, #104, 24	; 0x6800
     c64:	7770006b 	ldrbvc	r0, [r0, -fp, rrx]!
     c68:	65725f72 	ldrbvs	r5, [r2, #-3954]!	; 0xf72
     c6c:	616d5f67 	cmnvs	sp, r7, ror #30
     c70:	46430070 			; <UNDEFINED> instruction: 0x46430070
     c74:	49005253 	stmdbmi	r0, {r0, r1, r4, r6, r9, ip, lr}
     c78:	00524241 	subseq	r4, r2, r1, asr #4
     c7c:	64726f77 	ldrbtvs	r6, [r2], #-3959	; 0xf77
     c80:	45434900 	strbmi	r4, [r3, #-2304]	; 0x900
     c84:	50410052 	subpl	r0, r1, r2, asr r0
     c88:	53523142 	cmppl	r2, #-2147483632	; 0x80000010
     c8c:	62005254 	andvs	r5, r0, #84, 4	; 0x40000005
     c90:	725f706b 	subsvc	r7, pc, #107	; 0x6b
     c94:	6d5f6765 	ldclvs	7, cr6, [pc, #-404]	; b08 <__Stack_Size+0x708>
     c98:	43007061 	movwmi	r7, #97	; 0x61
     c9c:	44495550 	strbmi	r5, [r9], #-1360	; 0x550
     ca0:	43537200 	cmpmi	r3, #0, 4
     ca4:	45520042 	ldrbmi	r0, [r2, #-66]	; 0x42
     ca8:	56524553 			; <UNDEFINED> instruction: 0x56524553
     cac:	00304445 	eorseq	r4, r0, r5, asr #8
     cb0:	52534644 	subspl	r4, r3, #68, 12	; 0x4400000
     cb4:	53455200 	movtpl	r5, #20992	; 0x5200
     cb8:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     cbc:	52003244 	andpl	r3, r0, #68, 4	; 0x40000004
     cc0:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     cc4:	33444556 	movtcc	r4, #17750	; 0x4556
     cc8:	53455200 	movtpl	r5, #20992	; 0x5200
     ccc:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     cd0:	52003444 	andpl	r3, r0, #68, 8	; 0x44000000
     cd4:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     cd8:	35444556 	strbcc	r4, [r4, #-1366]	; 0x556
     cdc:	53455200 	movtpl	r5, #20992	; 0x5200
     ce0:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     ce4:	52003644 	andpl	r3, r0, #68, 12	; 0x4400000
     ce8:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     cec:	37444556 	smlsldcc	r4, r4, r6, r5	; <UNPREDICTABLE>
     cf0:	43485300 	movtmi	r5, #33536	; 0x8300
     cf4:	49005253 	stmdbmi	r0, {r0, r1, r4, r6, r9, ip, lr}
     cf8:	00524553 	subseq	r4, r2, r3, asr r5
     cfc:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
     d00:	43705574 	cmnmi	r0, #116, 10	; 0x1d000000
     d04:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
     d08:	44007265 	strmi	r7, [r0], #-613	; 0x265
     d0c:	00303152 	eorseq	r3, r0, r2, asr r1
     d10:	32425041 	subcc	r5, r2, #65	; 0x41
     d14:	00524e45 	subseq	r4, r2, r5, asr #28
     d18:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
     d1c:	00746553 	rsbseq	r6, r4, r3, asr r5
     d20:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     d24:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     d28:	73750031 	cmnvc	r5, #49	; 0x31
     d2c:	69614d72 	stmdbvs	r1!, {r1, r4, r5, r6, r8, sl, fp, lr}^
     d30:	4641006e 	strbmi	r0, [r1], -lr, rrx
     d34:	52005253 	andpl	r5, r0, #805306373	; 0x30000005
     d38:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     d3c:	39444556 	stmdbcc	r4, {r1, r2, r4, r6, r8, sl, lr}^
     d40:	72616800 	rsbvc	r6, r1, #0, 16
     d44:	72617764 	rsbvc	r7, r1, #100, 14	; 0x1900000
     d48:	00632e65 	rsbeq	r2, r3, r5, ror #28
     d4c:	4349564e 	movtmi	r5, #38478	; 0x964e
     d50:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     d54:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     d58:	42504100 	subsmi	r4, r0, #0, 2
     d5c:	524e4531 	subpl	r4, lr, #205520896	; 0xc400000
     d60:	616c6600 	cmnvs	ip, r0, lsl #12
     d64:	72576873 	subsvc	r6, r7, #7536640	; 0x730000
     d68:	57657469 	strbpl	r7, [r5, -r9, ror #8]!
     d6c:	0064726f 	rsbeq	r7, r4, pc, ror #4
     d70:	73616c66 	cmnvc	r1, #26112	; 0x6600
     d74:	7a695368 	bvc	1a55b1c <__Stack_Size+0x1a5571c>
     d78:	48530065 	ldmdami	r3, {r0, r2, r5, r6}^
     d7c:	52005250 	andpl	r5, r0, #80, 4
     d80:	52434354 	subpl	r4, r3, #84, 6	; 0x50000001
     d84:	6e616200 	cdpvs	2, 6, cr6, cr1, cr0, {0}
     d88:	6c66006b 	stclvs	0, cr0, [r6], #-428	; 0xfffffe54
     d8c:	41687361 	cmnmi	r8, r1, ror #6
     d90:	00726464 	rsbseq	r6, r2, r4, ror #8
     d94:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
     d98:	00727450 	rsbseq	r7, r2, r0, asr r4
     d9c:	41727375 	cmnmi	r2, r5, ror r3
     da0:	00726464 	rsbseq	r6, r2, r4, ror #8
     da4:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     da8:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     dac:	6c660038 	stclvs	0, cr0, [r6], #-224	; 0xffffff20
     db0:	45687361 	strbmi	r7, [r8, #-865]!	; 0x361
     db4:	65736172 	ldrbvs	r6, [r3, #-370]!	; 0x172
     db8:	65676150 	strbvs	r6, [r7, #-336]!	; 0x150
     dbc:	706b6200 	rsbvc	r6, fp, r0, lsl #4
     dc0:	72573031 	subsvc	r3, r7, #49	; 0x31
     dc4:	00657469 	rsbeq	r7, r5, r9, ror #8
     dc8:	52434442 	subpl	r4, r3, #1107296256	; 0x42000000
     dcc:	706d7400 	rsbvc	r7, sp, r0, lsl #8
     dd0:	6f697270 	svcvs	0x00697270
     dd4:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     dd8:	57686800 	strbpl	r6, [r8, -r0, lsl #16]!
     ddc:	0064726f 	rsbeq	r7, r4, pc, ror #4
     de0:	52455352 	subpl	r5, r5, #1207959553	; 0x48000001
     de4:	31444556 	cmpcc	r4, r6, asr r5
     de8:	47464300 	strbmi	r4, [r6, -r0, lsl #6]
     dec:	75760052 	ldrbvc	r0, [r6, #-82]!	; 0x52
     df0:	00323363 	eorseq	r3, r2, r3, ror #6
     df4:	5f424353 	svcpl	0x00424353
     df8:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     dfc:	00666544 	rsbeq	r6, r6, r4, asr #10
     e00:	52534648 	subspl	r4, r3, #72, 12	; 0x4800000
     e04:	74536900 	ldrbvc	r6, [r3], #-2304	; 0x900
     e08:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
     e0c:	63657200 	cmnvs	r5, #0, 4
     e10:	66754276 			; <UNDEFINED> instruction: 0x66754276
     e14:	00726566 	rsbseq	r6, r2, r6, ror #10
     e18:	2e756664 	cdpcs	6, 7, cr6, cr5, cr4, {3}
     e1c:	505f0063 	subspl	r0, pc, r3, rrx
     e20:	00544f4c 	subseq	r4, r4, ip, asr #30
     e24:	5f554644 	svcpl	0x00554644
     e28:	4f4c5055 	svcmi	0x004c5055
     e2c:	465f4441 	ldrbmi	r4, [pc], -r1, asr #8
     e30:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
     e34:	46445f00 	strbmi	r5, [r4], -r0, lsl #30
     e38:	61745355 	cmnvs	r4, r5, asr r3
     e3c:	00737574 	rsbseq	r7, r3, r4, ror r5
     e40:	72657375 	rsbvc	r7, r5, #-738197503	; 0xd4000001
     e44:	41707041 	cmnmi	r0, r1, asr #32
     e48:	00726464 	rsbseq	r6, r2, r4, ror #8
     e4c:	6f507762 	svcvs	0x00507762
     e50:	69546c6c 	ldmdbvs	r4, {r2, r3, r5, r6, sl, fp, sp, lr}^
     e54:	756f656d 	strbvc	r6, [pc, #-1389]!	; 8ef <__Stack_Size+0x4ef>
     e58:	62003074 	andvs	r3, r0, #116	; 0x74
     e5c:	6c6f5077 	stclvs	0, cr5, [pc], #-476	; c88 <__Stack_Size+0x888>
     e60:	6d69546c 	cfstrdvs	mvd5, [r9, #-432]!	; 0xfffffe50
     e64:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xf65
     e68:	77620031 			; <UNDEFINED> instruction: 0x77620031
     e6c:	6c6c6f50 	stclvs	15, cr6, [ip], #-320	; 0xfffffec0
     e70:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
     e74:	3274756f 	rsbscc	r7, r4, #465567744	; 0x1bc00000
     e78:	55464400 	strbpl	r4, [r6, #-1024]	; 0x400
     e7c:	4c50555f 	cfldr64mi	mvdx5, [r0], {95}	; 0x5f
     e80:	5f44414f 	svcpl	0x0044414f
     e84:	454e4f4e 	strbmi	r4, [lr, #-3918]	; 0xf4e
     e88:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
     e8c:	79706f43 	ldmdbvc	r0!, {r0, r1, r6, r8, r9, sl, fp, sp, lr}^
     e90:	4f4c5055 	svcmi	0x004c5055
     e94:	75004441 	strvc	r4, [r0, #-1089]	; 0x441
     e98:	55726573 	ldrbpl	r6, [r2, #-1395]!	; 0x573
     e9c:	616f6c70 	smcvs	63168	; 0xf6c0
     ea0:	70795464 	rsbsvc	r5, r9, r4, ror #8
     ea4:	66640065 	strbtvs	r0, [r4], -r5, rrx
     ea8:	706f4375 	rsbvc	r4, pc, r5, ror r3	; <UNPREDICTABLE>
     eac:	66754279 			; <UNDEFINED> instruction: 0x66754279
     eb0:	54726566 	ldrbtpl	r6, [r2], #-1382	; 0x566
     eb4:	6578456f 	ldrbvs	r4, [r8, #-1391]!	; 0x56f
     eb8:	66640063 	strbtvs	r0, [r4], -r3, rrx
     ebc:	706f4375 	rsbvc	r4, pc, r5, ror r3	; <UNPREDICTABLE>
     ec0:	61745379 	cmnvs	r4, r9, ror r3
     ec4:	00737574 	rsbseq	r7, r3, r4, ror r5
     ec8:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xf63
     ecc:	706f635f 	rsbvc	r6, pc, pc, asr r3	; <UNPREDICTABLE>
     ed0:	6f6c5f79 	svcvs	0x006c5f79
     ed4:	64006b63 	strvs	r6, [r0], #-2915	; 0xb63
     ed8:	6f437566 	svcvs	0x00437566
     edc:	74537970 	ldrbvc	r7, [r3], #-2416	; 0x970
     ee0:	00657461 	rsbeq	r7, r5, r1, ror #8
     ee4:	43756664 	cmnmi	r5, #100, 12	; 0x6400000
     ee8:	4479706f 	ldrbtmi	r7, [r9], #-111	; 0x6f
     eec:	414f4c4e 	cmpmi	pc, lr, asr #24
     ef0:	66640044 	strbtvs	r0, [r4], -r4, asr #32
     ef4:	64705575 	ldrbtvs	r5, [r0], #-1397	; 0x575
     ef8:	42657461 	rsbmi	r7, r5, #1627389952	; 0x61000000
     efc:	6d695479 	cfstrdvs	mvd5, [r9, #-484]!	; 0xfffffe1c
     f00:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xf65
     f04:	77656e00 	strbvc	r6, [r5, -r0, lsl #28]!
     f08:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     f0c:	66640065 	strbtvs	r0, [r4], -r5, rrx
     f10:	6c705575 	cfldr64vs	mvdx5, [r0], #-468	; 0xfffffe2c
     f14:	5464616f 	strbtpl	r6, [r4], #-367	; 0x16f
     f18:	73657079 	cmnvc	r5, #121	; 0x79
     f1c:	6400745f 	strvs	r7, [r0], #-1119	; 0x45f
     f20:	70417566 	subvc	r7, r1, r6, ror #10
     f24:	61745370 	cmnvs	r4, r0, ror r3
     f28:	00737574 	rsbseq	r7, r3, r4, ror r5
     f2c:	6f6c7075 	svcvs	0x006c7075
     f30:	6c426461 	cfstrdvs	mvd6, [r2], {97}	; 0x61
     f34:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
     f38:	74006e65 	strvc	r6, [r0], #-3685	; 0xe65
     f3c:	42736968 	rsbsmi	r6, r3, #104, 18	; 0x1a0000
     f40:	6b636f6c 	blvs	18dccf8 <__Stack_Size+0x18dc8f8>
     f44:	006e654c 	rsbeq	r6, lr, ip, asr #10
     f48:	72657375 	rsbvc	r7, r5, #-738197503	; 0xd4000001
     f4c:	6d726946 	ldclvs	9, cr6, [r2, #-280]!	; 0xfffffee8
     f50:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0x177
     f54:	006e654c 	rsbeq	r6, lr, ip, asr #10
     f58:	42756664 	rsbsmi	r6, r5, #100, 12	; 0x6400000
     f5c:	00797375 	rsbseq	r7, r9, r5, ror r3
     f60:	61745362 	cmnvs	r4, r2, ror #6
     f64:	6c006574 	cfstr32vs	mvfx6, [r0], {116}	; 0x74
     f68:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xe65
     f6c:	74730068 	ldrbtvc	r0, [r3], #-104	; 0x68
     f70:	53747261 	cmnpl	r4, #268435462	; 0x10000006
     f74:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
     f78:	47454200 	strbmi	r4, [r5, -r0, lsl #4]
     f7c:	494e4e49 	stmdbmi	lr, {r0, r3, r6, r9, sl, fp, lr}^
     f80:	7500474e 	strvc	r4, [r0, #-1870]	; 0x74e
     f84:	53726573 	cmnpl	r2, #482344960	; 0x1cc00000
     f88:	65636170 	strbvs	r6, [r3, #-368]!	; 0x170
     f8c:	65737500 	ldrbvs	r7, [r3, #-1280]!	; 0x500
     f90:	70704172 	rsbsvc	r4, r0, r2, ror r1
     f94:	00646e45 	rsbeq	r6, r4, r5, asr #28
     f98:	61745362 	cmnvs	r4, r2, ror #6
     f9c:	00737574 	rsbseq	r7, r3, r4, ror r5
     fa0:	53756664 	cmnpl	r5, #100, 12	; 0x6400000
     fa4:	74537465 	ldrbvc	r7, [r3], #-1125	; 0x465
     fa8:	00657461 	rsbeq	r7, r5, r1, ror #8
     fac:	4444494d 	strbmi	r4, [r4], #-2381	; 0x94d
     fb0:	6400454c 	strvs	r4, [r0], #-1356	; 0x54c
     fb4:	65477566 	strbvs	r7, [r7, #-1382]	; 0x566
     fb8:	61745374 	cmnvs	r4, r4, ror r3
     fbc:	46006574 			; <UNDEFINED> instruction: 0x46006574
     fc0:	55656572 	strbpl	r6, [r5, #-1394]!	; 0x572
     fc4:	42726573 	rsbsmi	r6, r2, #482344960	; 0x1cc00000
     fc8:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
     fcc:	65470072 	strbvs	r0, [r7, #-114]	; 0x72
     fd0:	53785474 	cmnpl	r8, #116, 8	; 0x74000000
     fd4:	6c6c6174 	stfvse	f6, [ip], #-464	; 0xfffffe30
     fd8:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     fdc:	53007375 	movwpl	r7, #885	; 0x375
     fe0:	50457465 	subpl	r7, r5, r5, ror #8
     fe4:	426c6244 	rsbmi	r6, ip, #68, 4	; 0x40000004
     fe8:	41316675 	teqmi	r1, r5, ror r6
     fec:	00726464 	rsbseq	r6, r2, r4, ror #8
     ff0:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
     ff4:	56785450 			; <UNDEFINED> instruction: 0x56785450
     ff8:	64696c61 	strbtvs	r6, [r9], #-3169	; 0xc61
     ffc:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    1000:	42756f44 	rsbsmi	r6, r5, #68, 30	; 0x110
    1004:	7542656c 	strbvc	r6, [r2, #-1388]	; 0x56c
    1008:	50456666 	subpl	r6, r5, r6, ror #12
    100c:	6c617453 	cfstrdvs	mvd7, [r1], #-332	; 0xfffffeb4
    1010:	5045006c 	subpl	r0, r5, ip, rrx
    1014:	5542445f 	strbpl	r4, [r2, #-1119]	; 0x45f
    1018:	554f5f46 	strbpl	r5, [pc, #-3910]	; da <_Minimum_Stack_Size-0x26>
    101c:	65470054 	strbvs	r0, [r7, #-84]	; 0x54
    1020:	52504574 	subspl	r4, r0, #116, 10	; 0x1d000000
    1024:	61745378 	cmnvs	r4, r8, ror r3
    1028:	00737574 	rsbseq	r7, r3, r4, ror r5
    102c:	67676f54 			; <UNDEFINED> instruction: 0x67676f54
    1030:	5444656c 	strbpl	r6, [r4], #-1388	; 0x56c
    1034:	545f474f 	ldrbpl	r4, [pc], #-1871	; 103c <__Stack_Size+0xc3c>
    1038:	65470058 	strbvs	r0, [r7, #-88]	; 0x58
    103c:	41504574 	cmpmi	r0, r4, ror r5
    1040:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0x464
    1044:	5f007373 	svcpl	0x00007373
    1048:	445f5045 	ldrbmi	r5, [pc], #-69	; 1050 <__Stack_Size+0xc50>
    104c:	5f465542 	svcpl	0x00465542
    1050:	00524944 	subseq	r4, r2, r4, asr #18
    1054:	64644162 	strbtvs	r4, [r4], #-354	; 0x162
    1058:	65530072 	ldrbvs	r0, [r3, #-114]	; 0x72
    105c:	54534974 	ldrbpl	r4, [r3], #-2420	; 0x974
    1060:	4e770052 	mrcmi	0, 3, r0, cr7, cr2, {2}
    1064:	636f6c42 	cmnvs	pc, #16896	; 0x4200
    1068:	4300736b 	movwmi	r7, #875	; 0x36b
    106c:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    1070:	474f5444 	strbmi	r5, [pc, -r4, asr #8]
    1074:	0058525f 	subseq	r5, r8, pc, asr r2
    1078:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    107c:	0052544e 	subseq	r5, r2, lr, asr #8
    1080:	52746547 	rsbspl	r6, r4, #297795584	; 0x11c00000
    1084:	61745378 	cmnvs	r4, r8, ror r3
    1088:	74536c6c 	ldrbvc	r6, [r3], #-3180	; 0xc6c
    108c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1090:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    1094:	44444144 	strbmi	r4, [r4], #-324	; 0x144
    1098:	43770052 	cmnmi	r7, #82	; 0x52
    109c:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    10a0:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    10a4:	64415045 	strbvs	r5, [r1], #-69	; 0x45
    10a8:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    10ac:	65530073 	ldrbvs	r0, [r3, #-115]	; 0x73
    10b0:	52504574 	subspl	r4, r0, #116, 10	; 0x1d000000
    10b4:	61745378 	cmnvs	r4, r8, ror r3
    10b8:	00737574 	rsbseq	r7, r3, r4, ror r5
    10bc:	67676f54 			; <UNDEFINED> instruction: 0x67676f54
    10c0:	5444656c 	strbpl	r6, [r4], #-1388	; 0x56c
    10c4:	525f474f 	subspl	r4, pc, #20709376	; 0x13c0000
    10c8:	65530058 	ldrbvs	r0, [r3, #-88]	; 0x58
    10cc:	44504574 	ldrbmi	r4, [r0], #-1396	; 0x574
    10d0:	75426c62 	strbvc	r6, [r2, #-3170]	; 0xc62
    10d4:	64416666 	strbvs	r6, [r1], #-1638	; 0x666
    10d8:	53007264 	movwpl	r7, #612	; 0x264
    10dc:	50457465 	subpl	r7, r5, r5, ror #8
    10e0:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    10e4:	5f504500 	svcpl	0x00504500
    10e8:	46554244 	ldrbmi	r4, [r5], -r4, asr #4
    10ec:	004e495f 	subeq	r4, lr, pc, asr r9
    10f0:	74655277 	strbtvc	r5, [r5], #-631	; 0x277
    10f4:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    10f8:	78525045 	ldmdavc	r2, {r0, r2, r6, ip, lr}^
    10fc:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1100:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    1104:	62445045 	subvs	r5, r4, #69	; 0x45
    1108:	6675426c 	ldrbtvs	r4, [r5], -ip, ror #4
    110c:	64644130 	strbtvs	r4, [r4], #-304	; 0x130
    1110:	65470072 	strbvs	r0, [r7, #-114]	; 0x72
    1114:	54504574 	ldrbpl	r4, [r0], #-1396	; 0x574
    1118:	61745378 	cmnvs	r4, r8, ror r3
    111c:	00737574 	rsbseq	r7, r3, r4, ror r5
    1120:	72694462 	rsbvc	r4, r9, #1644167168	; 0x62000000
    1124:	79547700 	ldmdbvc	r4, {r8, r9, sl, ip, sp, lr}^
    1128:	75006570 	strvc	r6, [r0, #-1392]	; 0x570
    112c:	6c5f6273 	lfmvs	f6, 2, [pc], {115}	; 0x73
    1130:	752f6269 	strvc	r6, [pc, #-617]!	; ecf <__Stack_Size+0xacf>
    1134:	725f6273 	subsvc	r6, pc, #805306375	; 0x30000007
    1138:	2e736765 	cdpcs	7, 7, cr6, cr3, cr5, {3}
    113c:	50450063 	subpl	r0, r5, r3, rrx
    1140:	5542445f 	strbpl	r4, [r2, #-1119]	; 0x45f
    1144:	52455f46 	subpl	r5, r5, #280	; 0x118
    1148:	65470052 	strbvs	r0, [r7, #-82]	; 0x52
    114c:	44504574 	ldrbmi	r4, [r0], #-1396	; 0x574
    1150:	75426c62 	strbvc	r6, [r2, #-3170]	; 0xc62
    1154:	72694466 	rsbvc	r4, r9, #1711276032	; 0x66000000
    1158:	75427700 	strbvc	r7, [r2, #-1792]	; 0x700
    115c:	64413166 	strbvs	r3, [r1], #-358	; 0x166
    1160:	77007264 	strvc	r7, [r0, -r4, ror #4]
    1164:	00577753 	subseq	r7, r7, r3, asr r7
    1168:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
    116c:	756f4450 	strbvc	r4, [pc, #-1104]!	; d24 <__Stack_Size+0x924>
    1170:	42656c62 	rsbmi	r6, r5, #25088	; 0x6200
    1174:	00666675 	rsbeq	r6, r6, r5, ror r6
    1178:	6f576f54 	svcvs	0x00576f54
    117c:	53006472 	movwpl	r6, #1138	; 0x472
    1180:	50457465 	subpl	r7, r5, r5, ror #8
    1184:	64417854 	strbvs	r7, [r1], #-2132	; 0x854
    1188:	43007264 	movwmi	r7, #612	; 0x264
    118c:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    1190:	6f445045 	svcvs	0x00445045
    1194:	656c6275 	strbvs	r6, [ip, #-629]!	; 0x275
    1198:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    119c:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    11a0:	62445045 	subvs	r5, r4, #69	; 0x45
    11a4:	6675426c 	ldrbtvs	r4, [r5], -ip, ror #4
    11a8:	64644131 	strbtvs	r4, [r4], #-305	; 0x131
    11ac:	65470072 	strbvs	r0, [r7, #-114]	; 0x72
    11b0:	54504574 	ldrbpl	r4, [r0], #-1396	; 0x574
    11b4:	00657079 	rsbeq	r7, r5, r9, ror r0
    11b8:	61656c43 	cmnvs	r5, r3, asr #24
    11bc:	5f504572 	svcpl	0x00504572
    11c0:	5f525443 	svcpl	0x00525443
    11c4:	53005852 	movwpl	r5, #2130	; 0x852
    11c8:	50457465 	subpl	r7, r5, r5, ror #8
    11cc:	426c6244 	rsbmi	r6, ip, #68, 4	; 0x40000004
    11d0:	43666675 	cmnmi	r6, #122683392	; 0x7500000
    11d4:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    11d8:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    11dc:	4b5f5045 	blmi	17d52f8 <__Stack_Size+0x17d4ef8>
    11e0:	00444e49 	subeq	r4, r4, r9, asr #28
    11e4:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
    11e8:	43785450 	cmnmi	r8, #80, 8	; 0x50000000
    11ec:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    11f0:	656c4300 	strbvs	r4, [ip, #-768]!	; 0x300
    11f4:	50457261 	subpl	r7, r5, r1, ror #4
    11f8:	4e494b5f 	vmovmi.8	d9[2], r4
    11fc:	65470044 	strbvs	r0, [r7, #-68]	; 0x44
    1200:	41544274 	cmpmi	r4, r4, ror r2
    1204:	00454c42 	subeq	r4, r5, r2, asr #24
    1208:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
    120c:	00525453 	subseq	r5, r2, r3, asr r4
    1210:	67655277 			; <UNDEFINED> instruction: 0x67655277
    1214:	756c6156 	strbvc	r6, [ip, #-342]!	; 0x156
    1218:	65470065 	strbvs	r0, [r7, #-101]	; 0x65
    121c:	444e4574 	strbmi	r4, [lr], #-1396	; 0x574
    1220:	4e494f50 	mcrmi	15, 2, r4, cr9, cr0, {2}
    1224:	41770054 	cmnmi	r7, r4, asr r0
    1228:	00726464 	rsbseq	r6, r2, r4, ror #8
    122c:	45746547 	ldrbmi	r6, [r4, #-1351]!	; 0x547
    1230:	6c624450 	cfstrdvs	mvd4, [r2], #-320	; 0xfffffec0
    1234:	30667542 	rsbcc	r7, r6, r2, asr #10
    1238:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    123c:	65530074 	ldrbvs	r0, [r3, #-116]	; 0x74
    1240:	44414474 	strbmi	r4, [r1], #-1140	; 0x474
    1244:	70005244 	andvc	r5, r0, r4, asr #4
    1248:	65527764 	ldrbvs	r7, [r2, #-1892]	; 0x764
    124c:	79420067 	stmdbvc	r2, {r0, r1, r2, r5, r6}^
    1250:	77536574 			; <UNDEFINED> instruction: 0x77536574
    1254:	53007061 	movwpl	r7, #97	; 0x61
    1258:	50457465 	subpl	r7, r5, r5, ror #8
    125c:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    1260:	52785274 	rsbspl	r5, r8, #116, 4	; 0x40000007
    1264:	47006765 	strmi	r6, [r0, -r5, ror #14]
    1268:	50457465 	subpl	r7, r5, r5, ror #8
    126c:	6f437852 	svcvs	0x00437852
    1270:	00746e75 	rsbseq	r6, r4, r5, ror lr
    1274:	6d655462 	cfstrdvs	mvd5, [r5, #-392]!	; 0xfffffe78
    1278:	65530070 	ldrbvs	r0, [r3, #-112]	; 0x70
    127c:	544e4374 	strbpl	r4, [lr], #-884	; 0x374
    1280:	65530052 	ldrbvs	r0, [r3, #-82]	; 0x52
    1284:	41544274 	cmpmi	r4, r4, ror r2
    1288:	00454c42 	subeq	r4, r5, r2, asr #24
    128c:	45746547 	ldrbmi	r6, [r4, #-1351]!	; 0x547
    1290:	43785450 	cmnmi	r8, #80, 8	; 0x50000000
    1294:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    1298:	656c4300 	strbvs	r4, [ip, #-768]!	; 0x300
    129c:	50457261 	subpl	r7, r5, r1, ror #4
    12a0:	5254435f 	subspl	r4, r4, #2080374785	; 0x7c000001
    12a4:	0058545f 	subseq	r5, r8, pc, asr r4
    12a8:	45746547 	ldrbmi	r6, [r4, #-1351]!	; 0x547
    12ac:	6c624450 	cfstrdvs	mvd4, [r2], #-320	; 0xfffffec0
    12b0:	31667542 	cmncc	r6, r2, asr #10
    12b4:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    12b8:	65530074 	ldrbvs	r0, [r3, #-116]	; 0x74
    12bc:	44504574 	ldrbmi	r4, [r0], #-1396	; 0x574
    12c0:	75426c62 	strbvc	r6, [r2, #-3170]	; 0xc62
    12c4:	6f433066 	svcvs	0x00433066
    12c8:	00746e75 	rsbseq	r6, r4, r5, ror lr
    12cc:	66754277 			; <UNDEFINED> instruction: 0x66754277
    12d0:	64644130 	strbtvs	r4, [r4], #-304	; 0x130
    12d4:	65530072 	ldrbvs	r0, [r3, #-114]	; 0x72
    12d8:	74535f74 	ldrbvc	r5, [r3], #-3956	; 0xf74
    12dc:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    12e0:	74754f5f 	ldrbtvc	r4, [r5], #-3935	; 0xf5f
    12e4:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    12e8:	00524e46 	subseq	r4, r2, r6, asr #28
    12ec:	45746547 	ldrbmi	r6, [r4, #-1351]!	; 0x547
    12f0:	6c624450 	cfstrdvs	mvd4, [r2], #-320	; 0xfffffec0
    12f4:	30667542 	rsbcc	r7, r6, r2, asr #10
    12f8:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    12fc:	646e4500 	strbtvs	r4, [lr], #-1280	; 0x500
    1300:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
    1304:	54445f74 	strbpl	r5, [r4], #-3956	; 0xf74
    1308:	535f474f 	cmppl	pc, #20709376	; 0x13c0000
    130c:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    1310:	65470073 	strbvs	r0, [r7, #-115]	; 0x73
    1314:	54504574 	ldrbpl	r4, [r0], #-1396	; 0x574
    1318:	64644178 	strbtvs	r4, [r4], #-376	; 0x178
    131c:	6c430072 	mcrrvs	0, 7, r0, r3, cr2
    1320:	44726165 	ldrbtmi	r6, [r2], #-357	; 0x165
    1324:	5f474f54 	svcpl	0x00474f54
    1328:	53005854 	movwpl	r5, #2132	; 0x854
    132c:	50457465 	subpl	r7, r5, r5, ror #8
    1330:	74537854 	ldrbvc	r7, [r3], #-2132	; 0x854
    1334:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1338:	70456200 	subvc	r6, r5, r0, lsl #4
    133c:	006d754e 	rsbeq	r7, sp, lr, asr #10
    1340:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
    1344:	4f50444e 	svcmi	0x0050444e
    1348:	00544e49 	subseq	r4, r4, r9, asr #28
    134c:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
    1350:	41785250 	cmnmi	r8, r0, asr r2
    1354:	00726464 	rsbseq	r6, r2, r4, ror #8
    1358:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
    135c:	6c624450 	cfstrdvs	mvd4, [r2], #-320	; 0xfffffec0
    1360:	31667542 	cmncc	r6, r2, asr #10
    1364:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    1368:	54430074 	strbpl	r0, [r3], #-116	; 0x74
    136c:	50485f52 	subpl	r5, r8, r2, asr pc
    1370:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    1374:	5f307075 	svcpl	0x00307075
    1378:	636f7250 	cmnvs	pc, #80, 4
    137c:	00737365 	rsbseq	r7, r3, r5, ror #6
    1380:	65766153 	ldrbvs	r6, [r6, #-339]!	; 0x153
    1384:	61745352 	cmnvs	r4, r2, asr r3
    1388:	53006574 	movwpl	r6, #1396	; 0x574
    138c:	54657661 	strbtpl	r7, [r5], #-1633	; 0x661
    1390:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    1394:	45770065 	ldrbmi	r0, [r7, #-101]!	; 0x65
    1398:	6c615650 	stclvs	6, cr5, [r1], #-320	; 0xfffffec0
    139c:	62737500 	rsbsvs	r7, r3, #0, 10
    13a0:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    13a4:	6273752f 	rsbsvs	r7, r3, #197132288	; 0xbc00000
    13a8:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
    13ac:	4900632e 	stmdbmi	r0, {r1, r2, r3, r5, r8, r9, sp, lr}
    13b0:	505f306e 	subspl	r3, pc, lr, rrx
    13b4:	65636f72 	strbvs	r6, [r3, #-3954]!	; 0xf72
    13b8:	4f007373 	svcmi	0x00007373
    13bc:	5f307475 	svcpl	0x00307475
    13c0:	636f7250 	cmnvs	pc, #80, 4
    13c4:	00737365 	rsbseq	r7, r3, r5, ror #6
    13c8:	6e695045 	cdpvs	0, 6, cr5, cr9, cr5, {2}
    13cc:	00786564 	rsbseq	r6, r8, r4, ror #10
    13d0:	65766153 	ldrbvs	r6, [r6, #-339]!	; 0x153
    13d4:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    13d8:	73750065 	cmnvc	r5, #101	; 0x65
    13dc:	696c5f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    13e0:	73752f62 	cmnvc	r5, #392	; 0x188
    13e4:	6e695f62 	cdpvs	15, 6, cr5, cr9, cr2, {3}
    13e8:	632e7469 	teqvs	lr, #1761607680	; 0x69000000
    13ec:	73557000 	cmpvc	r5, #0
    13f0:	535f7265 	cmppl	pc, #1342177286	; 0x50000006
    13f4:	646e6174 	strbtvs	r6, [lr], #-372	; 0x174
    13f8:	5f647261 	svcpl	0x00647261
    13fc:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0x552
    1400:	73747365 	cmnvc	r4, #-1811939327	; 0x94000001
    1404:	76654400 	strbtvc	r4, [r5], -r0, lsl #8
    1408:	5f656369 	svcpl	0x00656369
    140c:	6f666e49 	svcvs	0x00666e49
    1410:	62737500 	rsbsvs	r7, r3, #0, 10
    1414:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    1418:	6273752f 	rsbsvs	r7, r3, #197132288	; 0xbc00000
    141c:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    1420:	00632e65 	rsbeq	r2, r3, r5, ror #28
    1424:	50444e45 	subpl	r4, r4, r5, asr #28
    1428:	544e494f 	strbpl	r4, [lr], #-2383	; 0x94f
    142c:	4154535f 	cmpmi	r4, pc, asr r3
    1430:	52004c4c 	andpl	r4, r0, #76, 24	; 0x4c00
    1434:	6c757365 	ldclvs	3, cr7, [r5], #-404	; 0xfffffe6c
    1438:	6f500074 	svcvs	0x00500074
    143c:	5f307473 	svcpl	0x00307473
    1440:	636f7250 	cmnvs	pc, #80, 4
    1444:	00737365 	rsbseq	r7, r3, r5, ror #6
    1448:	61746144 	cmnvs	r4, r4, asr #2
    144c:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    1450:	52007265 	andpl	r7, r0, #1342177286	; 0x50000006
    1454:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    1458:	00646576 	rsbeq	r6, r4, r6, ror r5
    145c:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
    1460:	64726164 	ldrbtvs	r6, [r2], #-356	; 0x164
    1464:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
    1468:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    146c:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
    1470:	6f697461 	svcvs	0x00697461
    1474:	6144006e 	cmpvs	r4, lr, rrx
    1478:	74536174 	ldrbvc	r6, [r3], #-372	; 0x174
    147c:	49656761 	stmdbmi	r5!, {r0, r5, r6, r8, r9, sl, sp, lr}^
    1480:	4544006e 	strbmi	r0, [r4, #-110]	; 0x6e
    1484:	45434956 	strbmi	r4, [r3, #-2390]	; 0x956
    1488:	4d45525f 	sfmmi	f5, 2, [r5, #-380]	; 0xfffffe84
    148c:	5f45544f 	svcpl	0x0045544f
    1490:	454b4157 	strbmi	r4, [fp, #-343]	; 0x157
    1494:	53005055 	movwpl	r5, #85	; 0x55
    1498:	4c4c4154 	stfmie	f4, [ip], {84}	; 0x54
    149c:	54004445 	strpl	r4, [r0], #-1093	; 0x445
    14a0:	5f657079 	svcpl	0x00657079
    14a4:	00636552 	rsbeq	r6, r3, r2, asr r5
    14a8:	74697865 	strbtvc	r7, [r9], #-2149	; 0x865
    14ac:	446f4e5f 	strbtmi	r4, [pc], #-3679	; 14b4 <__Stack_Size+0x10b4>
    14b0:	5f617461 	svcpl	0x00617461
    14b4:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0x553
    14b8:	77003070 	smlsdxvc	r0, r0, r0, r3
    14bc:	756c6156 	strbvc	r6, [ip, #-342]!	; 0x156
    14c0:	44003165 	strmi	r3, [r0], #-357	; 0x165
    14c4:	43495645 	movtmi	r5, #38469	; 0x9645
    14c8:	45445f45 	strbmi	r5, [r4, #-3909]	; 0xf45
    14cc:	49524353 	ldmdbmi	r2, {r0, r1, r4, r6, r8, r9, lr}^
    14d0:	524f5450 	subpl	r5, pc, #80, 8	; 0x50000000
    14d4:	52545300 	subspl	r5, r4, #0, 6
    14d8:	5f474e49 	svcpl	0x00474e49
    14dc:	43534544 	cmpmi	r3, #68, 10	; 0x11000000
    14e0:	54504952 	ldrbpl	r4, [r0], #-2386	; 0x952
    14e4:	5500524f 	strpl	r5, [r0, #-591]	; 0x24f
    14e8:	54726573 	ldrbtpl	r6, [r2], #-1395	; 0x573
    14ec:	414d506f 	cmpmi	sp, pc, rrx
    14f0:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    14f4:	6f437265 	svcvs	0x00437265
    14f8:	73007970 	movwvc	r7, #2416	; 0x970
    14fc:	5f657661 	svcpl	0x00657661
    1500:	6e654c72 	mcrvs	12, 3, r4, cr5, cr2, {3}
    1504:	00687467 	rsbeq	r7, r8, r7, ror #8
    1508:	5453414c 	ldrbpl	r4, [r3], #-332	; 0x14c
    150c:	5f4e495f 	svcpl	0x004e495f
    1510:	41544144 	cmpmi	r4, r4, asr #2
    1514:	504f4e00 	subpl	r4, pc, r0, lsl #28
    1518:	6f72505f 	svcvs	0x0072505f
    151c:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
    1520:	61745300 	cmnvs	r4, r0, lsl #6
    1524:	7261646e 	rsbvc	r6, r1, #1845493760	; 0x6e000000
    1528:	65535f64 	ldrbvs	r5, [r3, #-3940]	; 0xf64
    152c:	746e4974 	strbtvc	r4, [lr], #-2420	; 0x974
    1530:	61667265 	cmnvs	r6, r5, ror #4
    1534:	45006563 	strmi	r6, [r0, #-1379]	; 0x563
    1538:	63657078 	cmnvs	r5, #120	; 0x78
    153c:	74535f74 	ldrbvc	r5, [r3], #-3956	; 0xf74
    1540:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1544:	74754f5f 	ldrbtvc	r4, [r5], #-3935	; 0xf5f
    1548:	55415000 	strbpl	r5, [r1, #-0]
    154c:	52004553 	andpl	r4, r0, #348127232	; 0x14c00000
    1550:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0x165
    1554:	6f4e7473 	svcvs	0x004e7473
    1558:	54454700 	strbpl	r4, [r5], #-1792	; 0x700
    155c:	544e495f 	strbpl	r4, [lr], #-2399	; 0x95f
    1560:	41465245 	cmpmi	r6, r5, asr #4
    1564:	53004543 	movwpl	r4, #1347	; 0x543
    1568:	646e6174 	strbtvs	r6, [lr], #-372	; 0x174
    156c:	5f647261 	svcpl	0x00647261
    1570:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
    1574:	6f50646e 	svcvs	0x0050646e
    1578:	46746e69 	ldrbtmi	r6, [r4], -r9, ror #28
    157c:	75746165 	ldrbvc	r6, [r4, #-357]!	; 0x165
    1580:	47006572 	smlsdxmi	r0, r2, r5, r6
    1584:	535f5445 	cmppl	pc, #1157627904	; 0x45000000
    1588:	55544154 	ldrbpl	r4, [r4, #-340]	; 0x154
    158c:	45530053 	ldrbmi	r0, [r3, #-83]	; 0x53
    1590:	45465f54 	strbmi	r5, [r6, #-3924]	; 0xf54
    1594:	52555441 	subspl	r5, r5, #1090519040	; 0x41000000
    1598:	61440045 	cmpvs	r4, r5, asr #32
    159c:	4d5f6174 	ldfmie	f6, [pc, #-464]	; 13d4 <__Stack_Size+0xfd4>
    15a0:	4d5f6c75 	ldclmi	12, cr6, [pc, #-468]	; 13d4 <__Stack_Size+0xfd4>
    15a4:	61507861 	cmpvs	r0, r1, ror #16
    15a8:	74656b63 	strbtvc	r6, [r5], #-2915	; 0xb63
    15ac:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0x953
    15b0:	65447000 	strbvs	r7, [r4, #-0]
    15b4:	74530076 	ldrbvc	r0, [r3], #-118	; 0x76
    15b8:	61646e61 	cmnvs	r4, r1, ror #28
    15bc:	535f6472 	cmppl	pc, #1912602624	; 0x72000000
    15c0:	65447465 	strbvs	r7, [r4, #-1125]	; 0x465
    15c4:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
    15c8:	74616546 	strbtvc	r6, [r1], #-1350	; 0x546
    15cc:	00657275 	rsbeq	r7, r5, r5, ror r2
    15d0:	73654470 	cmnvc	r5, #112, 8	; 0x70000000
    15d4:	59530063 	ldmdbpl	r3, {r0, r1, r5, r6}^
    15d8:	5f48434e 	svcpl	0x0048434e
    15dc:	4d415246 	sfmmi	f5, 2, [r1, #-280]	; 0xfffffee8
    15e0:	74530045 	ldrbvc	r0, [r3], #-69	; 0x45
    15e4:	61646e61 	cmnvs	r4, r1, ror #28
    15e8:	475f6472 			; <UNDEFINED> instruction: 0x475f6472
    15ec:	6e497465 	cdpvs	4, 4, cr7, cr9, cr5, {3}
    15f0:	66726574 			; <UNDEFINED> instruction: 0x66726574
    15f4:	00656361 	rsbeq	r6, r5, r1, ror #6
    15f8:	5f544553 	svcpl	0x00544553
    15fc:	43534544 	cmpmi	r3, #68, 10	; 0x11000000
    1600:	54504952 	ldrbpl	r4, [r0], #-2386	; 0x952
    1604:	5300524f 	movwpl	r5, #591	; 0x24f
    1608:	495f5445 	ldmdbmi	pc, {r0, r2, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    160c:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    1610:	45434146 	strbmi	r4, [r3, #-326]	; 0x146
    1614:	45465f00 	strbmi	r5, [r6, #-3840]	; 0xf00
    1618:	52555441 	subspl	r5, r5, #1090519040	; 0x41000000
    161c:	45535f45 	ldrbmi	r5, [r3, #-3909]	; 0xf45
    1620:	5443454c 	strbpl	r4, [r3], #-1356	; 0x54c
    1624:	5300524f 	movwpl	r5, #591	; 0x24f
    1628:	646e6174 	strbtvs	r6, [lr], #-372	; 0x174
    162c:	5f647261 	svcpl	0x00647261
    1630:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    1634:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1638:	61727567 	cmnvs	r2, r7, ror #10
    163c:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    1640:	61745300 	cmnvs	r4, r0, lsl #6
    1644:	7261646e 	rsbvc	r6, r1, #1845493760	; 0x6e000000
    1648:	6c435f64 	mcrrvs	15, 6, r5, r3, cr4
    164c:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
    1650:	75746165 	ldrbvc	r6, [r4, #-357]!	; 0x165
    1654:	47006572 	smlsdxmi	r0, r2, r5, r6
    1658:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    165c:	49464e4f 	stmdbmi	r6, {r0, r1, r2, r3, r6, r9, sl, fp, lr}^
    1660:	41525547 	cmpmi	r2, r7, asr #10
    1664:	4e4f4954 	mcrmi	9, 2, r4, cr15, cr4, {2}
    1668:	4f435f00 	svcmi	0x00435f00
    166c:	4f52544e 	svcmi	0x0052544e
    1670:	54535f4c 	ldrbpl	r5, [r3], #-3916	; 0xf4c
    1674:	00455441 	subeq	r5, r5, r1, asr #8
    1678:	5345445f 	movtpl	r4, #21599	; 0x545f
    167c:	50495243 	subpl	r5, r9, r3, asr #4
    1680:	5f524f54 	svcpl	0x00524f54
    1684:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0x954
    1688:	54455300 	strbpl	r5, [r5], #-768	; 0x300
    168c:	474e4954 	smlsldmi	r4, lr, r4, r9
    1690:	0050555f 	subseq	r5, r0, pc, asr r5
    1694:	54414d50 	strbpl	r4, [r1], #-3408	; 0xd50
    1698:	6573556f 	ldrbvs	r5, [r3, #-1391]!	; 0x56f
    169c:	66754272 			; <UNDEFINED> instruction: 0x66754272
    16a0:	43726566 	cmnmi	r2, #427819008	; 0x19800000
    16a4:	0079706f 	rsbseq	r7, r9, pc, rrx
    16a8:	5f544553 	svcpl	0x00544553
    16ac:	464e4f43 	strbmi	r4, [lr], -r3, asr #30
    16b0:	52554749 	subspl	r4, r5, #19136512	; 0x1240000
    16b4:	4f495441 	svcmi	0x00495441
    16b8:	4157004e 	cmpmi	r7, lr, asr #32
    16bc:	535f5449 	cmppl	pc, #1224736768	; 0x49000000
    16c0:	55544154 	ldrbpl	r4, [r4, #-340]	; 0x154
    16c4:	554f5f53 	strbpl	r5, [pc, #-3923]	; 779 <__Stack_Size+0x379>
    16c8:	4f540054 	svcmi	0x00540054
    16cc:	5f4c4154 	svcpl	0x004c4154
    16d0:	51455273 	hvcpl	21795	; 0x5523
    16d4:	54534555 	ldrbpl	r4, [r3], #-1365	; 0x555
    16d8:	544e4900 	strbpl	r4, [lr], #-2304	; 0x900
    16dc:	41465245 	cmpmi	r6, r5, asr #4
    16e0:	445f4543 	ldrbmi	r4, [pc], #-1347	; 16e8 <__Stack_Size+0x12e8>
    16e4:	52435345 	subpl	r5, r3, #335544321	; 0x14000001
    16e8:	4f545049 	svcmi	0x00545049
    16ec:	61730052 	cmnvs	r3, r2, asr r0
    16f0:	775f6576 			; <UNDEFINED> instruction: 0x775f6576
    16f4:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
    16f8:	53006874 	movwpl	r6, #2164	; 0x874
    16fc:	646e6174 	strbtvs	r6, [lr], #-372	; 0x174
    1700:	5f647261 	svcpl	0x00647261
    1704:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
    1708:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    170c:	4e450073 	mcrmi	0, 2, r0, cr5, cr3, {3}
    1710:	494f5044 	stmdbmi	pc, {r2, r6, ip, lr}^	; <UNPREDICTABLE>
    1714:	445f544e 	ldrbmi	r5, [pc], #-1102	; 171c <__Stack_Size+0x131c>
    1718:	52435345 	subpl	r5, r3, #335544321	; 0x14000001
    171c:	4f545049 	svcmi	0x00545049
    1720:	4f430052 	svcmi	0x00430052
    1724:	4749464e 	strbmi	r4, [r9, -lr, asr #12]
    1728:	5345445f 	movtpl	r4, #21599	; 0x545f
    172c:	50495243 	subpl	r5, r9, r3, asr #4
    1730:	00524f54 	subseq	r4, r2, r4, asr pc
    1734:	66754270 			; <UNDEFINED> instruction: 0x66754270
    1738:	50457000 	subpl	r7, r5, r0
    173c:	6f666e69 	svcvs	0x00666e69
    1740:	54455300 	strbpl	r5, [r5], #-768	; 0x300
    1744:	4444415f 	strbmi	r4, [r4], #-351	; 0x15f
    1748:	53534552 	cmppl	r3, #343932928	; 0x14800000
    174c:	6c655200 	sfmvs	f5, 2, [r5], #-0
    1750:	64657461 	strbtvs	r7, [r5], #-1121	; 0x461
    1754:	646e455f 	strbtvs	r4, [lr], #-1375	; 0x55f
    1758:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
    175c:	74530074 	ldrbvc	r0, [r3], #-116	; 0x74
    1760:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1764:	6f666e49 	svcvs	0x00666e49
    1768:	6e497700 	cdpvs	7, 4, cr7, cr9, cr0, {0}
    176c:	30786564 	rsbscc	r6, r8, r4, ror #10
    1770:	54454700 	strbpl	r4, [r5], #-1792	; 0x700
    1774:	5345445f 	movtpl	r4, #21599	; 0x545f
    1778:	50495243 	subpl	r5, r9, r3, asr #4
    177c:	00524f54 	subseq	r4, r2, r4, asr pc
    1780:	61746144 	cmnvs	r4, r4, asr #2
    1784:	67617453 			; <UNDEFINED> instruction: 0x67617453
    1788:	74754f65 	ldrbtvc	r4, [r5], #-3941	; 0xf65
    178c:	49415700 	stmdbmi	r1, {r8, r9, sl, ip, lr}^
    1790:	45535f54 	ldrbmi	r5, [r3, #-3924]	; 0xf54
    1794:	00505554 	subseq	r5, r0, r4, asr r5
    1798:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0x552
    179c:	5f747365 	svcpl	0x00747365
    17a0:	57006f4e 	strpl	r6, [r0, -lr, asr #30]
    17a4:	5f544941 	svcpl	0x00544941
    17a8:	54415453 	strbpl	r5, [r1], #-1107	; 0x453
    17ac:	495f5355 	ldmdbmi	pc, {r0, r2, r4, r6, r8, r9, ip, lr}^	; <UNPREDICTABLE>
    17b0:	4c43004e 	mcrrmi	0, 4, r0, r3, cr14
    17b4:	5f524145 	svcpl	0x00524145
    17b8:	54414546 	strbpl	r4, [r1], #-1350	; 0x546
    17bc:	00455255 	subeq	r5, r5, r5, asr r2
    17c0:	5453414c 	ldrbpl	r4, [r3], #-332	; 0x14c
    17c4:	54554f5f 	ldrbpl	r4, [r5], #-3935	; 0xf5f
    17c8:	5441445f 	strbpl	r4, [r1], #-1119	; 0x45f
    17cc:	65740041 	ldrbvs	r0, [r4, #-65]!	; 0x41
    17d0:	0031706d 	eorseq	r7, r1, sp, rrx
    17d4:	5f627375 	svcpl	0x00627375
    17d8:	2f62696c 	svccs	0x0062696c
    17dc:	5f627375 	svcpl	0x00627375
    17e0:	2e6d656d 	cdpcs	5, 6, cr6, cr13, cr13, {3}
    17e4:	4e770063 	cdpmi	0, 7, cr0, cr7, cr3, {3}
    17e8:	65747942 	ldrbvs	r7, [r4, #-2370]!	; 0x942
    17ec:	62700073 	rsbsvs	r0, r0, #115	; 0x73
    17f0:	42727355 	rsbsmi	r7, r2, #1409286145	; 0x54000001
    17f4:	74006675 	strvc	r6, [r0], #-1653	; 0x675
    17f8:	32706d65 	rsbscc	r6, r0, #6464	; 0x1940
    17fc:	4d507700 	ldclmi	7, cr7, [r0, #-0]
    1800:	66754241 	ldrbtvs	r4, [r5], -r1, asr #4
    1804:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1808:	77647000 	strbvc	r7, [r4, -r0]!
    180c:	006c6156 	rsbeq	r6, ip, r6, asr r1

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	08000142 	stmdaeq	r0, {r1, r6, r8}
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	0800014a 	stmdaeq	r0, {r1, r3, r6, r8}
       8:	4a500001 	bmi	1400014 <__Stack_Size+0x13ffc14>
       c:	4c080001 	stcmi	0, cr0, [r8], {1}
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      10:	04080001 	streq	r0, [r8], #-1
      14:	5001f300 	andpl	pc, r1, r0, lsl #6
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
      1c:	00000000 	andeq	r0, r0, r0
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	0001bc00 	andeq	fp, r1, r0, lsl #24
      24:	0001c008 	andeq	ip, r1, r8
      28:	71000508 	tstvc	r0, r8, lsl #10
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	9f274000 	svcls	0x00274000
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	080001c0 	stmdaeq	r0, {r6, r7, r8}
      34:	080001c4 	stmdaeq	r0, {r2, r6, r7, r8}
      38:	00710007 	rsbseq	r0, r1, r7

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	27402740 	strbcs	r2, [r0, -r0, asr #14]

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	0001c49f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	0001c608 	andeq	ip, r1, r8, lsl #12
      48:	73000808 	movwvc	r0, #2056	; 0x808
      4c:	27400600 	strbcs	r0, [r0, -r0, lsl #12]

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	c69f2740 	ldrgt	r2, [pc], r0, asr #14
      54:	e5080001 	str	r0, [r8, #-1]
      58:	0b080001 	bleq	200064 <__Stack_Size+0x1ffc64>
      5c:	5c000c00 	stcpl	12, cr0, [r0], {-0}
      60:	40064000 	andmi	r4, r6, r0
      64:	9f274027 	svcls	0x00274027
	...
      70:	08000228 	stmdaeq	r0, {r3, r5, r9}
      74:	0800023f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r9}
      78:	3f500001 	svccc	0x00500001
      7c:	88080002 	stmdahi	r8, {r1}
      80:	04080002 	streq	r0, [r8], #-2
      84:	5001f300 	andpl	pc, r1, r0, lsl #6
      88:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
      8c:	00000000 	andeq	r0, r0, r0
      90:	00022800 	andeq	r2, r2, r0, lsl #16
      94:	00025208 	andeq	r5, r2, r8, lsl #4
      98:	30000208 	andcc	r0, r0, r8, lsl #4
      9c:	00025a9f 	muleq	r2, pc, sl	; <UNPREDICTABLE>
      a0:	00026008 	andeq	r6, r2, r8
      a4:	30000208 	andcc	r0, r0, r8, lsl #4
      a8:	0002609f 	muleq	r2, pc, r0	; <UNPREDICTABLE>
      ac:	00026b08 	andeq	r6, r2, r8, lsl #22
      b0:	53000108 	movwpl	r0, #264	; 0x108
      b4:	08000270 	stmdaeq	r0, {r4, r5, r6, r9}
      b8:	08000288 	stmdaeq	r0, {r3, r7, r9}
      bc:	9f300002 	svcls	0x00300002
	...
      c8:	08000288 	stmdaeq	r0, {r3, r7, r9}
      cc:	0800028d 	stmdaeq	r0, {r0, r2, r3, r7, r9}
      d0:	8d500001 	ldclhi	0, cr0, [r0, #-4]
      d4:	94080002 	strls	r0, [r8], #-2
      d8:	04080002 	streq	r0, [r8], #-2
      dc:	5001f300 	andpl	pc, r1, r0, lsl #6
      e0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
      e4:	00000000 	andeq	r0, r0, r0
      e8:	00029400 	andeq	r9, r2, r0, lsl #8
      ec:	00029908 	andeq	r9, r2, r8, lsl #18
      f0:	50000108 	andpl	r0, r0, r8, lsl #2
      f4:	08000299 	stmdaeq	r0, {r0, r3, r4, r7, r9}
      f8:	080002a0 	stmdaeq	r0, {r5, r7, r9}
      fc:	01f30004 	mvnseq	r0, r4
     100:	00009f50 	andeq	r9, r0, r0, asr pc
     104:	00000000 	andeq	r0, r0, r0
     108:	02a00000 	adceq	r0, r0, #0
     10c:	02b30800 	adcseq	r0, r3, #0, 16
     110:	00010800 	andeq	r0, r1, r0, lsl #16
     114:	0002b350 	andeq	fp, r2, r0, asr r3
     118:	0002b408 	andeq	fp, r2, r8, lsl #8
     11c:	f3000408 	vshl.u8	d0, d8, d0
     120:	b49f5001 	ldrlt	r5, [pc], #1	; 128 <_Minimum_Stack_Size+0x28>
     124:	b6080002 	strlt	r0, [r8], -r2
     128:	01080002 	tsteq	r8, r2
     12c:	02b65000 	adcseq	r5, r6, #0
     130:	02c00800 	sbceq	r0, r0, #0, 16
     134:	00040800 	andeq	r0, r4, r0, lsl #16
     138:	9f5001f3 	svcls	0x005001f3
	...
     144:	080002c0 	stmdaeq	r0, {r6, r7, r9}
     148:	080002c5 	stmdaeq	r0, {r0, r2, r6, r7, r9}
     14c:	c5500001 	ldrbgt	r0, [r0, #-1]
     150:	cc080002 	stcgt	0, cr0, [r8], {2}
     154:	04080002 	streq	r0, [r8], #-2
     158:	5001f300 	andpl	pc, r1, r0, lsl #6
     15c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     160:	00000000 	andeq	r0, r0, r0
     164:	0002cc00 	andeq	ip, r2, r0, lsl #24
     168:	0002df08 	andeq	sp, r2, r8, lsl #30
     16c:	50000108 	andpl	r0, r0, r8, lsl #2
     170:	080002df 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r7, r9}
     174:	080002ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r9}
     178:	01f30004 	mvnseq	r0, r4
     17c:	02ea9f50 	rsceq	r9, sl, #80, 30	; 0x140
     180:	02ec0800 	rsceq	r0, ip, #0, 16
     184:	00010800 	andeq	r0, r1, r0, lsl #16
     188:	0002ec50 	andeq	lr, r2, r0, asr ip
     18c:	0002f408 	andeq	pc, r2, r8, lsl #8
     190:	f3000408 	vshl.u8	d0, d8, d0
     194:	009f5001 	addseq	r5, pc, r1
     198:	00000000 	andeq	r0, r0, r0
     19c:	dc000000 	stcle	0, cr0, [r0], {-0}
     1a0:	ea080002 	b	2001b0 <__Stack_Size+0x1ffdb0>
     1a4:	04080002 	streq	r0, [r8], #-2
     1a8:	5001f300 	andpl	pc, r1, r0, lsl #6
     1ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     1b0:	00000000 	andeq	r0, r0, r0
     1b4:	00037600 	andeq	r7, r3, r0, lsl #12
     1b8:	00037a08 	andeq	r7, r3, r8, lsl #20
     1bc:	72000508 	andvc	r0, r0, #8, 10	; 0x2000000
     1c0:	9f213c00 	svcls	0x00213c00
	...
     1cc:	080003a4 	stmdaeq	r0, {r2, r5, r7, r8, r9}
     1d0:	080003c1 	stmdaeq	r0, {r0, r6, r7, r8, r9}
     1d4:	c1500001 	cmpgt	r0, r1
     1d8:	c4080003 	strgt	r0, [r8], #-3
     1dc:	04080003 	streq	r0, [r8], #-3
     1e0:	5001f300 	andpl	pc, r1, r0, lsl #6
     1e4:	0003c49f 	muleq	r3, pc, r4	; <UNPREDICTABLE>
     1e8:	0003c708 	andeq	ip, r3, r8, lsl #14
     1ec:	50000108 	andpl	r0, r0, r8, lsl #2
     1f0:	080003c7 	stmdaeq	r0, {r0, r1, r2, r6, r7, r8, r9}
     1f4:	080003cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9}
     1f8:	01f30004 	mvnseq	r0, r4
     1fc:	03cc9f50 	biceq	r9, ip, #80, 30	; 0x140
     200:	041a0800 	ldreq	r0, [sl], #-2048	; 0x800
     204:	00010800 	andeq	r0, r1, r0, lsl #16
     208:	00041a50 	andeq	r1, r4, r0, asr sl
     20c:	00042808 	andeq	r2, r4, r8, lsl #16
     210:	f3000408 	vshl.u8	d0, d8, d0
     214:	009f5001 	addseq	r5, pc, r1
     218:	00000000 	andeq	r0, r0, r0
     21c:	ea000000 	b	224 <_Minimum_Stack_Size+0x124>
     220:	ee080003 	cdp	0, 0, cr0, cr8, cr3, {0}
     224:	05080003 	streq	r0, [r8, #-3]
     228:	40007200 	andmi	r7, r0, r0, lsl #4
     22c:	040e9f21 	streq	r9, [lr], #-3873	; 0xf21
     230:	04140800 	ldreq	r0, [r4], #-2048	; 0x800
     234:	00060800 	andeq	r0, r6, r0, lsl #16
     238:	ef090071 	svc	0x00090071
     23c:	00009f1a 	andeq	r9, r0, sl, lsl pc
     240:	00000000 	andeq	r0, r0, r0
     244:	05ac0000 	streq	r0, [ip, #0]!
     248:	05ce0800 	strbeq	r0, [lr, #2048]	; 0x800
     24c:	00020800 	andeq	r0, r2, r0, lsl #16
     250:	05ce9f30 	strbeq	r9, [lr, #3888]	; 0xf30
     254:	05dc0800 	ldrbeq	r0, [ip, #2048]	; 0x800
     258:	00020800 	andeq	r0, r2, r0, lsl #16
     25c:	05ea9f31 	strbeq	r9, [sl, #3889]!	; 0xf31
     260:	06080800 	streq	r0, [r8], -r0, lsl #16
     264:	00020800 	andeq	r0, r2, r0, lsl #16
     268:	00009f31 	andeq	r9, r0, r1, lsr pc
     26c:	00000000 	andeq	r0, r0, r0
     270:	06080000 	streq	r0, [r8], -r0
     274:	060e0800 	streq	r0, [lr], -r0, lsl #16
     278:	00010800 	andeq	r0, r1, r0, lsl #16
     27c:	00060e51 	andeq	r0, r6, r1, asr lr
     280:	00061e08 	andeq	r1, r6, r8, lsl #28
     284:	f3000408 	vshl.u8	d0, d8, d0
     288:	009f5101 	addseq	r5, pc, r1, lsl #2
     28c:	00000000 	andeq	r0, r0, r0
     290:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     294:	08080006 	stmdaeq	r8, {r1, r2}
     298:	01080006 	tsteq	r8, r6
     29c:	06085200 	streq	r5, [r8], -r0, lsl #4
     2a0:	06120800 	ldreq	r0, [r2], -r0, lsl #16
     2a4:	00070800 	andeq	r0, r7, r0, lsl #16
     2a8:	24480072 	strbcs	r0, [r8], #-114	; 0x72
     2ac:	129f2930 	addsne	r2, pc, #48, 18	; 0xc0000
     2b0:	1e080006 	cdpne	0, 0, cr0, cr8, cr6, {0}
     2b4:	08080006 	stmdaeq	r8, {r1, r2}
     2b8:	5201f300 	andpl	pc, r1, #0, 6
     2bc:	29302448 	ldmdbcs	r0!, {r3, r6, sl, sp}
     2c0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     2d0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     2dc:	01f30004 	mvnseq	r0, r4
     2e0:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     2f0:	00010000 	andeq	r0, r1, r0
     2f4:	00000051 	andeq	r0, r0, r1, asr r0
     2f8:	00000000 	andeq	r0, r0, r0
     2fc:	f3000400 	vshl.u8	d0, d0, d0
     300:	009f5101 	addseq	r5, pc, r1, lsl #2
     304:	00000000 	andeq	r0, r0, r0
     308:	20000000 	andcs	r0, r0, r0
     30c:	24080006 	strcs	r0, [r8], #-6
     310:	02080006 	andeq	r0, r8, #6
     314:	249f3000 	ldrcs	r3, [pc], #0	; 31c <_Minimum_Stack_Size+0x21c>
     318:	28080006 	stmdacs	r8, {r1, r2}
     31c:	08080006 	stmdaeq	r8, {r1, r2}
     320:	08007000 	stmdaeq	r0, {ip, sp, lr}
     324:	2e301a80 	vaddcs.f32	s2, s1, s0
     328:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     338:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     344:	00580001 	subseq	r0, r8, r1
	...
     354:	01000000 	mrseq	r0, (UNDEF: 0)
     358:	00005100 	andeq	r5, r0, r0, lsl #2
     35c:	00000000 	andeq	r0, r0, r0
     360:	00040000 	andeq	r0, r4, r0
     364:	9f5101f3 	svcls	0x005101f3
	...
     378:	00520001 	subseq	r0, r2, r1
     37c:	00000000 	andeq	r0, r0, r0
     380:	04000000 	streq	r0, [r0], #-0
     384:	5201f300 	andpl	pc, r1, #0, 6
     388:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     38c:	00000000 	andeq	r0, r0, r0
     390:	74000300 	strvc	r0, [r0], #-768	; 0x300
     394:	00009f7f 	andeq	r9, r0, pc, ror pc
     398:	00000000 	andeq	r0, r0, r0
     39c:	00030000 	andeq	r0, r3, r0
     3a0:	009f0074 	addseq	r0, pc, r4, ror r0	; <UNPREDICTABLE>
     3a4:	00000000 	andeq	r0, r0, r0
     3a8:	03000000 	movweq	r0, #0
     3ac:	9f7f7400 	svcls	0x007f7400
	...
     3c0:	00530001 	subseq	r0, r3, r1
     3c4:	00000000 	andeq	r0, r0, r0
     3c8:	01000000 	mrseq	r0, (UNDEF: 0)
     3cc:	00005600 	andeq	r5, r0, r0, lsl #12
	...
     3dc:	00010000 	andeq	r0, r1, r0
     3e0:	00000055 	andeq	r0, r0, r5, asr r0
     3e4:	00000000 	andeq	r0, r0, r0
     3e8:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
     3f4:	00550001 	subseq	r0, r5, r1
     3f8:	00000000 	andeq	r0, r0, r0
     3fc:	fa000000 	blx	404 <__Stack_Size+0x4>
     400:	00080006 	andeq	r0, r8, r6
     404:	01080007 	tsteq	r8, r7
     408:	00005200 	andeq	r5, r0, r0, lsl #4
     40c:	00000000 	andeq	r0, r0, r0
     410:	070c0000 	streq	r0, [ip, -r0]
     414:	07100800 	ldreq	r0, [r0, -r0, lsl #16]
     418:	00010800 	andeq	r0, r1, r0, lsl #16
     41c:	00071050 	andeq	r1, r7, r0, asr r0
     420:	00072008 	andeq	r2, r7, r8
     424:	f3000408 	vshl.u8	d0, d8, d0
     428:	009f5001 	addseq	r5, pc, r1
     42c:	00000000 	andeq	r0, r0, r0
     430:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     434:	16080007 	strne	r0, [r8], -r7
     438:	01080007 	tsteq	r8, r7
     43c:	00005300 	andeq	r5, r0, r0, lsl #6
     440:	00000000 	andeq	r0, r0, r0
     444:	07200000 	streq	r0, [r0, -r0]!
     448:	072f0800 	streq	r0, [pc, -r0, lsl #16]!
     44c:	00010800 	andeq	r0, r1, r0, lsl #16
     450:	00072f50 	andeq	r2, r7, r0, asr pc
     454:	00073808 	andeq	r3, r7, r8, lsl #16
     458:	f3000408 	vshl.u8	d0, d8, d0
     45c:	009f5001 	addseq	r5, pc, r1
     460:	00000000 	andeq	r0, r0, r0
     464:	26000000 	strcs	r0, [r0], -r0
     468:	2f080007 	svccs	0x00080007
     46c:	01080007 	tsteq	r8, r7
     470:	00005300 	andeq	r5, r0, r0, lsl #6
     474:	00000000 	andeq	r0, r0, r0
     478:	07640000 	strbeq	r0, [r4, -r0]!
     47c:	07920800 	ldreq	r0, [r2, r0, lsl #16]
     480:	00020800 	andeq	r0, r2, r0, lsl #16
     484:	07929f30 			; <UNDEFINED> instruction: 0x07929f30
     488:	07a00800 	streq	r0, [r0, r0, lsl #16]!
     48c:	00010800 	andeq	r0, r1, r0, lsl #16
     490:	00000054 	andeq	r0, r0, r4, asr r0
     494:	00000000 	andeq	r0, r0, r0
     498:	0007ac00 	andeq	sl, r7, r0, lsl #24
     49c:	0007ba08 	andeq	fp, r7, r8, lsl #20
     4a0:	30000208 	andcc	r0, r0, r8, lsl #4
     4a4:	0007ba9f 	muleq	r7, pc, sl	; <UNPREDICTABLE>
     4a8:	0007c208 	andeq	ip, r7, r8, lsl #4
     4ac:	53000108 	movwpl	r0, #264	; 0x108
     4b0:	080007c2 	stmdaeq	r0, {r1, r6, r7, r8, r9, sl}
     4b4:	080007ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, r9, sl}
     4b8:	ce520001 	cdpgt	0, 5, cr0, cr2, cr1, {0}
     4bc:	f0080007 			; <UNDEFINED> instruction: 0xf0080007
     4c0:	01080007 	tsteq	r8, r7
     4c4:	07f05400 	ldrbeq	r5, [r0, r0, lsl #8]!
     4c8:	07f20800 	ldrbeq	r0, [r2, r0, lsl #16]!
     4cc:	00060800 	andeq	r0, r6, r0, lsl #16
     4d0:	00720074 	rsbseq	r0, r2, r4, ror r0
     4d4:	07f29f1a 			; <UNDEFINED> instruction: 0x07f29f1a
     4d8:	07f40800 	ldrbeq	r0, [r4, r0, lsl #16]!
     4dc:	00010800 	andeq	r0, r1, r0, lsl #16
     4e0:	0007f452 	andeq	pc, r7, r2, asr r4	; <UNPREDICTABLE>
     4e4:	0007f808 	andeq	pc, r7, r8, lsl #16
     4e8:	08001208 	stmdaeq	r0, {r3, r9, ip}
     4ec:	940070ff 	strls	r7, [r0], #-255	; 0xff
     4f0:	081a3301 	ldmdaeq	sl, {r0, r8, r9, ip, sp}
     4f4:	24331aff 	ldrtcs	r1, [r3], #-2815	; 0xaff
     4f8:	1a007424 	bne	1d590 <__Stack_Size+0x1d190>
     4fc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     500:	00000000 	andeq	r0, r0, r0
     504:	0007ac00 	andeq	sl, r7, r0, lsl #24
     508:	0007ec08 	andeq	lr, r7, r8, lsl #24
     50c:	30000208 	andcc	r0, r0, r8, lsl #4
     510:	0007ec9f 	muleq	r7, pc, ip	; <UNPREDICTABLE>
     514:	0007f008 	andeq	pc, r7, r8
     518:	55000108 	strpl	r0, [r0, #-264]	; 0x108
     51c:	080007f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl}
     520:	080007f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sl}
     524:	f4510001 			; <UNDEFINED> instruction: 0xf4510001
     528:	fc080007 	stc2	0, cr0, [r8], {7}
     52c:	01080007 	tsteq	r8, r7
     530:	00005200 	andeq	r5, r0, r0, lsl #4
     534:	00000000 	andeq	r0, r0, r0
     538:	07ac0000 	streq	r0, [ip, r0]!
     53c:	07ec0800 	strbeq	r0, [ip, r0, lsl #16]!
     540:	00020800 	andeq	r0, r2, r0, lsl #16
     544:	07ec9f30 			; <UNDEFINED> instruction: 0x07ec9f30
     548:	07f20800 	ldrbeq	r0, [r2, r0, lsl #16]!
     54c:	00010800 	andeq	r0, r1, r0, lsl #16
     550:	0007f252 	andeq	pc, r7, r2, asr r2	; <UNPREDICTABLE>
     554:	0007f808 	andeq	pc, r7, r8, lsl #16
     558:	08000f08 	stmdaeq	r0, {r3, r8, r9, sl, fp}
     55c:	940070ff 	strls	r7, [r0], #-255	; 0xff
     560:	081a3301 	ldmdaeq	sl, {r0, r8, r9, ip, sp}
     564:	24331aff 	ldrtcs	r1, [r3], #-2815	; 0xaff
     568:	00009f24 	andeq	r9, r0, r4, lsr #30
     56c:	00000000 	andeq	r0, r0, r0
     570:	07ac0000 	streq	r0, [ip, r0]!
     574:	07ba0800 	ldreq	r0, [sl, r0, lsl #16]!
     578:	00020800 	andeq	r0, r2, r0, lsl #16
     57c:	07ba9f30 			; <UNDEFINED> instruction: 0x07ba9f30
     580:	07be0800 	ldreq	r0, [lr, r0, lsl #16]!
     584:	00050800 	andeq	r0, r5, r0, lsl #16
     588:	1c007334 	stcne	3, cr7, [r0], {52}	; 0x34
     58c:	0007be9f 	muleq	r7, pc, lr	; <UNPREDICTABLE>
     590:	0007c208 	andeq	ip, r7, r8, lsl #4
     594:	52000108 	andpl	r0, r0, #8, 2
     598:	080007c2 	stmdaeq	r0, {r1, r6, r7, r8, r9, sl}
     59c:	080007ca 	stmdaeq	r0, {r1, r3, r6, r7, r8, r9, sl}
     5a0:	73340005 	teqvc	r4, #5
     5a4:	009f1c00 	addseq	r1, pc, r0, lsl #24
     5a8:	00000000 	andeq	r0, r0, r0
     5ac:	ac000000 	stcge	0, cr0, [r0], {-0}
     5b0:	ba080007 	blt	2005d4 <__Stack_Size+0x2001d4>
     5b4:	02080007 	andeq	r0, r8, #7
     5b8:	ba9f3f00 	blt	fe7d01c0 <BootRAM+0xd740961>
     5bc:	c6080007 	strgt	r0, [r8], -r7
     5c0:	05080007 	streq	r0, [r8, #-7]
     5c4:	00733f00 	rsbseq	r3, r3, r0, lsl #30
     5c8:	07c69f25 	strbeq	r9, [r6, r5, lsr #30]
     5cc:	07cc0800 	strbeq	r0, [ip, r0, lsl #16]
     5d0:	00010800 	andeq	r0, r1, r0, lsl #16
     5d4:	00000054 	andeq	r0, r0, r4, asr r0
     5d8:	00000000 	andeq	r0, r0, r0
     5dc:	00083c00 	andeq	r3, r8, r0, lsl #24
     5e0:	00084908 	andeq	r4, r8, r8, lsl #18
     5e4:	50000108 	andpl	r0, r0, r8, lsl #2
     5e8:	08000849 	stmdaeq	r0, {r0, r3, r6, fp}
     5ec:	0800085c 	stmdaeq	r0, {r2, r3, r4, r6, fp}
     5f0:	5c540001 	mrrcpl	0, 0, r0, r4, cr1
     5f4:	5f080008 	svcpl	0x00080008
     5f8:	01080008 	tsteq	r8, r8
     5fc:	085f5000 	ldmdaeq	pc, {ip, lr}^	; <UNPREDICTABLE>
     600:	08640800 	stmdaeq	r4!, {fp}^
     604:	00040800 	andeq	r0, r4, r0, lsl #16
     608:	9f5001f3 	svcls	0x005001f3
	...
     614:	08000878 	stmdaeq	r0, {r3, r4, r5, r6, fp}
     618:	080008a0 	stmdaeq	r0, {r5, r7, fp}
     61c:	a0500001 	subsge	r0, r0, r1
     620:	ac080008 	stcge	0, cr0, [r8], {8}
     624:	04080008 	streq	r0, [r8], #-8
     628:	5001f300 	andpl	pc, r1, r0, lsl #6
     62c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     630:	00000000 	andeq	r0, r0, r0
     634:	00087e00 	andeq	r7, r8, r0, lsl #28
     638:	00089c08 	andeq	r9, r8, r8, lsl #24
     63c:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
     640:	00089c9f 	muleq	r8, pc, ip	; <UNPREDICTABLE>
     644:	0008ac08 	andeq	sl, r8, r8, lsl #24
     648:	30000208 	andcc	r0, r0, r8, lsl #4
     64c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     65c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     668:	00550001 	subseq	r0, r5, r1
     66c:	00000000 	andeq	r0, r0, r0
     670:	04000000 	streq	r0, [r0], #-0
     674:	5001f300 	andpl	pc, r1, r0, lsl #6
     678:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     688:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     694:	01f30004 	mvnseq	r0, r4
     698:	00009f51 	andeq	r9, r0, r1, asr pc
     69c:	00000000 	andeq	r0, r0, r0
     6a0:	00010000 	andeq	r0, r1, r0
     6a4:	00000054 	andeq	r0, r0, r4, asr r0
     6a8:	00000000 	andeq	r0, r0, r0
     6ac:	74000300 	strvc	r0, [r0], #-768	; 0x300
     6b0:	00009f01 	andeq	r9, r0, r1, lsl #30
     6b4:	00000000 	andeq	r0, r0, r0
     6b8:	00010000 	andeq	r0, r1, r0
     6bc:	00000054 	andeq	r0, r0, r4, asr r0
     6c0:	00000000 	andeq	r0, r0, r0
     6c4:	0008ac00 	andeq	sl, r8, r0, lsl #24
     6c8:	0008e608 	andeq	lr, r8, r8, lsl #12
     6cc:	50000108 	andpl	r0, r0, r8, lsl #2
     6d0:	080008e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, fp}
     6d4:	080008f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, fp}
     6d8:	01f30004 	mvnseq	r0, r4
     6dc:	00009f50 	andeq	r9, r0, r0, asr pc
     6e0:	00000000 	andeq	r0, r0, r0
     6e4:	08bc0000 	ldmeq	ip!, {}	; <UNPREDICTABLE>
     6e8:	08e20800 	stmiaeq	r2!, {fp}^
     6ec:	00010800 	andeq	r0, r1, r0, lsl #16
     6f0:	0008e254 	andeq	lr, r8, r4, asr r2
     6f4:	0008f808 	andeq	pc, r8, r8, lsl #16
     6f8:	52000108 	andpl	r0, r0, #8, 2
	...
     704:	0800091c 	stmdaeq	r0, {r2, r3, r4, r8, fp}
     708:	08000922 	stmdaeq	r0, {r1, r5, r8, fp}
     70c:	22500001 	subscs	r0, r0, #1
     710:	26080009 	strcs	r0, [r8], -r9
     714:	01080009 	tsteq	r8, r9
     718:	00005000 	andeq	r5, r0, r0
     71c:	00000000 	andeq	r0, r0, r0
     720:	09220000 	stmdbeq	r2!, {}	; <UNPREDICTABLE>
     724:	09260800 	stmdbeq	r6!, {fp}
     728:	00070800 	andeq	r0, r7, r0, lsl #16
     72c:	3200703f 	andcc	r7, r0, #63	; 0x3f
     730:	2a9f2424 	bcs	fe7c97c8 <BootRAM+0xd739f69>
     734:	2c080009 	stccs	0, cr0, [r8], {9}
     738:	01080009 	tsteq	r8, r9
     73c:	092c5000 	stmdbeq	ip!, {ip, lr}
     740:	092e0800 	stmdbeq	lr!, {fp}
     744:	00040800 	andeq	r0, r4, r0, lsl #16
     748:	9f200070 	svcls	0x00200070
	...
     754:	080009c0 	stmdaeq	r0, {r6, r7, r8, fp}
     758:	080009c8 	stmdaeq	r0, {r3, r6, r7, r8, fp}
     75c:	d8510001 	ldmdale	r1, {r0}^
     760:	e0080009 	and	r0, r8, r9
     764:	01080009 	tsteq	r8, r9
     768:	09ec5100 	stmibeq	ip!, {r8, ip, lr}^
     76c:	09f80800 	ldmibeq	r8!, {fp}^
     770:	00010800 	andeq	r0, r1, r0, lsl #16
     774:	00000051 	andeq	r0, r0, r1, asr r0
     778:	00000000 	andeq	r0, r0, r0
     77c:	0009f800 	andeq	pc, r9, r0, lsl #16
     780:	000a0608 	andeq	r0, sl, r8, lsl #12
     784:	50000108 	andpl	r0, r0, r8, lsl #2
     788:	08000a06 	stmdaeq	r0, {r1, r2, r9, fp}
     78c:	08000a10 	stmdaeq	r0, {r4, r9, fp}
     790:	01f30004 	mvnseq	r0, r4
     794:	00009f50 	andeq	r9, r0, r0, asr pc
     798:	00000000 	andeq	r0, r0, r0
     79c:	0a100000 	beq	4007a4 <__Stack_Size+0x4003a4>
     7a0:	0a1e0800 	beq	7827a8 <__Stack_Size+0x7823a8>
     7a4:	00010800 	andeq	r0, r1, r0, lsl #16
     7a8:	000a1e50 	andeq	r1, sl, r0, asr lr
     7ac:	000a2808 	andeq	r2, sl, r8, lsl #16
     7b0:	f3000408 	vshl.u8	d0, d8, d0
     7b4:	009f5001 	addseq	r5, pc, r1
     7b8:	00000000 	andeq	r0, r0, r0
     7bc:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
     7c0:	4008000a 	andmi	r0, r8, sl
     7c4:	0108000a 	tsteq	r8, sl
     7c8:	0a405000 	beq	10147d0 <__Stack_Size+0x10143d0>
     7cc:	0a500800 	beq	14027d4 <__Stack_Size+0x14023d4>
     7d0:	00040800 	andeq	r0, r4, r0, lsl #16
     7d4:	9f5001f3 	svcls	0x005001f3
	...
     7e0:	08000a50 	stmdaeq	r0, {r4, r6, r9, fp}
     7e4:	08000a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp}
     7e8:	6c500001 	mrrcvs	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     7ec:	8408000a 	strhi	r0, [r8], #-10
     7f0:	0408000a 	streq	r0, [r8], #-10
     7f4:	5001f300 	andpl	pc, r1, r0, lsl #6
     7f8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     7fc:	00000000 	andeq	r0, r0, r0
     800:	000a9a00 	andeq	r9, sl, r0, lsl #20
     804:	000ac208 	andeq	ip, sl, r8, lsl #4
     808:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
     814:	08000a94 	stmdaeq	r0, {r2, r4, r7, r9, fp}
     818:	08000a9a 	stmdaeq	r0, {r1, r3, r4, r7, r9, fp}
     81c:	00550001 	subseq	r0, r5, r1
     820:	00000000 	andeq	r0, r0, r0
     824:	e2000000 	and	r0, r0, #0
     828:	f608000a 			; <UNDEFINED> instruction: 0xf608000a
     82c:	0108000a 	tsteq	r8, sl
     830:	0b2a5300 	bleq	a95438 <__Stack_Size+0xa95038>
     834:	0b300800 	bleq	c0283c <__Stack_Size+0xc0243c>
     838:	00010800 	andeq	r0, r1, r0, lsl #16
     83c:	000b6853 	andeq	r6, fp, r3, asr r8
     840:	000b8208 	andeq	r8, fp, r8, lsl #4
     844:	53000108 	movwpl	r0, #264	; 0x108
     848:	08000b8a 	stmdaeq	r0, {r1, r3, r7, r8, r9, fp}
     84c:	08000b9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, fp}
     850:	a4530001 	ldrbge	r0, [r3], #-1
     854:	aa08000b 	bge	200888 <__Stack_Size+0x200488>
     858:	0108000b 	tsteq	r8, fp
     85c:	0bd25300 	bleq	ff495464 <BootRAM+0xe405c05>
     860:	0be20800 	bleq	ff882868 <BootRAM+0xe7f3009>
     864:	00010800 	andeq	r0, r1, r0, lsl #16
     868:	000be853 	andeq	lr, fp, r3, asr r8
     86c:	000bfc08 	andeq	pc, fp, r8, lsl #24
     870:	53000108 	movwpl	r0, #264	; 0x108
     874:	08000c74 	stmdaeq	r0, {r2, r4, r5, r6, sl, fp}
     878:	08000c7a 	stmdaeq	r0, {r1, r3, r4, r5, r6, sl, fp}
     87c:	00530001 	subseq	r0, r3, r1
	...
     88c:	01000000 	mrseq	r0, (UNDEF: 0)
     890:	00005000 	andeq	r5, r0, r0
     894:	00000000 	andeq	r0, r0, r0
     898:	00040000 	andeq	r0, r4, r0
     89c:	9f5001f3 	svcls	0x005001f3
	...
     8b0:	00500001 	subseq	r0, r0, r1
     8b4:	00000000 	andeq	r0, r0, r0
     8b8:	04000000 	streq	r0, [r0], #-0
     8bc:	5001f300 	andpl	pc, r1, r0, lsl #6
     8c0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     8d0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     8dc:	01f30004 	mvnseq	r0, r4
     8e0:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     8f0:	00010000 	andeq	r0, r1, r0
     8f4:	00000051 	andeq	r0, r0, r1, asr r0
     8f8:	00000000 	andeq	r0, r0, r0
     8fc:	f3000400 	vshl.u8	d0, d0, d0
     900:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
     910:	01000000 	mrseq	r0, (UNDEF: 0)
     914:	00005000 	andeq	r5, r0, r0
     918:	00000000 	andeq	r0, r0, r0
     91c:	00040000 	andeq	r0, r4, r0
     920:	9f5001f3 	svcls	0x005001f3
	...
     92c:	08000cec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, fp}
     930:	08000cee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, sl, fp}
     934:	ee500001 	cdp	0, 5, cr0, cr0, cr1, {0}
     938:	1608000c 	strne	r0, [r8], -ip
     93c:	0408000d 	streq	r0, [r8], #-13
     940:	5001f300 	andpl	pc, r1, r0, lsl #6
     944:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     954:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     960:	01f30004 	mvnseq	r0, r4
     964:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     974:	00010000 	andeq	r0, r1, r0
     978:	00000050 	andeq	r0, r0, r0, asr r0
     97c:	00000000 	andeq	r0, r0, r0
     980:	f3000400 	vshl.u8	d0, d0, d0
     984:	009f5001 	addseq	r5, pc, r1
	...
     994:	01000000 	mrseq	r0, (UNDEF: 0)
     998:	00005000 	andeq	r5, r0, r0
     99c:	00000000 	andeq	r0, r0, r0
     9a0:	00040000 	andeq	r0, r4, r0
     9a4:	9f5001f3 	svcls	0x005001f3
	...
     9b8:	00500001 	subseq	r0, r0, r1
     9bc:	00000000 	andeq	r0, r0, r0
     9c0:	04000000 	streq	r0, [r0], #-0
     9c4:	5001f300 	andpl	pc, r1, r0, lsl #6
     9c8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     9d8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     9e4:	01f30004 	mvnseq	r0, r4
     9e8:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     9f8:	00060000 	andeq	r0, r6, r0
     9fc:	30080073 	andcc	r0, r8, r3, ror r0
     a00:	00009f27 	andeq	r9, r0, r7, lsr #30
     a04:	00000000 	andeq	r0, r0, r0
     a08:	00090000 	andeq	r0, r9, r0
     a0c:	30080073 	andcc	r0, r8, r3, ror r0
     a10:	27300827 	ldrcs	r0, [r0, -r7, lsr #16]!
     a14:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     a18:	00000000 	andeq	r0, r0, r0
     a1c:	000d1600 	andeq	r1, sp, r0, lsl #12
     a20:	000d1808 	andeq	r1, sp, r8, lsl #16
     a24:	50000108 	andpl	r0, r0, r8, lsl #2
     a28:	08000d18 	stmdaeq	r0, {r3, r4, r8, sl, fp}
     a2c:	08000d34 	stmdaeq	r0, {r2, r4, r5, r8, sl, fp}
     a30:	01f30004 	mvnseq	r0, r4
     a34:	00009f50 	andeq	r9, r0, r0, asr pc
     a38:	00000000 	andeq	r0, r0, r0
     a3c:	0d2c0000 	stceq	0, cr0, [ip, #-0]
     a40:	0d300800 	ldceq	8, cr0, [r0, #-0]
     a44:	00070800 	andeq	r0, r7, r0, lsl #16
     a48:	000a0073 	andeq	r0, sl, r3, ror r0
     a4c:	309f2730 	addscc	r2, pc, r0, lsr r7	; <UNPREDICTABLE>
     a50:	3408000d 	strcc	r0, [r8], #-13
     a54:	0b08000d 	bleq	200a90 <__Stack_Size+0x200690>
     a58:	0a007300 	beq	1d660 <__Stack_Size+0x1d260>
     a5c:	0a273000 	beq	9cca64 <__Stack_Size+0x9cc664>
     a60:	9f273000 	svcls	0x00273000
	...
     a74:	00500001 	subseq	r0, r0, r1
     a78:	00000000 	andeq	r0, r0, r0
     a7c:	04000000 	streq	r0, [r0], #-0
     a80:	5001f300 	andpl	pc, r1, r0, lsl #6
     a84:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     a94:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     aa0:	01f30004 	mvnseq	r0, r4
     aa4:	00009f50 	andeq	r9, r0, r0, asr pc
     aa8:	00000000 	andeq	r0, r0, r0
     aac:	0d340000 	ldceq	0, cr0, [r4, #-0]
     ab0:	0d360800 	ldceq	8, cr0, [r6, #-0]
     ab4:	00010800 	andeq	r0, r1, r0, lsl #16
     ab8:	000d3650 	andeq	r3, sp, r0, asr r6
     abc:	000d5008 	andeq	r5, sp, r8
     ac0:	f3000408 	vshl.u8	d0, d8, d0
     ac4:	009f5001 	addseq	r5, pc, r1
	...
     ad4:	01000000 	mrseq	r0, (UNDEF: 0)
     ad8:	00005000 	andeq	r5, r0, r0
     adc:	00000000 	andeq	r0, r0, r0
     ae0:	00040000 	andeq	r0, r4, r0
     ae4:	9f5001f3 	svcls	0x005001f3
	...
     af8:	00500001 	subseq	r0, r0, r1
     afc:	00000000 	andeq	r0, r0, r0
     b00:	04000000 	streq	r0, [r0], #-0
     b04:	5001f300 	andpl	pc, r1, r0, lsl #6
     b08:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     b18:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     b24:	01f30004 	mvnseq	r0, r4
     b28:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     b38:	00010000 	andeq	r0, r1, r0
     b3c:	00000050 	andeq	r0, r0, r0, asr r0
     b40:	00000000 	andeq	r0, r0, r0
     b44:	f3000400 	vshl.u8	d0, d0, d0
     b48:	009f5001 	addseq	r5, pc, r1
	...
     b58:	01000000 	mrseq	r0, (UNDEF: 0)
     b5c:	00005000 	andeq	r5, r0, r0
     b60:	00000000 	andeq	r0, r0, r0
     b64:	00040000 	andeq	r0, r4, r0
     b68:	9f5001f3 	svcls	0x005001f3
	...
     b7c:	00500001 	subseq	r0, r0, r1
     b80:	00000000 	andeq	r0, r0, r0
     b84:	04000000 	streq	r0, [r0], #-0
     b88:	5001f300 	andpl	pc, r1, r0, lsl #6
     b8c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     b9c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     ba8:	01f30004 	mvnseq	r0, r4
     bac:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     bbc:	00010000 	andeq	r0, r1, r0
     bc0:	00000050 	andeq	r0, r0, r0, asr r0
     bc4:	00000000 	andeq	r0, r0, r0
     bc8:	f3000400 	vshl.u8	d0, d0, d0
     bcc:	009f5001 	addseq	r5, pc, r1
	...
     bdc:	01000000 	mrseq	r0, (UNDEF: 0)
     be0:	00005000 	andeq	r5, r0, r0
     be4:	00000000 	andeq	r0, r0, r0
     be8:	00040000 	andeq	r0, r4, r0
     bec:	9f5001f3 	svcls	0x005001f3
	...
     bf8:	08000d50 	stmdaeq	r0, {r4, r6, r8, sl, fp}
     bfc:	08000d52 	stmdaeq	r0, {r1, r4, r6, r8, sl, fp}
     c00:	52500001 	subspl	r0, r0, #1
     c04:	7008000d 	andvc	r0, r8, sp
     c08:	0408000d 	streq	r0, [r8], #-13
     c0c:	5001f300 	andpl	pc, r1, r0, lsl #6
     c10:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     c14:	00000000 	andeq	r0, r0, r0
     c18:	000d7000 	andeq	r7, sp, r0
     c1c:	000d7208 	andeq	r7, sp, r8, lsl #4
     c20:	50000108 	andpl	r0, r0, r8, lsl #2
     c24:	08000d72 	stmdaeq	r0, {r1, r4, r5, r6, r8, sl, fp}
     c28:	08000d90 	stmdaeq	r0, {r4, r7, r8, sl, fp}
     c2c:	01f30004 	mvnseq	r0, r4
     c30:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     c40:	00010000 	andeq	r0, r1, r0
     c44:	00000050 	andeq	r0, r0, r0, asr r0
     c48:	00000000 	andeq	r0, r0, r0
     c4c:	f3000400 	vshl.u8	d0, d0, d0
     c50:	009f5001 	addseq	r5, pc, r1
	...
     c60:	01000000 	mrseq	r0, (UNDEF: 0)
     c64:	00005100 	andeq	r5, r0, r0, lsl #2
     c68:	00000000 	andeq	r0, r0, r0
     c6c:	00040000 	andeq	r0, r4, r0
     c70:	9f5101f3 	svcls	0x005101f3
	...
     c84:	00500001 	subseq	r0, r0, r1
     c88:	00000000 	andeq	r0, r0, r0
     c8c:	04000000 	streq	r0, [r0], #-0
     c90:	5001f300 	andpl	pc, r1, r0, lsl #6
     c94:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     ca4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     cb0:	01f30004 	mvnseq	r0, r4
     cb4:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     cc4:	00010000 	andeq	r0, r1, r0
     cc8:	00000051 	andeq	r0, r0, r1, asr r0
     ccc:	00000000 	andeq	r0, r0, r0
     cd0:	f3000400 	vshl.u8	d0, d0, d0
     cd4:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
     ce4:	01000000 	mrseq	r0, (UNDEF: 0)
     ce8:	00005000 	andeq	r5, r0, r0
     cec:	00000000 	andeq	r0, r0, r0
     cf0:	00040000 	andeq	r0, r4, r0
     cf4:	9f5001f3 	svcls	0x005001f3
	...
     d08:	00510001 	subseq	r0, r1, r1
     d0c:	00000000 	andeq	r0, r0, r0
     d10:	04000000 	streq	r0, [r0], #-0
     d14:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     d18:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     d1c:	00000000 	andeq	r0, r0, r0
     d20:	000d9000 	andeq	r9, sp, r0
     d24:	000d9a08 	andeq	r9, sp, r8, lsl #20
     d28:	50000108 	andpl	r0, r0, r8, lsl #2
     d2c:	08000d9a 	stmdaeq	r0, {r1, r3, r4, r7, r8, sl, fp}
     d30:	08000dac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, fp}
     d34:	01f30004 	mvnseq	r0, r4
     d38:	00009f50 	andeq	r9, r0, r0, asr pc
     d3c:	00000000 	andeq	r0, r0, r0
     d40:	0dac0000 	stceq	0, cr0, [ip]
     d44:	0db60800 	ldceq	8, cr0, [r6]
     d48:	00010800 	andeq	r0, r1, r0, lsl #16
     d4c:	000db650 	andeq	fp, sp, r0, asr r6
     d50:	000dc808 	andeq	ip, sp, r8, lsl #16
     d54:	f3000408 	vshl.u8	d0, d8, d0
     d58:	009f5001 	addseq	r5, pc, r1
     d5c:	00000000 	andeq	r0, r0, r0
     d60:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
     d64:	d208000d 	andle	r0, r8, #13
     d68:	0108000d 	tsteq	r8, sp
     d6c:	0dd25000 	ldcleq	0, cr5, [r2]
     d70:	0de40800 	stcleq	8, cr0, [r4]
     d74:	00040800 	andeq	r0, r4, r0, lsl #16
     d78:	9f5001f3 	svcls	0x005001f3
	...
     d8c:	00510001 	subseq	r0, r1, r1
     d90:	00000000 	andeq	r0, r0, r0
     d94:	04000000 	streq	r0, [r0], #-0
     d98:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     d9c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     da0:	00000000 	andeq	r0, r0, r0
     da4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     db0:	01f30004 	mvnseq	r0, r4
     db4:	00009f51 	andeq	r9, r0, r1, asr pc
	...
     dc4:	00010000 	andeq	r0, r1, r0
     dc8:	00000053 	andeq	r0, r0, r3, asr r0
     dcc:	00000000 	andeq	r0, r0, r0
     dd0:	53000100 	movwpl	r0, #256	; 0x100
	...
     ddc:	00530001 	subseq	r0, r3, r1
     de0:	00000000 	andeq	r0, r0, r0
     de4:	e4000000 	str	r0, [r0], #-0
     de8:	f008000d 			; <UNDEFINED> instruction: 0xf008000d
     dec:	0108000d 	tsteq	r8, sp
     df0:	0df05000 	ldcleq	0, cr5, [r0]
     df4:	0e240800 	cdpeq	8, 2, cr0, cr4, cr0, {0}
     df8:	00040800 	andeq	r0, r4, r0, lsl #16
     dfc:	9f5001f3 	svcls	0x005001f3
	...
     e08:	08000de4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, fp}
     e0c:	08000e12 	stmdaeq	r0, {r1, r4, r9, sl, fp}
     e10:	12510001 	subsne	r0, r1, #1
     e14:	2408000e 	strcs	r0, [r8], #-14
     e18:	0408000e 	streq	r0, [r8], #-14
     e1c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     e20:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     e24:	00000000 	andeq	r0, r0, r0
     e28:	000dfc00 	andeq	pc, sp, r0, lsl #24
     e2c:	000e0408 	andeq	r0, lr, r8, lsl #8
     e30:	53000108 	movwpl	r0, #264	; 0x108
     e34:	08000e04 	stmdaeq	r0, {r2, r9, sl, fp}
     e38:	08000e06 	stmdaeq	r0, {r1, r2, r9, sl, fp}
     e3c:	00710005 	rsbseq	r0, r1, r5
     e40:	069f2535 			; <UNDEFINED> instruction: 0x069f2535
     e44:	0808000e 	stmdaeq	r8, {r1, r2, r3}
     e48:	0108000e 	tsteq	r8, lr
     e4c:	0e105300 	cdpeq	3, 1, cr5, cr0, cr0, {0}
     e50:	0e180800 	cdpeq	8, 1, cr0, cr8, cr0, {0}
     e54:	00010800 	andeq	r0, r1, r0, lsl #16
     e58:	00000053 	andeq	r0, r0, r3, asr r0
	...
     e68:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     e74:	01f30004 	mvnseq	r0, r4
     e78:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     e88:	00010000 	andeq	r0, r1, r0
     e8c:	00000050 	andeq	r0, r0, r0, asr r0
     e90:	00000000 	andeq	r0, r0, r0
     e94:	f3000400 	vshl.u8	d0, d0, d0
     e98:	009f5001 	addseq	r5, pc, r1
	...
     ea8:	01000000 	mrseq	r0, (UNDEF: 0)
     eac:	00005000 	andeq	r5, r0, r0
     eb0:	00000000 	andeq	r0, r0, r0
     eb4:	00040000 	andeq	r0, r4, r0
     eb8:	9f5001f3 	svcls	0x005001f3
	...
     ecc:	00510001 	subseq	r0, r1, r1
     ed0:	00000000 	andeq	r0, r0, r0
     ed4:	04000000 	streq	r0, [r0], #-0
     ed8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     edc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     eec:	52000100 	andpl	r0, r0, #0, 2
	...
     ef8:	01f30004 	mvnseq	r0, r4
     efc:	00009f52 	andeq	r9, r0, r2, asr pc
	...
     f0c:	00010000 	andeq	r0, r1, r0
     f10:	00000050 	andeq	r0, r0, r0, asr r0
     f14:	00000000 	andeq	r0, r0, r0
     f18:	f3000400 	vshl.u8	d0, d0, d0
     f1c:	009f5001 	addseq	r5, pc, r1
	...
     f2c:	01000000 	mrseq	r0, (UNDEF: 0)
     f30:	00005100 	andeq	r5, r0, r0, lsl #2
     f34:	00000000 	andeq	r0, r0, r0
     f38:	00040000 	andeq	r0, r4, r0
     f3c:	9f5101f3 	svcls	0x005101f3
	...
     f50:	00500001 	subseq	r0, r0, r1
     f54:	00000000 	andeq	r0, r0, r0
     f58:	04000000 	streq	r0, [r0], #-0
     f5c:	5001f300 	andpl	pc, r1, r0, lsl #6
     f60:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     f70:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     f7c:	01f30004 	mvnseq	r0, r4
     f80:	00009f51 	andeq	r9, r0, r1, asr pc
	...
     f90:	00010000 	andeq	r0, r1, r0
     f94:	00000050 	andeq	r0, r0, r0, asr r0
     f98:	00000000 	andeq	r0, r0, r0
     f9c:	f3000400 	vshl.u8	d0, d0, d0
     fa0:	009f5001 	addseq	r5, pc, r1
	...
     fb0:	01000000 	mrseq	r0, (UNDEF: 0)
     fb4:	00005000 	andeq	r5, r0, r0
     fb8:	00000000 	andeq	r0, r0, r0
     fbc:	00040000 	andeq	r0, r4, r0
     fc0:	9f5001f3 	svcls	0x005001f3
	...
     fd4:	00500001 	subseq	r0, r0, r1
     fd8:	00000000 	andeq	r0, r0, r0
     fdc:	04000000 	streq	r0, [r0], #-0
     fe0:	5001f300 	andpl	pc, r1, r0, lsl #6
     fe4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     fe8:	00000000 	andeq	r0, r0, r0
     fec:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     ff8:	01f30004 	mvnseq	r0, r4
     ffc:	00009f50 	andeq	r9, r0, r0, asr pc
    1000:	00000000 	andeq	r0, r0, r0
    1004:	00010000 	andeq	r0, r1, r0
    1008:	00000050 	andeq	r0, r0, r0, asr r0
	...
    1018:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1024:	01f30004 	mvnseq	r0, r4
    1028:	00009f51 	andeq	r9, r0, r1, asr pc
    102c:	00000000 	andeq	r0, r0, r0
    1030:	00010000 	andeq	r0, r1, r0
    1034:	00000051 	andeq	r0, r0, r1, asr r0
    1038:	00000000 	andeq	r0, r0, r0
    103c:	f3000400 	vshl.u8	d0, d0, d0
    1040:	009f5101 	addseq	r5, pc, r1, lsl #2
    1044:	00000000 	andeq	r0, r0, r0
    1048:	01000000 	mrseq	r0, (UNDEF: 0)
    104c:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    105c:	00010000 	andeq	r0, r1, r0
    1060:	00000052 	andeq	r0, r0, r2, asr r0
    1064:	00000000 	andeq	r0, r0, r0
    1068:	f3000400 	vshl.u8	d0, d0, d0
    106c:	009f5201 	addseq	r5, pc, r1, lsl #4
    1070:	00000000 	andeq	r0, r0, r0
    1074:	01000000 	mrseq	r0, (UNDEF: 0)
    1078:	00005200 	andeq	r5, r0, r0, lsl #4
	...
    1088:	00010000 	andeq	r0, r1, r0
    108c:	00000051 	andeq	r0, r0, r1, asr r0
    1090:	00000000 	andeq	r0, r0, r0
    1094:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    10a8:	00530001 	subseq	r0, r3, r1
    10ac:	00000000 	andeq	r0, r0, r0
    10b0:	05000000 	streq	r0, [r0, #-0]
    10b4:	35007200 	strcc	r7, [r0, #-512]	; 0x200
    10b8:	00009f25 	andeq	r9, r0, r5, lsr #30
    10bc:	00000000 	andeq	r0, r0, r0
    10c0:	00010000 	andeq	r0, r1, r0
    10c4:	00000053 	andeq	r0, r0, r3, asr r0
    10c8:	00000000 	andeq	r0, r0, r0
    10cc:	53000100 	movwpl	r0, #256	; 0x100
	...
    10e0:	00530001 	subseq	r0, r3, r1
    10e4:	00000000 	andeq	r0, r0, r0
    10e8:	01000000 	mrseq	r0, (UNDEF: 0)
    10ec:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    10fc:	00010000 	andeq	r0, r1, r0
    1100:	00000051 	andeq	r0, r0, r1, asr r0
    1104:	00000000 	andeq	r0, r0, r0
    1108:	72000500 	andvc	r0, r0, #0, 10
    110c:	9f253500 	svcls	0x00253500
	...
    1118:	00510001 	subseq	r0, r1, r1
    111c:	00000000 	andeq	r0, r0, r0
    1120:	01000000 	mrseq	r0, (UNDEF: 0)
    1124:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    1134:	00010000 	andeq	r0, r1, r0
    1138:	00000050 	andeq	r0, r0, r0, asr r0
    113c:	00000000 	andeq	r0, r0, r0
    1140:	f3000400 	vshl.u8	d0, d0, d0
    1144:	009f5001 	addseq	r5, pc, r1
    1148:	00000000 	andeq	r0, r0, r0
    114c:	01000000 	mrseq	r0, (UNDEF: 0)
    1150:	00005000 	andeq	r5, r0, r0
    1154:	00000000 	andeq	r0, r0, r0
    1158:	00040000 	andeq	r0, r4, r0
    115c:	9f5001f3 	svcls	0x005001f3
	...
    1170:	00510001 	subseq	r0, r1, r1
    1174:	00000000 	andeq	r0, r0, r0
    1178:	04000000 	streq	r0, [r0], #-0
    117c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1180:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1184:	00000000 	andeq	r0, r0, r0
    1188:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    119c:	00520001 	subseq	r0, r2, r1
    11a0:	00000000 	andeq	r0, r0, r0
    11a4:	04000000 	streq	r0, [r0], #-0
    11a8:	5201f300 	andpl	pc, r1, #0, 6
    11ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    11b0:	00000000 	andeq	r0, r0, r0
    11b4:	52000100 	andpl	r0, r0, #0, 2
	...
    11c8:	00510001 	subseq	r0, r1, r1
	...
    11d8:	01000000 	mrseq	r0, (UNDEF: 0)
    11dc:	00005300 	andeq	r5, r0, r0, lsl #6
    11e0:	00000000 	andeq	r0, r0, r0
    11e4:	00050000 	andeq	r0, r5, r0
    11e8:	25350072 	ldrcs	r0, [r5, #-114]!	; 0x72
    11ec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    11f0:	00000000 	andeq	r0, r0, r0
    11f4:	53000100 	movwpl	r0, #256	; 0x100
	...
    1200:	00530001 	subseq	r0, r3, r1
	...
    1210:	01000000 	mrseq	r0, (UNDEF: 0)
    1214:	00005000 	andeq	r5, r0, r0
    1218:	00000000 	andeq	r0, r0, r0
    121c:	00040000 	andeq	r0, r4, r0
    1220:	9f5001f3 	svcls	0x005001f3
	...
    122c:	00500001 	subseq	r0, r0, r1
    1230:	00000000 	andeq	r0, r0, r0
    1234:	04000000 	streq	r0, [r0], #-0
    1238:	5001f300 	andpl	pc, r1, r0, lsl #6
    123c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    124c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1258:	01f30004 	mvnseq	r0, r4
    125c:	00009f51 	andeq	r9, r0, r1, asr pc
    1260:	00000000 	andeq	r0, r0, r0
    1264:	00010000 	andeq	r0, r1, r0
    1268:	00000051 	andeq	r0, r0, r1, asr r0
	...
    1278:	52000100 	andpl	r0, r0, #0, 2
	...
    1284:	01f30004 	mvnseq	r0, r4
    1288:	00009f52 	andeq	r9, r0, r2, asr pc
    128c:	00000000 	andeq	r0, r0, r0
    1290:	00010000 	andeq	r0, r1, r0
    1294:	00000052 	andeq	r0, r0, r2, asr r0
	...
    12a4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    12b8:	00530001 	subseq	r0, r3, r1
    12bc:	00000000 	andeq	r0, r0, r0
    12c0:	05000000 	streq	r0, [r0, #-0]
    12c4:	35007200 	strcc	r7, [r0, #-512]	; 0x200
    12c8:	00009f25 	andeq	r9, r0, r5, lsr #30
    12cc:	00000000 	andeq	r0, r0, r0
    12d0:	00010000 	andeq	r0, r1, r0
    12d4:	00000053 	andeq	r0, r0, r3, asr r0
    12d8:	00000000 	andeq	r0, r0, r0
    12dc:	53000100 	movwpl	r0, #256	; 0x100
	...
    12f0:	00500001 	subseq	r0, r0, r1
    12f4:	00000000 	andeq	r0, r0, r0
    12f8:	04000000 	streq	r0, [r0], #-0
    12fc:	5001f300 	andpl	pc, r1, r0, lsl #6
    1300:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    1310:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    131c:	01f30004 	mvnseq	r0, r4
    1320:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    1330:	00010000 	andeq	r0, r1, r0
    1334:	00000050 	andeq	r0, r0, r0, asr r0
    1338:	00000000 	andeq	r0, r0, r0
    133c:	f3000400 	vshl.u8	d0, d0, d0
    1340:	009f5001 	addseq	r5, pc, r1
	...
    1350:	01000000 	mrseq	r0, (UNDEF: 0)
    1354:	00005000 	andeq	r5, r0, r0
    1358:	00000000 	andeq	r0, r0, r0
    135c:	00040000 	andeq	r0, r4, r0
    1360:	9f5001f3 	svcls	0x005001f3
	...
    136c:	00500001 	subseq	r0, r0, r1
    1370:	00000000 	andeq	r0, r0, r0
    1374:	04000000 	streq	r0, [r0], #-0
    1378:	5001f300 	andpl	pc, r1, r0, lsl #6
    137c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    138c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1398:	01f30004 	mvnseq	r0, r4
    139c:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    13ac:	000e0000 	andeq	r0, lr, r0
    13b0:	ff080070 			; <UNDEFINED> instruction: 0xff080070
    13b4:	7124381a 	teqvc	r4, sl, lsl r8
    13b8:	1aff0800 	bne	fffc33c0 <BootRAM+0xef33b61>
    13bc:	00009f21 	andeq	r9, r0, r1, lsr #30
    13c0:	00000000 	andeq	r0, r0, r0
    13c4:	000f0000 	andeq	r0, pc, r0
    13c8:	085001f3 	ldmdaeq	r0, {r0, r1, r4, r5, r6, r7, r8}^
    13cc:	24381aff 	ldrtcs	r1, [r8], #-2815	; 0xaff
    13d0:	ff080071 			; <UNDEFINED> instruction: 0xff080071
    13d4:	009f211a 	addseq	r2, pc, sl, lsl r1	; <UNPREDICTABLE>
	...
    13e4:	01000000 	mrseq	r0, (UNDEF: 0)
    13e8:	00005000 	andeq	r5, r0, r0
    13ec:	00000000 	andeq	r0, r0, r0
    13f0:	00040000 	andeq	r0, r4, r0
    13f4:	9f5001f3 	svcls	0x005001f3
	...
    1408:	00500001 	subseq	r0, r0, r1
	...
    1418:	0d000000 	stceq	0, cr0, [r0, #-0]
    141c:	38007000 	stmdacc	r0, {ip, sp, lr}
    1420:	08007025 	stmdaeq	r0, {r0, r2, r5, ip, sp, lr}
    1424:	24381aff 	ldrtcs	r1, [r8], #-2815	; 0xaff
    1428:	00009f21 	andeq	r9, r0, r1, lsr #30
    142c:	00000000 	andeq	r0, r0, r0
    1430:	0e260000 	cdpeq	0, 2, cr0, cr6, cr0, {0}
    1434:	0e8c0800 	cdpeq	8, 8, cr0, cr12, cr0, {0}
    1438:	00020800 	andeq	r0, r2, r0, lsl #16
    143c:	0e8c9f30 	mcreq	15, 4, r9, cr12, cr0, {1}
    1440:	0e900800 	cdpeq	8, 9, cr0, cr0, cr0, {0}
    1444:	00070800 	andeq	r0, r7, r0, lsl #16
    1448:	ff0a0073 			; <UNDEFINED> instruction: 0xff0a0073
    144c:	a09f1aff 			; <UNDEFINED> instruction: 0xa09f1aff
    1450:	aa08000e 	bge	201490 <__Stack_Size+0x201090>
    1454:	0708000e 	streq	r0, [r8, -lr]
    1458:	0a007300 	beq	1e060 <__Stack_Size+0x1dc60>
    145c:	9f1affff 	svcls	0x001affff
    1460:	08000eb4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl, fp}
    1464:	08000ebe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9, sl, fp}
    1468:	00730007 	rsbseq	r0, r3, r7
    146c:	1affff0a 	bne	109c <__Stack_Size+0xc9c>
    1470:	000f0a9f 	muleq	pc, pc, sl	; <UNPREDICTABLE>
    1474:	000f1608 	andeq	r1, pc, r8, lsl #12
    1478:	30000208 	andcc	r0, r0, r8, lsl #4
    147c:	000f169f 	muleq	pc, pc, r6	; <UNPREDICTABLE>
    1480:	000f5608 	andeq	r5, pc, r8, lsl #12
    1484:	75000708 	strvc	r0, [r0, #-1800]	; 0x708
    1488:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    148c:	0f569f1a 	svceq	0x00569f1a
    1490:	0f780800 	svceq	0x00780800
    1494:	00020800 	andeq	r0, r2, r0, lsl #16
    1498:	00009f30 	andeq	r9, r0, r0, lsr pc
    149c:	00000000 	andeq	r0, r0, r0
    14a0:	0e6c0000 	cdpeq	0, 6, cr0, cr12, cr0, {0}
    14a4:	0e700800 	cdpeq	8, 7, cr0, cr0, cr0, {0}
    14a8:	00070800 	andeq	r0, r7, r0, lsl #16
    14ac:	000a0072 	andeq	r0, sl, r2, ror r0
    14b0:	709f2720 	addsvc	r2, pc, r0, lsr #14
    14b4:	7408000e 	strvc	r0, [r8], #-14
    14b8:	0b08000e 	bleq	2014f8 <__Stack_Size+0x2010f8>
    14bc:	0a007200 	beq	1dcc4 <__Stack_Size+0x1d8c4>
    14c0:	0a272000 	beq	9c94c8 <__Stack_Size+0x9c90c8>
    14c4:	9f272000 	svcls	0x00272000
    14c8:	08000e74 	stmdaeq	r0, {r2, r4, r5, r6, r9, sl, fp}
    14cc:	08000e84 	stmdaeq	r0, {r2, r7, r9, sl, fp}
    14d0:	0074000c 	rsbseq	r0, r4, ip
    14d4:	20000a06 	andcs	r0, r0, r6, lsl #20
    14d8:	20000a27 	andcs	r0, r0, r7, lsr #20
    14dc:	00009f27 	andeq	r9, r0, r7, lsr #30
    14e0:	00000000 	andeq	r0, r0, r0
    14e4:	0e7e0000 	cdpeq	0, 7, cr0, cr14, cr0, {0}
    14e8:	0e820800 	cdpeq	8, 8, cr0, cr2, cr0, {0}
    14ec:	00060800 	andeq	r0, r6, r0, lsl #16
    14f0:	20080072 	andcs	r0, r8, r2, ror r0
    14f4:	0e829f27 	cdpeq	15, 8, cr9, cr2, cr7, {1}
    14f8:	0e920800 	cdpeq	8, 9, cr0, cr2, cr0, {0}
    14fc:	00090800 	andeq	r0, r9, r0, lsl #16
    1500:	20080072 	andcs	r0, r8, r2, ror r0
    1504:	27200827 	strcs	r0, [r0, -r7, lsr #16]!
    1508:	000e929f 	muleq	lr, pc, r2	; <UNPREDICTABLE>
    150c:	000e9a08 	andeq	r9, lr, r8, lsl #20
    1510:	74000a08 	strvc	r0, [r0], #-2568	; 0xa08
    1514:	20080600 	andcs	r0, r8, r0, lsl #12
    1518:	27200827 	strcs	r0, [r0, -r7, lsr #16]!
    151c:	000ea09f 	muleq	lr, pc, r0	; <UNPREDICTABLE>
    1520:	000ea208 	andeq	sl, lr, r8, lsl #4
    1524:	72000908 	andvc	r0, r0, #8, 18	; 0x20000
    1528:	27200800 	strcs	r0, [r0, -r0, lsl #16]!
    152c:	9f272008 	svcls	0x00272008
    1530:	08000ea2 	stmdaeq	r0, {r1, r5, r7, r9, sl, fp}
    1534:	08000eae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r9, sl, fp}
    1538:	0074000a 	rsbseq	r0, r4, sl
    153c:	27200806 	strcs	r0, [r0, -r6, lsl #16]!
    1540:	9f272008 	svcls	0x00272008
    1544:	08000eb4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl, fp}
    1548:	08000ec2 	stmdaeq	r0, {r1, r6, r7, r9, sl, fp}
    154c:	0074000a 	rsbseq	r0, r4, sl
    1550:	27200806 	strcs	r0, [r0, -r6, lsl #16]!
    1554:	9f272008 	svcls	0x00272008
	...
    1560:	08000ed4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, fp}
    1564:	08000eea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r9, sl, fp}
    1568:	ea530001 	b	14c1574 <__Stack_Size+0x14c1174>
    156c:	0808000e 	stmdaeq	r8, {r1, r2, r3}
    1570:	0408000f 	streq	r0, [r8], #-15
    1574:	06007200 	streq	r7, [r0], -r0, lsl #4
    1578:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    157c:	00000000 	andeq	r0, r0, r0
    1580:	000ef600 	andeq	pc, lr, r0, lsl #12
    1584:	000f0a08 	andeq	r0, pc, r8, lsl #20
    1588:	53000108 	movwpl	r0, #264	; 0x108
	...
    159c:	9f300002 	svcls	0x00300002
	...
    15a8:	00710007 	rsbseq	r0, r1, r7
    15ac:	1affff0a 	bne	11dc <__Stack_Size+0xddc>
    15b0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    15b4:	00000000 	andeq	r0, r0, r0
    15b8:	71000700 	tstvc	r0, r0, lsl #14
    15bc:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    15c0:	00009f1a 	andeq	r9, r0, sl, lsl pc
    15c4:	00000000 	andeq	r0, r0, r0
    15c8:	00020000 	andeq	r0, r2, r0
    15cc:	00009f30 	andeq	r9, r0, r0, lsr pc
    15d0:	00000000 	andeq	r0, r0, r0
    15d4:	0fb00000 	svceq	0x00b00000
    15d8:	0fc50800 	svceq	0x00c50800
    15dc:	00010800 	andeq	r0, r1, r0, lsl #16
    15e0:	000fc550 	andeq	ip, pc, r0, asr r5	; <UNPREDICTABLE>
    15e4:	000fd408 	andeq	sp, pc, r8, lsl #8
    15e8:	f3000408 	vshl.u8	d0, d8, d0
    15ec:	009f5001 	addseq	r5, pc, r1
    15f0:	00000000 	andeq	r0, r0, r0
    15f4:	d4000000 	strle	r0, [r0], #-0
    15f8:	e908000f 	stmdb	r8, {r0, r1, r2, r3}
    15fc:	0108000f 	tsteq	r8, pc
    1600:	0fe95000 	svceq	0x00e95000
    1604:	0ff80800 	svceq	0x00f80800
    1608:	00040800 	andeq	r0, r4, r0, lsl #16
    160c:	9f5001f3 	svcls	0x005001f3
	...
    1618:	08000ff8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl, fp}
    161c:	0800100c 	stmdaeq	r0, {r2, r3, ip}
    1620:	0c500001 	mrrceq	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    1624:	88080010 	stmdahi	r8, {r4}
    1628:	04080010 	streq	r0, [r8], #-16
    162c:	5001f300 	andpl	pc, r1, r0, lsl #6
    1630:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1634:	00000000 	andeq	r0, r0, r0
    1638:	00101a00 	andseq	r1, r0, r0, lsl #20
    163c:	00101c08 	andseq	r1, r0, r8, lsl #24
    1640:	71000208 	tstvc	r0, r8, lsl #4
    1644:	00000009 	andeq	r0, r0, r9
    1648:	00000000 	andeq	r0, r0, r0
    164c:	00104200 	andseq	r4, r0, r0, lsl #4
    1650:	00104408 	andseq	r4, r0, r8, lsl #8
    1654:	52000108 	andpl	r0, r0, #8, 2
    1658:	08001044 	stmdaeq	r0, {r2, r6, ip}
    165c:	0800105e 	stmdaeq	r0, {r1, r2, r3, r4, r6, ip}
    1660:	00710005 	rsbseq	r0, r1, r5
    1664:	629f1a3f 	addsvs	r1, pc, #258048	; 0x3f000
    1668:	6c080010 	stcvs	0, cr0, [r8], {16}
    166c:	05080010 	streq	r0, [r8, #-16]
    1670:	3f007100 	svccc	0x00007100
    1674:	00009f1a 	andeq	r9, r0, sl, lsl pc
    1678:	00000000 	andeq	r0, r0, r0
    167c:	10900000 	addsne	r0, r0, r0
    1680:	11160800 	tstne	r6, r0, lsl #16
    1684:	00030800 	andeq	r0, r3, r0, lsl #16
    1688:	009f1074 	addseq	r1, pc, r4, ror r0	; <UNPREDICTABLE>
    168c:	00000000 	andeq	r0, r0, r0
    1690:	94000000 	strls	r0, [r0], #-0
    1694:	be080010 	mcrlt	0, 0, r0, cr8, cr0, {0}
    1698:	01080010 	tsteq	r8, r0, lsl r0
    169c:	10be5300 	adcsne	r5, lr, r0, lsl #6
    16a0:	10c40800 	sbcne	r0, r4, r0, lsl #16
    16a4:	00090800 	andeq	r0, r9, r0, lsl #16
    16a8:	02941074 	addseq	r1, r4, #116	; 0x74
    16ac:	1affff0a 	bne	12dc <__Stack_Size+0xedc>
    16b0:	0010c49f 	mulseq	r0, pc, r4	; <UNPREDICTABLE>
    16b4:	0010d808 	andseq	sp, r0, r8, lsl #16
    16b8:	53000108 	movwpl	r0, #264	; 0x108
    16bc:	080010d8 	stmdaeq	r0, {r3, r4, r6, r7, ip}
    16c0:	080010d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, ip}
    16c4:	10740009 	rsbsne	r0, r4, r9
    16c8:	ff0a0294 			; <UNDEFINED> instruction: 0xff0a0294
    16cc:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    16d0:	00000000 	andeq	r0, r0, r0
    16d4:	96000000 	strls	r0, [r0], -r0
    16d8:	b8080010 	stmdalt	r8, {r4}
    16dc:	06080010 			; <UNDEFINED> instruction: 0x06080010
    16e0:	08007600 	stmdaeq	r0, {r9, sl, ip, sp, lr}
    16e4:	b89f1aff 	ldmlt	pc, {r0, r1, r2, r3, r4, r5, r6, r7, r9, fp, ip}	; <UNPREDICTABLE>
    16e8:	bc080010 	stclt	0, cr0, [r8], {16}
    16ec:	02080010 	andeq	r0, r8, #16
    16f0:	bc9f3400 	cfldrslt	mvf3, [pc], {0}
    16f4:	c4080010 	strgt	r0, [r8], #-16
    16f8:	02080010 	andeq	r0, r8, #16
    16fc:	c49f3700 	ldrgt	r3, [pc], #1792	; 1704 <__Stack_Size+0x1304>
    1700:	ce080010 	mcrgt	0, 0, r0, cr8, cr0, {0}
    1704:	06080010 			; <UNDEFINED> instruction: 0x06080010
    1708:	08007600 	stmdaeq	r0, {r9, sl, ip, sp, lr}
    170c:	ce9f1aff 	mrcgt	10, 4, r1, cr15, cr15, {7}
    1710:	16080010 			; <UNDEFINED> instruction: 0x16080010
    1714:	01080011 	tsteq	r8, r1, lsl r0
    1718:	00005600 	andeq	r5, r0, r0, lsl #12
    171c:	00000000 	andeq	r0, r0, r0
    1720:	10dc0000 	sbcsne	r0, ip, r0
    1724:	10de0800 	sbcsne	r0, lr, r0, lsl #16
    1728:	00010800 	andeq	r0, r1, r0, lsl #16
    172c:	0010de50 	andseq	sp, r0, r0, asr lr
    1730:	00110c08 	andseq	r0, r1, r8, lsl #24
    1734:	59000108 	stmdbpl	r0, {r3, r8}
	...
    1740:	080010c6 	stmdaeq	r0, {r1, r2, r6, r7, ip}
    1744:	080010ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, ip}
    1748:	ce550001 	cdpgt	0, 5, cr0, cr5, cr1, {0}
    174c:	d4080010 	strle	r0, [r8], #-16
    1750:	16080010 			; <UNDEFINED> instruction: 0x16080010
    1754:	12007500 	andne	r7, r0, #0, 10
    1758:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    175c:	14160073 	ldrne	r0, [r6], #-115	; 0x73
    1760:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    1764:	0001282d 	andeq	r2, r1, sp, lsr #16
    1768:	d49f1316 	ldrle	r1, [pc], #790	; 1770 <__Stack_Size+0x1370>
    176c:	02080010 	andeq	r0, r8, #16
    1770:	01080011 	tsteq	r8, r1, lsl r0
    1774:	00005500 	andeq	r5, r0, r0, lsl #10
    1778:	00000000 	andeq	r0, r0, r0
    177c:	117a0000 	cmnne	sl, r0
    1780:	11910800 	orrsne	r0, r1, r0, lsl #16
    1784:	00010800 	andeq	r0, r1, r0, lsl #16
    1788:	0011a050 	andseq	sl, r1, r0, asr r0
    178c:	0011a208 	andseq	sl, r1, r8, lsl #4
    1790:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    179c:	080011b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, ip}
    17a0:	080011bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, ip}
    17a4:	00700006 	rsbseq	r0, r0, r6
    17a8:	9f1a7f08 	svcls	0x001a7f08
    17ac:	080011bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, ip}
    17b0:	080011e0 	stmdaeq	r0, {r5, r6, r7, r8, ip}
    17b4:	e0500001 	subs	r0, r0, r1
    17b8:	06080011 			; <UNDEFINED> instruction: 0x06080011
    17bc:	0b080012 	bleq	20180c <__Stack_Size+0x20140c>
    17c0:	94007300 	strls	r7, [r0], #-768	; 0x300
    17c4:	1a7f0801 	bne	1fc37d0 <__Stack_Size+0x1fc33d0>
    17c8:	9f1aff08 	svcls	0x001aff08
	...
    17d4:	080011f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, ip}
    17d8:	08001225 	stmdaeq	r0, {r0, r2, r5, r9, ip}
    17dc:	30510001 	subscc	r0, r1, r1
    17e0:	42080012 	andmi	r0, r8, #18
    17e4:	01080012 	tsteq	r8, r2, lsl r0
    17e8:	12485100 	subne	r5, r8, #0, 2
    17ec:	124b0800 	subne	r0, fp, #0, 16
    17f0:	00010800 	andeq	r0, r1, r0, lsl #16
    17f4:	00000051 	andeq	r0, r0, r1, asr r0
    17f8:	00000000 	andeq	r0, r0, r0
    17fc:	0011e000 	andseq	lr, r1, r0
    1800:	00122208 	andseq	r2, r2, r8, lsl #4
    1804:	50000108 	andpl	r0, r0, r8, lsl #2
    1808:	08001230 	stmdaeq	r0, {r4, r5, r9, ip}
    180c:	08001245 	stmdaeq	r0, {r0, r2, r6, r9, ip}
    1810:	48500001 	ldmdami	r0, {r0}^
    1814:	4b080012 	blmi	201864 <__Stack_Size+0x201464>
    1818:	01080012 	tsteq	r8, r2, lsl r0
    181c:	00005000 	andeq	r5, r0, r0
    1820:	00000000 	andeq	r0, r0, r0
    1824:	11da0000 	bicsne	r0, sl, r0
    1828:	12120800 	andsne	r0, r2, #0, 16
    182c:	00060800 	andeq	r0, r6, r0, lsl #16
    1830:	ff080072 			; <UNDEFINED> instruction: 0xff080072
    1834:	00009f1a 	andeq	r9, r0, sl, lsl pc
    1838:	00000000 	andeq	r0, r0, r0
    183c:	12580000 	subsne	r0, r8, #0
    1840:	125c0800 	subsne	r0, ip, #0, 16
    1844:	00070800 	andeq	r0, r7, r0, lsl #16
    1848:	000a0073 	andeq	r0, sl, r3, ror r0
    184c:	5c9f2730 	ldcpl	7, cr2, [pc], {48}	; 0x30
    1850:	5e080012 	mcrpl	0, 0, r0, cr8, cr2, {0}
    1854:	0b080012 	bleq	2018a4 <__Stack_Size+0x2014a4>
    1858:	0a007300 	beq	1e460 <__Stack_Size+0x1e060>
    185c:	0a273000 	beq	9cd864 <__Stack_Size+0x9cd464>
    1860:	9f273000 	svcls	0x00273000
	...
    186c:	0800128c 	stmdaeq	r0, {r2, r3, r7, r9, ip}
    1870:	080012c6 	stmdaeq	r0, {r1, r2, r6, r7, r9, ip}
    1874:	00720006 	rsbseq	r0, r2, r6
    1878:	9f1aff08 	svcls	0x001aff08
    187c:	080012f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, ip}
    1880:	08001304 	stmdaeq	r0, {r2, r8, r9, ip}
    1884:	00720006 	rsbseq	r0, r2, r6
    1888:	9f1aff08 	svcls	0x001aff08
	...
    1894:	08001290 	stmdaeq	r0, {r4, r7, r9, ip}
    1898:	080012b0 	stmdaeq	r0, {r4, r5, r7, r9, ip}
    189c:	b0540001 	subslt	r0, r4, r1
    18a0:	c6080012 			; <UNDEFINED> instruction: 0xc6080012
    18a4:	07080012 	smladeq	r8, r2, r0, r0
    18a8:	0b007200 	bleq	1e0b0 <__Stack_Size+0x1dcb0>
    18ac:	9f1aff7f 	svcls	0x001aff7f
    18b0:	080012f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, ip}
    18b4:	08001304 	stmdaeq	r0, {r2, r8, r9, ip}
    18b8:	00720007 	rsbseq	r0, r2, r7
    18bc:	1aff7f0b 	bne	fffe14f0 <BootRAM+0xef51c91>
    18c0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    18c4:	00000000 	andeq	r0, r0, r0
    18c8:	0012a600 	andseq	sl, r2, r0, lsl #12
    18cc:	0012ef08 	andseq	lr, r2, r8, lsl #30
    18d0:	50000108 	andpl	r0, r0, r8, lsl #2
    18d4:	080012f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, ip}
    18d8:	080012f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r9, ip}
    18dc:	00500001 	subseq	r0, r0, r1
    18e0:	00000000 	andeq	r0, r0, r0
    18e4:	d2000000 	andle	r0, r0, #0
    18e8:	d6080012 			; <UNDEFINED> instruction: 0xd6080012
    18ec:	05080012 	streq	r0, [r8, #-18]
    18f0:	40007200 	andmi	r7, r0, r0, lsl #4
    18f4:	12d69f27 	sbcsne	r9, r6, #39, 30	; 0x9c
    18f8:	12d80800 	sbcsne	r0, r8, #0, 16
    18fc:	00070800 	andeq	r0, r7, r0, lsl #16
    1900:	27400072 	smlsldxcs	r0, r0, r2, r0	; <UNPREDICTABLE>
    1904:	009f2740 	addseq	r2, pc, r0, asr #14
    1908:	00000000 	andeq	r0, r0, r0
    190c:	e2000000 	and	r0, r0, #0
    1910:	e6080012 			; <UNDEFINED> instruction: 0xe6080012
    1914:	07080012 	smladeq	r8, r2, r0, r0
    1918:	0a007200 	beq	1e120 <__Stack_Size+0x1dd20>
    191c:	9f271000 	svcls	0x00271000
	...
    1928:	08001328 	stmdaeq	r0, {r3, r5, r8, r9, ip}
    192c:	0800133a 	stmdaeq	r0, {r1, r3, r4, r5, r8, r9, ip}
    1930:	3a500001 	bcc	140193c <__Stack_Size+0x140153c>
    1934:	44080013 	strmi	r0, [r8], #-19
    1938:	04080013 	streq	r0, [r8], #-19
    193c:	5001f300 	andpl	pc, r1, r0, lsl #6
    1940:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1944:	00000000 	andeq	r0, r0, r0
    1948:	00132800 	andseq	r2, r3, r0, lsl #16
    194c:	00133208 	andseq	r3, r3, r8, lsl #4
    1950:	51000108 	tstpl	r0, r8, lsl #2
    1954:	08001332 	stmdaeq	r0, {r1, r4, r5, r8, r9, ip}
    1958:	08001338 	stmdaeq	r0, {r3, r4, r5, r8, r9, ip}
    195c:	01f30004 	mvnseq	r0, r4
    1960:	13389f51 	teqne	r8, #324	; 0x144
    1964:	13440800 	movtne	r0, #18432	; 0x4800
    1968:	00010800 	andeq	r0, r1, r0, lsl #16
    196c:	00000051 	andeq	r0, r0, r1, asr r0
    1970:	00000000 	andeq	r0, r0, r0
    1974:	00132e00 	andseq	r2, r3, r0, lsl #28
    1978:	00133408 	andseq	r3, r3, r8, lsl #8
    197c:	53000108 	movwpl	r0, #264	; 0x108
    1980:	08001334 	stmdaeq	r0, {r2, r4, r5, r8, r9, ip}
    1984:	08001338 	stmdaeq	r0, {r3, r4, r5, r8, r9, ip}
    1988:	12720009 	rsbsne	r0, r2, #9
    198c:	ff0a0294 			; <UNDEFINED> instruction: 0xff0a0294
    1990:	389f1aff 	ldmcc	pc, {r0, r1, r2, r3, r4, r5, r6, r7, r9, fp, ip}	; <UNPREDICTABLE>
    1994:	44080013 	strmi	r0, [r8], #-19
    1998:	01080013 	tsteq	r8, r3, lsl r0
    199c:	00005300 	andeq	r5, r0, r0, lsl #6
    19a0:	00000000 	andeq	r0, r0, r0
    19a4:	13960000 	orrsne	r0, r6, #0
    19a8:	13a00800 	movne	r0, #0, 16
    19ac:	00110800 	andseq	r0, r1, r0, lsl #16
    19b0:	ff0a0072 			; <UNDEFINED> instruction: 0xff0a0072
    19b4:	24311aff 	ldrtcs	r1, [r1], #-2815	; 0xaff
    19b8:	81c08023 	bichi	r8, r0, r3, lsr #32
    19bc:	939f0480 	orrsls	r0, pc, #128, 8	; 0x80000000
    19c0:	00000004 	andeq	r0, r0, r4
    19c4:	00000000 	andeq	r0, r0, r0
    19c8:	0013ca00 	andseq	ip, r3, r0, lsl #20
    19cc:	0013da08 	andseq	sp, r3, r8, lsl #20
    19d0:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
    19d4:	0013da9f 	mulseq	r3, pc, sl	; <UNPREDICTABLE>
    19d8:	0013dc08 	andseq	sp, r3, r8, lsl #24
    19dc:	50000108 	andpl	r0, r0, r8, lsl #2
    19e0:	080013dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, ip}
    19e4:	080013e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, ip}
    19e8:	9f320002 	svcls	0x00320002
    19ec:	080013ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, ip}
    19f0:	0800140a 	stmdaeq	r0, {r1, r3, sl, ip}
    19f4:	9f320002 	svcls	0x00320002
    19f8:	08001414 	stmdaeq	r0, {r2, r4, sl, ip}
    19fc:	0800141a 	stmdaeq	r0, {r1, r3, r4, sl, ip}
    1a00:	1a500001 	bne	1401a0c <__Stack_Size+0x140160c>
    1a04:	2a080014 	bcs	201a5c <__Stack_Size+0x20165c>
    1a08:	02080014 	andeq	r0, r8, #20
    1a0c:	2a9f3200 	bcs	fe7ce214 <BootRAM+0xd73e9b5>
    1a10:	2c080014 	stccs	0, cr0, [r8], {20}
    1a14:	01080014 	tsteq	r8, r4, lsl r0
    1a18:	142c5000 	strtne	r5, [ip], #-0
    1a1c:	14460800 	strbne	r0, [r6], #-2048	; 0x800
    1a20:	00020800 	andeq	r0, r2, r0, lsl #16
    1a24:	14469f32 	strbne	r9, [r6], #-3890	; 0xf32
    1a28:	14480800 	strbne	r0, [r8], #-2048	; 0x800
    1a2c:	00010800 	andeq	r0, r1, r0, lsl #16
    1a30:	00144850 	andseq	r4, r4, r0, asr r8
    1a34:	00145408 	andseq	r5, r4, r8, lsl #8
    1a38:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
    1a3c:	0014549f 	mulseq	r4, pc, r4	; <UNPREDICTABLE>
    1a40:	00145608 	andseq	r5, r4, r8, lsl #12
    1a44:	50000108 	andpl	r0, r0, r8, lsl #2
    1a48:	08001456 	stmdaeq	r0, {r1, r2, r4, r6, sl, ip}
    1a4c:	08001466 	stmdaeq	r0, {r1, r2, r5, r6, sl, ip}
    1a50:	9f320002 	svcls	0x00320002
    1a54:	08001466 	stmdaeq	r0, {r1, r2, r5, r6, sl, ip}
    1a58:	0800146e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, ip}
    1a5c:	86500001 	ldrbhi	r0, [r0], -r1
    1a60:	88080014 	stmdahi	r8, {r2, r4}
    1a64:	01080014 	tsteq	r8, r4, lsl r0
    1a68:	00005000 	andeq	r5, r0, r0
    1a6c:	00000000 	andeq	r0, r0, r0
    1a70:	13ca0000 	bicne	r0, sl, #0
    1a74:	148e0800 	strne	r0, [lr], #2048	; 0x800
    1a78:	00010800 	andeq	r0, r1, r0, lsl #16
    1a7c:	00000054 	andeq	r0, r0, r4, asr r0
    1a80:	00000000 	andeq	r0, r0, r0
    1a84:	00146e00 	andseq	r6, r4, r0, lsl #28
    1a88:	00148608 	andseq	r8, r4, r8, lsl #12
    1a8c:	36000208 	strcc	r0, [r0], -r8, lsl #4
    1a90:	0014889f 	mulseq	r4, pc, r8	; <UNPREDICTABLE>
    1a94:	00148e08 	andseq	r8, r4, r8, lsl #28
    1a98:	53000108 	movwpl	r0, #264	; 0x108
	...
    1aa4:	0800148e 	stmdaeq	r0, {r1, r2, r3, r7, sl, ip}
    1aa8:	080014a4 	stmdaeq	r0, {r2, r5, r7, sl, ip}
    1aac:	9f300002 	svcls	0x00300002
    1ab0:	080014a4 	stmdaeq	r0, {r2, r5, r7, sl, ip}
    1ab4:	080014a6 	stmdaeq	r0, {r1, r2, r5, r7, sl, ip}
    1ab8:	a6530001 	ldrbge	r0, [r3], -r1
    1abc:	ae080014 	mcrge	0, 0, r0, cr8, cr4, {0}
    1ac0:	02080014 	andeq	r0, r8, #20
    1ac4:	ae9f3000 	cdpge	0, 9, cr3, cr15, cr0, {0}
    1ac8:	b0080014 	andlt	r0, r8, r4, lsl r0
    1acc:	01080014 	tsteq	r8, r4, lsl r0
    1ad0:	14b05300 	ldrtne	r5, [r0], #768	; 0x300
    1ad4:	14b80800 	ldrtne	r0, [r8], #2048	; 0x800
    1ad8:	00020800 	andeq	r0, r2, r0, lsl #16
    1adc:	14b89f30 	ldrtne	r9, [r8], #3888	; 0xf30
    1ae0:	14ba0800 	ldrtne	r0, [sl], #2048	; 0x800
    1ae4:	00010800 	andeq	r0, r1, r0, lsl #16
    1ae8:	0014ba53 	andseq	fp, r4, r3, asr sl
    1aec:	0014c208 	andseq	ip, r4, r8, lsl #4
    1af0:	30000208 	andcc	r0, r0, r8, lsl #4
    1af4:	0014c29f 	mulseq	r4, pc, r2	; <UNPREDICTABLE>
    1af8:	0014c408 	andseq	ip, r4, r8, lsl #8
    1afc:	53000108 	movwpl	r0, #264	; 0x108
    1b00:	080014c4 	stmdaeq	r0, {r2, r6, r7, sl, ip}
    1b04:	08001580 	stmdaeq	r0, {r7, r8, sl, ip}
    1b08:	9f300002 	svcls	0x00300002
    1b0c:	08001580 	stmdaeq	r0, {r7, r8, sl, ip}
    1b10:	0800158d 	stmdaeq	r0, {r0, r2, r3, r7, r8, sl, ip}
    1b14:	40530001 	subsmi	r0, r3, r1
    1b18:	4a080016 	bmi	201b78 <__Stack_Size+0x201778>
    1b1c:	02080016 	andeq	r0, r8, #22
    1b20:	4a9f3000 	bmi	fe7cdb28 <BootRAM+0xd73e2c9>
    1b24:	60080016 	andvs	r0, r8, r6, lsl r0
    1b28:	06080016 			; <UNDEFINED> instruction: 0x06080016
    1b2c:	0fd50300 	svceq	0x00d50300
    1b30:	009f0800 	addseq	r0, pc, r0, lsl #16
    1b34:	00000000 	andeq	r0, r0, r0
    1b38:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
    1b3c:	92080015 	andls	r0, r8, #21
    1b40:	02080015 	andeq	r0, r8, #21
    1b44:	9e9f3000 	cdpls	0, 9, cr3, cr15, cr0, {0}
    1b48:	b4080015 	strlt	r0, [r8], #-21
    1b4c:	01080015 	tsteq	r8, r5, lsl r0
    1b50:	15b85000 	ldrne	r5, [r8, #0]!
    1b54:	15c00800 	strbne	r0, [r0, #2048]	; 0x800
    1b58:	00010800 	andeq	r0, r1, r0, lsl #16
    1b5c:	0015c450 	andseq	ip, r5, r0, asr r4
    1b60:	0015d208 	andseq	sp, r5, r8, lsl #4
    1b64:	50000108 	andpl	r0, r0, r8, lsl #2
    1b68:	0800162c 	stmdaeq	r0, {r2, r3, r5, r9, sl, ip}
    1b6c:	08001638 	stmdaeq	r0, {r3, r4, r5, r9, sl, ip}
    1b70:	00500001 	subseq	r0, r0, r1
    1b74:	00000000 	andeq	r0, r0, r0
    1b78:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
    1b7c:	86080014 			; <UNDEFINED> instruction: 0x86080014
    1b80:	01080015 	tsteq	r8, r5, lsl r0
    1b84:	15925400 	ldrne	r5, [r2, #1024]	; 0x400
    1b88:	15a80800 	strne	r0, [r8, #2048]!	; 0x800
    1b8c:	00010800 	andeq	r0, r1, r0, lsl #16
    1b90:	00164054 	andseq	r4, r6, r4, asr r0
    1b94:	00166008 	andseq	r6, r6, r8
    1b98:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
    1ba4:	08001516 	stmdaeq	r0, {r1, r2, r4, r8, sl, ip}
    1ba8:	08001542 	stmdaeq	r0, {r1, r6, r8, sl, ip}
    1bac:	00510001 	subseq	r0, r1, r1
    1bb0:	00000000 	andeq	r0, r0, r0
    1bb4:	16000000 	strne	r0, [r0], -r0
    1bb8:	42080015 	andmi	r0, r8, #21
    1bbc:	09080015 	stmdbeq	r8, {r0, r2, r4}
    1bc0:	08007300 	stmdaeq	r0, {r8, r9, ip, sp, lr}
    1bc4:	ff081a70 			; <UNDEFINED> instruction: 0xff081a70
    1bc8:	00009f1a 	andeq	r9, r0, sl, lsl pc
    1bcc:	00000000 	andeq	r0, r0, r0
    1bd0:	148e0000 	strne	r0, [lr], #0
    1bd4:	16380800 	ldrtne	r0, [r8], -r0, lsl #16
    1bd8:	00020800 	andeq	r0, r2, r0, lsl #16
    1bdc:	16409f30 			; <UNDEFINED> instruction: 0x16409f30
    1be0:	16600800 	strbtne	r0, [r0], -r0, lsl #16
    1be4:	00020800 	andeq	r0, r2, r0, lsl #16
    1be8:	00009f30 	andeq	r9, r0, r0, lsr pc
    1bec:	00000000 	andeq	r0, r0, r0
    1bf0:	152e0000 	strne	r0, [lr, #-0]!
    1bf4:	15420800 	strbne	r0, [r2, #-2048]	; 0x800
    1bf8:	00010800 	andeq	r0, r1, r0, lsl #16
    1bfc:	00000052 	andeq	r0, r0, r2, asr r0
    1c00:	00000000 	andeq	r0, r0, r0
    1c04:	00149a00 	andseq	r9, r4, r0, lsl #20
    1c08:	00149c08 	andseq	r9, r4, r8, lsl #24
    1c0c:	73000208 	movwvc	r0, #520	; 0x208
    1c10:	00149c03 	andseq	r9, r4, r3, lsl #24
    1c14:	0014c408 	andseq	ip, r4, r8, lsl #8
    1c18:	52000108 	andpl	r0, r0, #8, 2
    1c1c:	08001580 	stmdaeq	r0, {r7, r8, sl, ip}
    1c20:	08001582 	stmdaeq	r0, {r1, r7, r8, sl, ip}
    1c24:	00520001 	subseq	r0, r2, r1
    1c28:	00000000 	andeq	r0, r0, r0
    1c2c:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    1c30:	72080016 	andvc	r0, r8, #22
    1c34:	01080016 	tsteq	r8, r6, lsl r0
    1c38:	16725300 	ldrbtne	r5, [r2], -r0, lsl #6
    1c3c:	16830800 	strne	r0, [r3], r0, lsl #16
    1c40:	00080800 	andeq	r0, r8, r0, lsl #16
    1c44:	01940874 	orrseq	r0, r4, r4, ror r8
    1c48:	9f1aff08 	svcls	0x001aff08
    1c4c:	080016f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r9, sl, ip}
    1c50:	080016fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r9, sl, ip}
    1c54:	fa530001 	blx	14c1c60 <__Stack_Size+0x14c1860>
    1c58:	ff080016 			; <UNDEFINED> instruction: 0xff080016
    1c5c:	08080016 	stmdaeq	r8, {r1, r2, r4}
    1c60:	94087400 	strls	r7, [r8], #-1024	; 0x400
    1c64:	1aff0801 	bne	fffc3c70 <BootRAM+0xef34411>
    1c68:	0017029f 	mulseq	r7, pc, r2	; <UNPREDICTABLE>
    1c6c:	00170a08 	andseq	r0, r7, r8, lsl #20
    1c70:	53000108 	movwpl	r0, #264	; 0x108
	...
    1c7c:	08001670 	stmdaeq	r0, {r4, r5, r6, r9, sl, ip}
    1c80:	080016f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, ip}
    1c84:	10740003 	rsbsne	r0, r4, r3
    1c88:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1c8c:	00000000 	andeq	r0, r0, r0
    1c90:	00167400 	andseq	r7, r6, r0, lsl #8
    1c94:	00168308 	andseq	r8, r6, r8, lsl #6
    1c98:	52000108 	andpl	r0, r0, #8, 2
	...
    1ca4:	08001688 	stmdaeq	r0, {r3, r7, r9, sl, ip}
    1ca8:	08001690 	stmdaeq	r0, {r4, r7, r9, sl, ip}
    1cac:	90500001 	subsls	r0, r0, r1
    1cb0:	a2080016 	andge	r0, r8, #22
    1cb4:	01080016 	tsteq	r8, r6, lsl r0
    1cb8:	00005700 	andeq	r5, r0, r0, lsl #14
    1cbc:	00000000 	andeq	r0, r0, r0
    1cc0:	167a0000 	ldrbtne	r0, [sl], -r0
    1cc4:	16800800 	strne	r0, [r0], r0, lsl #16
    1cc8:	00160800 	andseq	r0, r6, r0, lsl #16
    1ccc:	40120076 	andsmi	r0, r2, r6, ror r0
    1cd0:	7222244b 	eorvc	r2, r2, #1258291200	; 0x4b000000
    1cd4:	40141600 	andsmi	r1, r4, r0, lsl #12
    1cd8:	2d22244b 	cfstrscs	mvf2, [r2, #-300]!	; 0xfffffed4
    1cdc:	16000128 	strne	r0, [r0], -r8, lsr #2
    1ce0:	16809f13 	pkhbtne	r9, r0, r3, lsl #30
    1ce4:	16a20800 	strtne	r0, [r2], r0, lsl #16
    1ce8:	00010800 	andeq	r0, r1, r0, lsl #16
    1cec:	00000056 	andeq	r0, r0, r6, asr r0
    1cf0:	00000000 	andeq	r0, r0, r0
    1cf4:	00172800 	andseq	r2, r7, r0, lsl #16
    1cf8:	00175408 	andseq	r5, r7, r8, lsl #8
    1cfc:	50000108 	andpl	r0, r0, r8, lsl #2
    1d00:	08001754 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, ip}
    1d04:	08001760 	stmdaeq	r0, {r5, r6, r8, r9, sl, ip}
    1d08:	01f30004 	mvnseq	r0, r4
    1d0c:	00009f50 	andeq	r9, r0, r0, asr pc
    1d10:	00000000 	andeq	r0, r0, r0
    1d14:	172e0000 	strne	r0, [lr, -r0]!
    1d18:	17300800 	ldrne	r0, [r0, -r0, lsl #16]!
    1d1c:	00020800 	andeq	r0, r2, r0, lsl #16
    1d20:	17309f30 			; <UNDEFINED> instruction: 0x17309f30
    1d24:	17500800 	ldrbne	r0, [r0, -r0, lsl #16]
    1d28:	00010800 	andeq	r0, r1, r0, lsl #16
    1d2c:	00000053 	andeq	r0, r0, r3, asr r0
    1d30:	00000000 	andeq	r0, r0, r0
    1d34:	00172e00 	andseq	r2, r7, r0, lsl #28
    1d38:	00175808 	andseq	r5, r7, r8, lsl #16
    1d3c:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
    1d48:	08001768 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, ip}
    1d4c:	08001773 	stmdaeq	r0, {r0, r1, r4, r5, r6, r8, r9, sl, ip}
    1d50:	78520001 	ldmdavc	r2, {r0}^
    1d54:	7a080017 	bvc	201db8 <__Stack_Size+0x2019b8>
    1d58:	01080017 	tsteq	r8, r7, lsl r0
    1d5c:	177a5300 	ldrbne	r5, [sl, -r0, lsl #6]!
    1d60:	17800800 	strne	r0, [r0, r0, lsl #16]
    1d64:	00010800 	andeq	r0, r1, r0, lsl #16
    1d68:	00178052 	andseq	r8, r7, r2, asr r0
    1d6c:	00178f08 	andseq	r8, r7, r8, lsl #30
    1d70:	73000808 	movwvc	r0, #2056	; 0x808
    1d74:	08019408 	stmdaeq	r1, {r3, sl, ip, pc}
    1d78:	a29f1aff 	addsge	r1, pc, #1044480	; 0xff000
    1d7c:	ad080017 	stcge	0, cr0, [r8, #-92]	; 0xffffffa4
    1d80:	01080017 	tsteq	r8, r7, lsl r0
    1d84:	00005300 	andeq	r5, r0, r0, lsl #6
    1d88:	00000000 	andeq	r0, r0, r0
    1d8c:	17bc0000 	ldrne	r0, [ip, r0]!
    1d90:	17d40800 	ldrbne	r0, [r4, r0, lsl #16]
    1d94:	00010800 	andeq	r0, r1, r0, lsl #16
    1d98:	0017d450 	andseq	sp, r7, r0, asr r4
    1d9c:	0017d608 	andseq	sp, r7, r8, lsl #12
    1da0:	70000308 	andvc	r0, r0, r8, lsl #6
    1da4:	17d69f7e 			; <UNDEFINED> instruction: 0x17d69f7e
    1da8:	17e60800 	strbne	r0, [r6, r0, lsl #16]!
    1dac:	00030800 	andeq	r0, r3, r0, lsl #16
    1db0:	e69f7f70 			; <UNDEFINED> instruction: 0xe69f7f70
    1db4:	ea080017 	b	201e18 <__Stack_Size+0x201a18>
    1db8:	01080017 	tsteq	r8, r7, lsl r0
    1dbc:	17ea5000 	strbne	r5, [sl, r0]!
    1dc0:	17ec0800 	strbne	r0, [ip, r0, lsl #16]!
    1dc4:	00030800 	andeq	r0, r3, r0, lsl #16
    1dc8:	009f7e70 	addseq	r7, pc, r0, ror lr	; <UNPREDICTABLE>
    1dcc:	00000000 	andeq	r0, r0, r0
    1dd0:	bc000000 	stclt	0, cr0, [r0], {-0}
    1dd4:	c2080017 	andgt	r0, r8, #23
    1dd8:	01080017 	tsteq	r8, r7, lsl r0
    1ddc:	17c25100 	strbne	r5, [r2, r0, lsl #2]
    1de0:	17ec0800 	strbne	r0, [ip, r0, lsl #16]!
    1de4:	00040800 	andeq	r0, r4, r0, lsl #16
    1de8:	9f5101f3 	svcls	0x005101f3
	...
    1df4:	080017bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, ip}
    1df8:	080017c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, ip}
    1dfc:	c4520001 	ldrbgt	r0, [r2], #-1
    1e00:	ec080017 	stc	0, cr0, [r8], {23}
    1e04:	04080017 	streq	r0, [r8], #-23
    1e08:	5201f300 	andpl	pc, r1, #0, 6
    1e0c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1e10:	00000000 	andeq	r0, r0, r0
    1e14:	0017cc00 	andseq	ip, r7, r0, lsl #24
    1e18:	0017ce08 	andseq	ip, r7, r8, lsl #28
    1e1c:	52000108 	andpl	r0, r0, #8, 2
    1e20:	080017ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, r9, sl, ip}
    1e24:	080017e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, sl, ip}
    1e28:	01f3000f 	mvnseq	r0, pc
    1e2c:	ffff0a52 			; <UNDEFINED> instruction: 0xffff0a52
    1e30:	3101231a 	tstcc	r1, sl, lsl r3
    1e34:	1c007326 	stcne	3, cr7, [r0], {38}	; 0x26
    1e38:	0017e69f 	mulseq	r7, pc, r6	; <UNPREDICTABLE>
    1e3c:	0017e808 	andseq	lr, r7, r8, lsl #16
    1e40:	f3001008 	vhadd.u8	d1, d0, d8
    1e44:	ff0a5201 			; <UNDEFINED> instruction: 0xff0a5201
    1e48:	01231aff 	strdeq	r1, [r3, -pc]!
    1e4c:	00732631 	rsbseq	r2, r3, r1, lsr r6
    1e50:	e89f2220 	ldm	pc, {r5, r9, sp}	; <UNPREDICTABLE>
    1e54:	ec080017 	stc	0, cr0, [r8], {23}
    1e58:	0f080017 	svceq	0x00080017
    1e5c:	5201f300 	andpl	pc, r1, #0, 6
    1e60:	1affff0a 	bne	1a90 <__Stack_Size+0x1690>
    1e64:	26310123 	ldrtcs	r0, [r1], -r3, lsr #2
    1e68:	9f1c0073 	svcls	0x001c0073
	...
    1e74:	080017d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, r9, sl, ip}
    1e78:	080017de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, sl, ip}
    1e7c:	7e700008 	cdpvc	0, 7, cr0, cr0, cr8, {0}
    1e80:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    1e84:	17de9f1a 	bfine	r9, sl, #30, #1
    1e88:	17e20800 	strbne	r0, [r2, r0, lsl #16]!
    1e8c:	00010800 	andeq	r0, r1, r0, lsl #16
    1e90:	0017e254 	andseq	lr, r7, r4, asr r2
    1e94:	0017e608 	andseq	lr, r7, r8, lsl #12
    1e98:	70000808 	andvc	r0, r0, r8, lsl #16
    1e9c:	0801947e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, sl, ip, pc}
    1ea0:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    1ea4:	00000000 	andeq	r0, r0, r0
    1ea8:	d6000000 	strle	r0, [r0], -r0
    1eac:	e6080017 			; <UNDEFINED> instruction: 0xe6080017
    1eb0:	12080017 	andne	r0, r8, #23
    1eb4:	947f7000 	ldrbtls	r7, [pc], #-0	; 1ebc <__Stack_Size+0x1abc>
    1eb8:	1aff0801 	bne	fffc3ec4 <BootRAM+0xef34665>
    1ebc:	7e702438 	mrcvc	4, 3, r2, cr0, cr8, {1}
    1ec0:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    1ec4:	009f211a 	addseq	r2, pc, sl, lsl r1	; <UNPREDICTABLE>
    1ec8:	00000000 	andeq	r0, r0, r0
    1ecc:	cc000000 	stcgt	0, cr0, [r0], {-0}
    1ed0:	ce080017 	mcrgt	0, 0, r0, cr8, cr7, {0}
    1ed4:	01080017 	tsteq	r8, r7, lsl r0
    1ed8:	17e65100 	strbne	r5, [r6, r0, lsl #2]!
    1edc:	17e80800 	strbne	r0, [r8, r0, lsl #16]!
    1ee0:	000a0800 	andeq	r0, sl, r0, lsl #16
    1ee4:	24320073 	ldrtcs	r0, [r2], #-115	; 0x73
    1ee8:	23220071 	teqcs	r2, #113	; 0x71
    1eec:	17e89f04 	strbne	r9, [r8, r4, lsl #30]!
    1ef0:	17ea0800 	strbne	r0, [sl, r0, lsl #16]!
    1ef4:	000a0800 	andeq	r0, sl, r0, lsl #16
    1ef8:	24327f73 	ldrtcs	r7, [r2], #-3955	; 0xf73
    1efc:	23220071 	teqcs	r2, #113	; 0x71
    1f00:	00009f04 	andeq	r9, r0, r4, lsl #30
    1f04:	00000000 	andeq	r0, r0, r0
    1f08:	17ec0000 	strbne	r0, [ip, r0]!
    1f0c:	17fe0800 	ldrbne	r0, [lr, r0, lsl #16]!
    1f10:	00010800 	andeq	r0, r1, r0, lsl #16
    1f14:	00180a50 	andseq	r0, r8, r0, asr sl
    1f18:	00180c08 	andseq	r0, r8, r8, lsl #24
    1f1c:	73000a08 	movwvc	r0, #2568	; 0xa08
    1f20:	70243100 	eorvc	r3, r4, r0, lsl #2
    1f24:	02232200 	eoreq	r2, r3, #0, 4
    1f28:	00180c9f 	mulseq	r8, pc, ip	; <UNPREDICTABLE>
    1f2c:	00180e08 	andseq	r0, r8, r8, lsl #28
    1f30:	73000a08 	movwvc	r0, #2568	; 0xa08
    1f34:	7024317f 	eorvc	r3, r4, pc, ror r1
    1f38:	02232200 	eoreq	r2, r3, #0, 4
    1f3c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1f40:	00000000 	andeq	r0, r0, r0
    1f44:	0017ec00 	andseq	lr, r7, r0, lsl #24
    1f48:	0017f208 	andseq	pc, r7, r8, lsl #4
    1f4c:	51000108 	tstpl	r0, r8, lsl #2
    1f50:	080017f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, r9, sl, ip}
    1f54:	08001810 	stmdaeq	r0, {r4, fp, ip}
    1f58:	01f30004 	mvnseq	r0, r4
    1f5c:	00009f51 	andeq	r9, r0, r1, asr pc
    1f60:	00000000 	andeq	r0, r0, r0
    1f64:	17ec0000 	strbne	r0, [ip, r0]!
    1f68:	17f40800 	ldrbne	r0, [r4, r0, lsl #16]!
    1f6c:	00010800 	andeq	r0, r1, r0, lsl #16
    1f70:	0017f452 	andseq	pc, r7, r2, asr r4	; <UNPREDICTABLE>
    1f74:	00181008 	andseq	r1, r8, r8
    1f78:	f3000408 	vshl.u8	d0, d8, d0
    1f7c:	009f5201 	addseq	r5, pc, r1, lsl #4
    1f80:	00000000 	andeq	r0, r0, r0
    1f84:	fc000000 	stc2	0, cr0, [r0], {-0}
    1f88:	fe080017 	mcr2	0, 0, r0, cr8, cr7, {0}
    1f8c:	01080017 	tsteq	r8, r7, lsl r0
    1f90:	17fe5200 	ldrbne	r5, [lr, r0, lsl #4]!
    1f94:	180a0800 	stmdane	sl, {fp}
    1f98:	000f0800 	andeq	r0, pc, r0, lsl #16
    1f9c:	0a5201f3 	beq	1482770 <__Stack_Size+0x1482370>
    1fa0:	231affff 	tstcs	sl, #1020	; 0x3fc
    1fa4:	73263101 	teqvc	r6, #1073741824	; 0x40000000
    1fa8:	0a9f1c00 	beq	fe7c8fb0 <BootRAM+0xd739751>
    1fac:	0c080018 	stceq	0, cr0, [r8], {24}
    1fb0:	10080018 	andne	r0, r8, r8, lsl r0
    1fb4:	5201f300 	andpl	pc, r1, #0, 6
    1fb8:	1affff0a 	bne	1be8 <__Stack_Size+0x17e8>
    1fbc:	26310123 	ldrtcs	r0, [r1], -r3, lsr #2
    1fc0:	22200073 	eorcs	r0, r0, #115	; 0x73
    1fc4:	00180c9f 	mulseq	r8, pc, ip	; <UNPREDICTABLE>
    1fc8:	00181008 	andseq	r1, r8, r8
    1fcc:	f3000f08 	vpmax.f32	d0, d0, d8
    1fd0:	ff0a5201 			; <UNDEFINED> instruction: 0xff0a5201
    1fd4:	01231aff 	strdeq	r1, [r3, -pc]!
    1fd8:	00732631 	rsbseq	r2, r3, r1, lsr r6
    1fdc:	00009f1c 	andeq	r9, r0, ip, lsl pc
    1fe0:	00000000 	andeq	r0, r0, r0
    1fe4:	17fc0000 	ldrbne	r0, [ip, r0]!
    1fe8:	17fe0800 	ldrbne	r0, [lr, r0, lsl #16]!
    1fec:	00010800 	andeq	r0, r1, r0, lsl #16
    1ff0:	00180251 	andseq	r0, r8, r1, asr r2
    1ff4:	00180c08 	andseq	r0, r8, r8, lsl #24
    1ff8:	73000a08 	movwvc	r0, #2568	; 0xa08
    1ffc:	71243200 	teqvc	r4, r0, lsl #4
    2000:	04232200 	strteq	r2, [r3], #-512	; 0x200
    2004:	00180c9f 	mulseq	r8, pc, ip	; <UNPREDICTABLE>
    2008:	00180e08 	andseq	r0, r8, r8, lsl #28
    200c:	73000a08 	movwvc	r0, #2568	; 0xa08
    2010:	7124327f 	teqvc	r4, pc, ror r2
    2014:	04232200 	strteq	r2, [r3], #-512	; 0x200
    2018:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    201c:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
   4:	00000000 	andeq	r0, r0, r0
   8:	080000f0 	stmdaeq	r0, {r4, r5, r6, r7}
   c:	08000138 	stmdaeq	r0, {r3, r4, r5, r8}
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
  10:	08000138 	stmdaeq	r0, {r3, r4, r5, r8}
  14:	0800013c 	stmdaeq	r0, {r2, r3, r4, r5, r8}
	...
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
  20:	0800013c 	stmdaeq	r0, {r2, r3, r4, r5, r8}
  24:	0800013e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8}
  28:	0800013e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8}
    if ((wEPVal & EP_CTR_RX) != 0)
  2c:	08000140 	stmdaeq	r0, {r6, r8}
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
  30:	08000140 	stmdaeq	r0, {r6, r8}
  34:	08000142 	stmdaeq	r0, {r1, r6, r8}
  38:	08000142 	stmdaeq	r0, {r1, r6, r8}

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
  3c:	0800014c 	stmdaeq	r0, {r2, r3, r6, r8}

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
  40:	0800014c 	stmdaeq	r0, {r2, r3, r6, r8}
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
  44:	0800014e 	stmdaeq	r0, {r1, r2, r3, r6, r8}
  48:	08000150 	stmdaeq	r0, {r4, r6, r8}
  4c:	08000168 	stmdaeq	r0, {r3, r5, r6, r8}

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
  50:	08000168 	stmdaeq	r0, {r3, r5, r6, r8}
  54:	0800016a 	stmdaeq	r0, {r1, r3, r5, r6, r8}
  58:	0800016a 	stmdaeq	r0, {r1, r3, r5, r6, r8}
  5c:	0800016c 	stmdaeq	r0, {r2, r3, r5, r6, r8}
  60:	0800016c 	stmdaeq	r0, {r2, r3, r5, r6, r8}
  64:	0800016e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8}
  68:	0800016e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8}
  6c:	08000170 	stmdaeq	r0, {r4, r5, r6, r8}
  70:	08000170 	stmdaeq	r0, {r4, r5, r6, r8}
  74:	08000172 	stmdaeq	r0, {r1, r4, r5, r6, r8}
  78:	08000172 	stmdaeq	r0, {r1, r4, r5, r6, r8}
  7c:	08000174 	stmdaeq	r0, {r2, r4, r5, r6, r8}
  80:	08000174 	stmdaeq	r0, {r2, r4, r5, r6, r8}
  84:	08000180 	stmdaeq	r0, {r7, r8}
  88:	08000180 	stmdaeq	r0, {r7, r8}
  8c:	08000228 	stmdaeq	r0, {r3, r5, r9}
  90:	08000228 	stmdaeq	r0, {r3, r5, r9}
  94:	08000288 	stmdaeq	r0, {r3, r7, r9}
  98:	08000288 	stmdaeq	r0, {r3, r7, r9}
  9c:	08000294 	stmdaeq	r0, {r2, r4, r7, r9}
  a0:	08000294 	stmdaeq	r0, {r2, r4, r7, r9}
  a4:	080002a0 	stmdaeq	r0, {r5, r7, r9}
  a8:	080002a0 	stmdaeq	r0, {r5, r7, r9}
  ac:	080002c0 	stmdaeq	r0, {r6, r7, r9}
  b0:	080002c0 	stmdaeq	r0, {r6, r7, r9}
  b4:	080002cc 	stmdaeq	r0, {r2, r3, r6, r7, r9}
  b8:	080002cc 	stmdaeq	r0, {r2, r3, r6, r7, r9}
  bc:	080002f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9}
  c0:	080002f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9}
  c4:	08000370 	stmdaeq	r0, {r4, r5, r6, r8, r9}
  c8:	00000001 	andeq	r0, r0, r1
  cc:	00000001 	andeq	r0, r0, r1
  d0:	08000370 	stmdaeq	r0, {r4, r5, r6, r8, r9}
  d4:	0800038c 	stmdaeq	r0, {r2, r3, r7, r8, r9}
  d8:	0800038c 	stmdaeq	r0, {r2, r3, r7, r8, r9}
  dc:	080003a4 	stmdaeq	r0, {r2, r5, r7, r8, r9}
  e0:	080003a4 	stmdaeq	r0, {r2, r5, r7, r8, r9}
  e4:	08000428 	stmdaeq	r0, {r3, r5, sl}
  e8:	08000428 	stmdaeq	r0, {r3, r5, sl}
  ec:	08000450 	stmdaeq	r0, {r4, r6, sl}
  f0:	08000450 	stmdaeq	r0, {r4, r6, sl}
  f4:	0800046c 	stmdaeq	r0, {r2, r3, r5, r6, sl}
  f8:	0800046c 	stmdaeq	r0, {r2, r3, r5, r6, sl}
  fc:	08000470 	stmdaeq	r0, {r4, r5, r6, sl}
 100:	08000470 	stmdaeq	r0, {r4, r5, r6, sl}
 104:	08000494 	stmdaeq	r0, {r2, r4, r7, sl}
 108:	08000494 	stmdaeq	r0, {r2, r4, r7, sl}
 10c:	080004d4 	stmdaeq	r0, {r2, r4, r6, r7, sl}
 110:	080004d4 	stmdaeq	r0, {r2, r4, r6, r7, sl}
 114:	080004f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, sl}
 118:	080004f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl}
 11c:	080005ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl}
	...
 128:	080005ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl}
 12c:	08000608 	stmdaeq	r0, {r3, r9, sl}
	...
 138:	0800083e 	stmdaeq	r0, {r1, r2, r3, r4, r5, fp}
 13c:	08000842 	stmdaeq	r0, {r1, r6, fp}
 140:	08000844 	stmdaeq	r0, {r2, r6, fp}
 144:	08000846 	stmdaeq	r0, {r1, r2, r6, fp}
	...
 150:	08000608 	stmdaeq	r0, {r3, r9, sl}
 154:	0800061e 	stmdaeq	r0, {r1, r2, r3, r4, r9, sl}
 158:	00000001 	andeq	r0, r0, r1
 15c:	00000001 	andeq	r0, r0, r1
 160:	08000620 	stmdaeq	r0, {r5, r9, sl}
 164:	08000630 	stmdaeq	r0, {r4, r5, r9, sl}
 168:	00000001 	andeq	r0, r0, r1
 16c:	00000001 	andeq	r0, r0, r1
 170:	08000630 	stmdaeq	r0, {r4, r5, r9, sl}
 174:	08000678 	stmdaeq	r0, {r3, r4, r5, r6, r9, sl}
 178:	08000678 	stmdaeq	r0, {r3, r4, r5, r6, r9, sl}
 17c:	080006d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl}
 180:	080006d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl}
 184:	080006f0 	stmdaeq	r0, {r4, r5, r6, r7, r9, sl}
 188:	080006f0 	stmdaeq	r0, {r4, r5, r6, r7, r9, sl}
 18c:	0800070c 	stmdaeq	r0, {r2, r3, r8, r9, sl}
 190:	0800070c 	stmdaeq	r0, {r2, r3, r8, r9, sl}
 194:	08000720 	stmdaeq	r0, {r5, r8, r9, sl}
 198:	08000720 	stmdaeq	r0, {r5, r8, r9, sl}
 19c:	08000738 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl}
 1a0:	08000738 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl}
 1a4:	08000764 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl}
 1a8:	08000764 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl}
 1ac:	080007ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl}
 1b0:	080007ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl}
 1b4:	08000818 	stmdaeq	r0, {r3, r4, fp}
 1b8:	08000818 	stmdaeq	r0, {r3, r4, fp}
 1bc:	0800083c 	stmdaeq	r0, {r2, r3, r4, r5, fp}
 1c0:	0800083c 	stmdaeq	r0, {r2, r3, r4, r5, fp}
 1c4:	08000864 	stmdaeq	r0, {r2, r5, r6, fp}
 1c8:	08000864 	stmdaeq	r0, {r2, r5, r6, fp}
 1cc:	08000878 	stmdaeq	r0, {r3, r4, r5, r6, fp}
 1d0:	08000878 	stmdaeq	r0, {r3, r4, r5, r6, fp}
 1d4:	080008ac 	stmdaeq	r0, {r2, r3, r5, r7, fp}
 1d8:	00000001 	andeq	r0, r0, r1
 1dc:	00000001 	andeq	r0, r0, r1
 1e0:	080008ac 	stmdaeq	r0, {r2, r3, r5, r7, fp}
 1e4:	080008f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, fp}
 1e8:	080008f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, fp}
 1ec:	08000904 	stmdaeq	r0, {r2, r8, fp}
 1f0:	08000904 	stmdaeq	r0, {r2, r8, fp}
 1f4:	0800091c 	stmdaeq	r0, {r2, r3, r4, r8, fp}
 1f8:	0800091c 	stmdaeq	r0, {r2, r3, r4, r8, fp}
 1fc:	0800092e 	stmdaeq	r0, {r1, r2, r3, r5, r8, fp}
 200:	08000930 	stmdaeq	r0, {r4, r5, r8, fp}
 204:	08000940 	stmdaeq	r0, {r6, r8, fp}
 208:	08000940 	stmdaeq	r0, {r6, r8, fp}
 20c:	08000958 	stmdaeq	r0, {r3, r4, r6, r8, fp}
	...
 218:	08000958 	stmdaeq	r0, {r3, r4, r6, r8, fp}
 21c:	080009b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, fp}
 220:	080009b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, fp}
 224:	080009f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, fp}
 228:	00000001 	andeq	r0, r0, r1
 22c:	00000001 	andeq	r0, r0, r1
 230:	080009f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, fp}
 234:	08000a10 	stmdaeq	r0, {r4, r9, fp}
 238:	08000a10 	stmdaeq	r0, {r4, r9, fp}
 23c:	08000a28 	stmdaeq	r0, {r3, r5, r9, fp}
 240:	08000a28 	stmdaeq	r0, {r3, r5, r9, fp}
 244:	08000a50 	stmdaeq	r0, {r4, r6, r9, fp}
 248:	08000a50 	stmdaeq	r0, {r4, r6, r9, fp}
 24c:	08000a84 	stmdaeq	r0, {r2, r7, r9, fp}
 250:	08000a84 	stmdaeq	r0, {r2, r7, r9, fp}
 254:	08000ad0 	stmdaeq	r0, {r4, r6, r7, r9, fp}
 258:	08000ad0 	stmdaeq	r0, {r4, r6, r7, r9, fp}
 25c:	08000cdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, sl, fp}
 260:	00000001 	andeq	r0, r0, r1
 264:	00000001 	andeq	r0, r0, r1
 268:	00000001 	andeq	r0, r0, r1
 26c:	00000001 	andeq	r0, r0, r1
 270:	08000cdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, sl, fp}
 274:	08000ce8 	stmdaeq	r0, {r3, r5, r6, r7, sl, fp}
 278:	08000ce8 	stmdaeq	r0, {r3, r5, r6, r7, sl, fp}
 27c:	08000cec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, fp}
	...
 288:	00000001 	andeq	r0, r0, r1
 28c:	00000001 	andeq	r0, r0, r1
 290:	00000001 	andeq	r0, r0, r1
 294:	00000001 	andeq	r0, r0, r1
	...
 2a0:	08000de6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, sl, fp}
 2a4:	08000de8 	stmdaeq	r0, {r3, r5, r6, r7, r8, sl, fp}
 2a8:	08000df8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, sl, fp}
 2ac:	08000e24 	stmdaeq	r0, {r2, r5, r9, sl, fp}
	...
 2b8:	00000001 	andeq	r0, r0, r1
 2bc:	00000001 	andeq	r0, r0, r1
 2c0:	00000001 	andeq	r0, r0, r1
 2c4:	00000001 	andeq	r0, r0, r1
	...
 2d0:	00000001 	andeq	r0, r0, r1
 2d4:	00000001 	andeq	r0, r0, r1
 2d8:	00000001 	andeq	r0, r0, r1
 2dc:	00000001 	andeq	r0, r0, r1
	...
 2e8:	00000001 	andeq	r0, r0, r1
 2ec:	00000001 	andeq	r0, r0, r1
 2f0:	00000001 	andeq	r0, r0, r1
 2f4:	00000001 	andeq	r0, r0, r1
 2f8:	00000001 	andeq	r0, r0, r1
 2fc:	00000001 	andeq	r0, r0, r1
	...
 308:	00000001 	andeq	r0, r0, r1
 30c:	00000001 	andeq	r0, r0, r1
 310:	00000001 	andeq	r0, r0, r1
 314:	00000001 	andeq	r0, r0, r1
	...
 320:	00000001 	andeq	r0, r0, r1
 324:	00000001 	andeq	r0, r0, r1
 328:	00000001 	andeq	r0, r0, r1
 32c:	00000001 	andeq	r0, r0, r1
	...
 338:	00000001 	andeq	r0, r0, r1
 33c:	00000001 	andeq	r0, r0, r1
 340:	00000001 	andeq	r0, r0, r1
 344:	00000001 	andeq	r0, r0, r1
 348:	00000001 	andeq	r0, r0, r1
 34c:	00000001 	andeq	r0, r0, r1
 350:	00000001 	andeq	r0, r0, r1
 354:	00000001 	andeq	r0, r0, r1
 358:	00000001 	andeq	r0, r0, r1
 35c:	00000001 	andeq	r0, r0, r1
 360:	00000001 	andeq	r0, r0, r1
 364:	00000001 	andeq	r0, r0, r1
 368:	00000001 	andeq	r0, r0, r1
 36c:	00000001 	andeq	r0, r0, r1
 370:	00000001 	andeq	r0, r0, r1
 374:	00000001 	andeq	r0, r0, r1
 378:	00000001 	andeq	r0, r0, r1
 37c:	00000001 	andeq	r0, r0, r1
 380:	00000001 	andeq	r0, r0, r1
 384:	00000001 	andeq	r0, r0, r1
 388:	00000001 	andeq	r0, r0, r1
 38c:	00000001 	andeq	r0, r0, r1
 390:	00000001 	andeq	r0, r0, r1
 394:	00000001 	andeq	r0, r0, r1
 398:	00000001 	andeq	r0, r0, r1
 39c:	00000001 	andeq	r0, r0, r1
 3a0:	08000cec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, fp}
 3a4:	08000d16 	stmdaeq	r0, {r1, r2, r4, r8, sl, fp}
 3a8:	00000001 	andeq	r0, r0, r1
 3ac:	00000001 	andeq	r0, r0, r1
 3b0:	00000001 	andeq	r0, r0, r1
 3b4:	00000001 	andeq	r0, r0, r1
 3b8:	00000001 	andeq	r0, r0, r1
 3bc:	00000001 	andeq	r0, r0, r1
 3c0:	00000001 	andeq	r0, r0, r1
 3c4:	00000001 	andeq	r0, r0, r1
 3c8:	00000001 	andeq	r0, r0, r1
 3cc:	00000001 	andeq	r0, r0, r1
 3d0:	08000d16 	stmdaeq	r0, {r1, r2, r4, r8, sl, fp}
 3d4:	08000d34 	stmdaeq	r0, {r2, r4, r5, r8, sl, fp}
 3d8:	00000001 	andeq	r0, r0, r1
 3dc:	00000001 	andeq	r0, r0, r1
 3e0:	00000001 	andeq	r0, r0, r1
 3e4:	00000001 	andeq	r0, r0, r1
 3e8:	08000d34 	stmdaeq	r0, {r2, r4, r5, r8, sl, fp}
 3ec:	08000d50 	stmdaeq	r0, {r4, r6, r8, sl, fp}
 3f0:	00000001 	andeq	r0, r0, r1
 3f4:	00000001 	andeq	r0, r0, r1
 3f8:	00000001 	andeq	r0, r0, r1
 3fc:	00000001 	andeq	r0, r0, r1
 400:	00000001 	andeq	r0, r0, r1
 404:	00000001 	andeq	r0, r0, r1
 408:	00000001 	andeq	r0, r0, r1
 40c:	00000001 	andeq	r0, r0, r1
 410:	00000001 	andeq	r0, r0, r1
 414:	00000001 	andeq	r0, r0, r1
 418:	00000001 	andeq	r0, r0, r1
 41c:	00000001 	andeq	r0, r0, r1
 420:	00000001 	andeq	r0, r0, r1
 424:	00000001 	andeq	r0, r0, r1
 428:	00000001 	andeq	r0, r0, r1
 42c:	00000001 	andeq	r0, r0, r1
 430:	00000001 	andeq	r0, r0, r1
 434:	00000001 	andeq	r0, r0, r1
 438:	08000d50 	stmdaeq	r0, {r4, r6, r8, sl, fp}
 43c:	08000d70 	stmdaeq	r0, {r4, r5, r6, r8, sl, fp}
 440:	08000d70 	stmdaeq	r0, {r4, r5, r6, r8, sl, fp}
 444:	08000d90 	stmdaeq	r0, {r4, r7, r8, sl, fp}
 448:	00000001 	andeq	r0, r0, r1
 44c:	00000001 	andeq	r0, r0, r1
 450:	00000001 	andeq	r0, r0, r1
 454:	00000001 	andeq	r0, r0, r1
 458:	00000001 	andeq	r0, r0, r1
 45c:	00000001 	andeq	r0, r0, r1
 460:	00000001 	andeq	r0, r0, r1
 464:	00000001 	andeq	r0, r0, r1
 468:	08000d90 	stmdaeq	r0, {r4, r7, r8, sl, fp}
 46c:	08000dac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, fp}
 470:	08000dac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, fp}
 474:	08000dc8 	stmdaeq	r0, {r3, r6, r7, r8, sl, fp}
 478:	08000dc8 	stmdaeq	r0, {r3, r6, r7, r8, sl, fp}
 47c:	08000de4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, fp}
 480:	00000001 	andeq	r0, r0, r1
 484:	00000001 	andeq	r0, r0, r1
 488:	08000de4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, fp}
 48c:	08000e24 	stmdaeq	r0, {r2, r5, r9, sl, fp}
 490:	00000001 	andeq	r0, r0, r1
 494:	00000001 	andeq	r0, r0, r1
 498:	00000001 	andeq	r0, r0, r1
 49c:	00000001 	andeq	r0, r0, r1
 4a0:	00000001 	andeq	r0, r0, r1
 4a4:	00000001 	andeq	r0, r0, r1
 4a8:	00000001 	andeq	r0, r0, r1
 4ac:	00000001 	andeq	r0, r0, r1
 4b0:	00000001 	andeq	r0, r0, r1
 4b4:	00000001 	andeq	r0, r0, r1
 4b8:	00000001 	andeq	r0, r0, r1
 4bc:	00000001 	andeq	r0, r0, r1
 4c0:	00000001 	andeq	r0, r0, r1
 4c4:	00000001 	andeq	r0, r0, r1
 4c8:	00000001 	andeq	r0, r0, r1
 4cc:	00000001 	andeq	r0, r0, r1
 4d0:	00000001 	andeq	r0, r0, r1
 4d4:	00000001 	andeq	r0, r0, r1
 4d8:	00000001 	andeq	r0, r0, r1
 4dc:	00000001 	andeq	r0, r0, r1
 4e0:	00000001 	andeq	r0, r0, r1
 4e4:	00000001 	andeq	r0, r0, r1
 4e8:	00000001 	andeq	r0, r0, r1
 4ec:	00000001 	andeq	r0, r0, r1
 4f0:	00000001 	andeq	r0, r0, r1
 4f4:	00000001 	andeq	r0, r0, r1
 4f8:	00000001 	andeq	r0, r0, r1
 4fc:	00000001 	andeq	r0, r0, r1
 500:	00000001 	andeq	r0, r0, r1
 504:	00000001 	andeq	r0, r0, r1
 508:	00000001 	andeq	r0, r0, r1
 50c:	00000001 	andeq	r0, r0, r1
	...
 518:	08000e24 	stmdaeq	r0, {r2, r5, r9, sl, fp}
 51c:	08000f78 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sl, fp}
 520:	00000001 	andeq	r0, r0, r1
 524:	00000001 	andeq	r0, r0, r1
	...
 530:	08000f78 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sl, fp}
 534:	08000fb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, fp}
	...
 540:	080012b8 	stmdaeq	r0, {r3, r4, r5, r7, r9, ip}
 544:	080012c0 	stmdaeq	r0, {r6, r7, r9, ip}
 548:	080012c4 	stmdaeq	r0, {r2, r6, r7, r9, ip}
 54c:	080012c6 	stmdaeq	r0, {r1, r2, r6, r7, r9, ip}
 550:	080012c8 	stmdaeq	r0, {r3, r6, r7, r9, ip}
 554:	080012d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, ip}
	...
 560:	0800148e 	stmdaeq	r0, {r1, r2, r3, r7, sl, ip}
 564:	08001638 	stmdaeq	r0, {r3, r4, r5, r9, sl, ip}
 568:	08001640 	stmdaeq	r0, {r6, r9, sl, ip}
 56c:	08001660 	stmdaeq	r0, {r5, r6, r9, sl, ip}
	...
 578:	08000fb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, fp}
 57c:	08000fd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, fp}
 580:	08000fd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, fp}
 584:	08000ff8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl, fp}
 588:	08000ff8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl, fp}
 58c:	08001088 	stmdaeq	r0, {r3, r7, ip}
 590:	08001088 	stmdaeq	r0, {r3, r7, ip}
 594:	08001130 	stmdaeq	r0, {r4, r5, r8, ip}
 598:	08001130 	stmdaeq	r0, {r4, r5, r8, ip}
 59c:	08001168 	stmdaeq	r0, {r3, r5, r6, r8, ip}
 5a0:	08001168 	stmdaeq	r0, {r3, r5, r6, r8, ip}
 5a4:	080011b0 	stmdaeq	r0, {r4, r5, r7, r8, ip}
 5a8:	080011b0 	stmdaeq	r0, {r4, r5, r7, r8, ip}
 5ac:	08001280 	stmdaeq	r0, {r7, r9, ip}
 5b0:	08001280 	stmdaeq	r0, {r7, r9, ip}
 5b4:	08001304 	stmdaeq	r0, {r2, r8, r9, ip}
 5b8:	08001304 	stmdaeq	r0, {r2, r8, r9, ip}
 5bc:	08001328 	stmdaeq	r0, {r3, r5, r8, r9, ip}
 5c0:	08001328 	stmdaeq	r0, {r3, r5, r8, r9, ip}
 5c4:	08001344 	stmdaeq	r0, {r2, r6, r8, r9, ip}
 5c8:	08001344 	stmdaeq	r0, {r2, r6, r8, r9, ip}
 5cc:	08001384 	stmdaeq	r0, {r2, r7, r8, r9, ip}
 5d0:	08001384 	stmdaeq	r0, {r2, r7, r8, r9, ip}
 5d4:	08001660 	stmdaeq	r0, {r5, r6, r9, sl, ip}
 5d8:	08001660 	stmdaeq	r0, {r5, r6, r9, sl, ip}
 5dc:	08001728 	stmdaeq	r0, {r3, r5, r8, r9, sl, ip}
 5e0:	08001728 	stmdaeq	r0, {r3, r5, r8, r9, sl, ip}
 5e4:	08001760 	stmdaeq	r0, {r5, r6, r8, r9, sl, ip}
 5e8:	08001760 	stmdaeq	r0, {r5, r6, r8, r9, sl, ip}
 5ec:	080017bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, ip}
 5f0:	00000001 	andeq	r0, r0, r1
 5f4:	00000001 	andeq	r0, r0, r1
	...
 600:	080017bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, ip}
 604:	080017ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, ip}
 608:	080017ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, ip}
 60c:	08001810 	stmdaeq	r0, {r4, fp, ip}
	...
